{"version":3,"file":"de.js","sources":["../../node_modules/@lit/localize/internal/str-tag.js","../../node_modules/@lit/localize/internal/deferred.js","../../node_modules/@lit/localize/internal/fnv1a64.js","../../node_modules/@lit/localize/init/runtime.js","../../../locales/de.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * Tag that allows expressions to be used in localized non-HTML template\n * strings.\n *\n * Example: msg(str`Hello ${this.user}!`);\n *\n * The Lit html tag can also be used for this purpose, but HTML will need to be\n * escaped, and there is a small overhead for HTML parsing.\n *\n * Untagged template strings with expressions aren't supported by lit-localize\n * because they don't allow for values to be captured at runtime.\n */\nconst _str = (strings, ...values) => ({\n    strTag: true,\n    strings,\n    values,\n});\nexport const str = _str;\nexport const isStrTagged = (val) => typeof val !== 'string' && 'strTag' in val;\n/**\n * Render the result of a `str` tagged template to a string. Note we don't need\n * to do this for Lit templates, since Lit itself handles rendering.\n */\nexport const joinStringsAndValues = (strings, values, valueOrder) => {\n    let concat = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        concat += values[valueOrder ? valueOrder[i - 1] : i - 1];\n        concat += strings[i];\n    }\n    return concat;\n};\n//# sourceMappingURL=str-tag.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport class Deferred {\n    constructor() {\n        this.settled = false;\n        this.promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n    resolve(value) {\n        this.settled = true;\n        this._resolve(value);\n    }\n    reject(error) {\n        this.settled = true;\n        this._reject(error);\n    }\n}\n//# sourceMappingURL=deferred.js.map","/**\n * @license\n * Copyright 2014 Travis Webb\n * SPDX-License-Identifier: MIT\n */\n// This module is derived from the file:\n// https://github.com/tjwebb/fnv-plus/blob/1e2ce68a07cb7dd4c3c85364f3d8d96c95919474/index.js#L309\n//\n// Changes:\n// - Only the _hash64_1a_fast function is included.\n// - Removed loop unrolling.\n// - Converted to TypeScript ES module.\n// - var -> let/const\n//\n// TODO(aomarks) Upstream improvements to https://github.com/tjwebb/fnv-plus/.\nconst hl = [];\nfor (let i = 0; i < 256; i++) {\n    hl[i] = ((i >> 4) & 15).toString(16) + (i & 15).toString(16);\n}\n/**\n * Perform a FNV-1A 64-bit hash of the given string (as UTF-16 code units), and\n * return a hexadecimal digest (left zero padded to 16 characters).\n *\n * @see {@link http://tools.ietf.org/html/draft-eastlake-fnv-06}\n */\nexport function fnv1a64(str) {\n    let t0 = 0, v0 = 0x2325, t1 = 0, v1 = 0x8422, t2 = 0, v2 = 0x9ce4, t3 = 0, v3 = 0xcbf2;\n    for (let i = 0; i < str.length; i++) {\n        v0 ^= str.charCodeAt(i);\n        t0 = v0 * 435;\n        t1 = v1 * 435;\n        t2 = v2 * 435;\n        t3 = v3 * 435;\n        t2 += v0 << 8;\n        t3 += v1 << 8;\n        t1 += t0 >>> 16;\n        v0 = t0 & 65535;\n        t2 += t1 >>> 16;\n        v1 = t1 & 65535;\n        v3 = (t3 + (t2 >>> 16)) & 65535;\n        v2 = t2 & 65535;\n    }\n    return (hl[v3 >> 8] +\n        hl[v3 & 255] +\n        hl[v2 >> 8] +\n        hl[v2 & 255] +\n        hl[v1 >> 8] +\n        hl[v1 & 255] +\n        hl[v0 >> 8] +\n        hl[v0 & 255]);\n}\n//# sourceMappingURL=fnv1a64.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { _installMsgImplementation } from '../lit-localize.js';\nimport { Deferred } from '../internal/deferred.js';\nimport { LOCALE_STATUS_EVENT } from '../internal/locale-status-event.js';\nimport { runtimeMsg } from '../internal/runtime-msg.js';\n/**\n * Dispatch a \"lit-localize-status\" event to `window` with the given detail.\n */\nfunction dispatchStatusEvent(detail) {\n    window.dispatchEvent(new CustomEvent(LOCALE_STATUS_EVENT, { detail }));\n}\nlet activeLocale = '';\nlet loadingLocale;\nlet sourceLocale;\nlet validLocales;\nlet loadLocale;\nlet templates;\nlet loading = new Deferred();\n// The loading promise must be initially resolved, because that's what we should\n// return if the user immediately calls setLocale(sourceLocale).\nloading.resolve();\nlet requestId = 0;\n/**\n * Set configuration parameters for lit-localize when in runtime mode. Returns\n * an object with functions:\n *\n * - `getLocale`: Return the active locale code.\n * - `setLocale`: Set the active locale code.\n *\n * Throws if called more than once.\n */\nexport const configureLocalization = (config) => {\n    _installMsgImplementation(((template, options) => runtimeMsg(templates, template, options)));\n    activeLocale = sourceLocale = config.sourceLocale;\n    validLocales = new Set(config.targetLocales);\n    validLocales.add(config.sourceLocale);\n    loadLocale = config.loadLocale;\n    return { getLocale, setLocale };\n};\n/**\n * Return the active locale code.\n */\nconst getLocale = () => {\n    return activeLocale;\n};\n/**\n * Set the active locale code, and begin loading templates for that locale using\n * the `loadLocale` function that was passed to `configureLocalization`. Returns\n * a promise that resolves when the next locale is ready to be rendered.\n *\n * Note that if a second call to `setLocale` is made while the first requested\n * locale is still loading, then the second call takes precedence, and the\n * promise returned from the first call will resolve when second locale is\n * ready. If you need to know whether a particular locale was loaded, check\n * `getLocale` after the promise resolves.\n *\n * Throws if the given locale is not contained by the configured `sourceLocale`\n * or `targetLocales`.\n */\nconst setLocale = (newLocale) => {\n    if (newLocale === (loadingLocale !== null && loadingLocale !== void 0 ? loadingLocale : activeLocale)) {\n        return loading.promise;\n    }\n    if (!validLocales || !loadLocale) {\n        throw new Error('Internal error');\n    }\n    if (!validLocales.has(newLocale)) {\n        throw new Error('Invalid locale code');\n    }\n    requestId++;\n    const thisRequestId = requestId;\n    loadingLocale = newLocale;\n    if (loading.settled) {\n        loading = new Deferred();\n    }\n    dispatchStatusEvent({ status: 'loading', loadingLocale: newLocale });\n    const localePromise = newLocale === sourceLocale\n        ? // We could switch to the source locale synchronously, but we prefer to\n            // queue it on a microtask so that switching locales is consistently\n            // asynchronous.\n            Promise.resolve({ templates: undefined })\n        : loadLocale(newLocale);\n    localePromise.then((mod) => {\n        if (requestId === thisRequestId) {\n            activeLocale = newLocale;\n            loadingLocale = undefined;\n            templates = mod.templates;\n            dispatchStatusEvent({ status: 'ready', readyLocale: newLocale });\n            loading.resolve();\n        }\n        // Else another locale was requested in the meantime. Don't resolve or\n        // reject, because the newer load call is going to use the same promise.\n        // Note the user can call getLocale() after the promise resolves if they\n        // need to check if the locale is still the one they expected to load.\n    }, (err) => {\n        if (requestId === thisRequestId) {\n            dispatchStatusEvent({\n                status: 'error',\n                errorLocale: newLocale,\n                errorMessage: err.toString(),\n            });\n            loading.reject(err);\n        }\n    });\n    return loading.promise;\n};\n//# sourceMappingURL=runtime.js.map","\n    // Do not modify this file by hand!\n    // Re-generate this file by running lit-localize\n\n    \n    import {str} from '@lit/localize';\n\n    /* eslint-disable no-irregular-whitespace */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n\n    export const templates = {\n      's0731afca1ab76175': str`${0} nach ${1} verschoben`,\n's0f8217f07c54b541': str`${0} entfernt`,\n's5e8250fb85d64c23': `Schließen`,\n's62b4f83c9503e1af': str`≥ ${0} Knoten verändert`,\n's6d8c02aee480af7a': `Menü`,\n's7417792bbe720149': `Wiederholen`,\n's83eaab546be4bfb9': str`${0} in ${1} eingefügt`,\n's85a55e7007003cc2': str`${0} verändert`,\n's8f4be9f086eb530f': `Rückgängig`,\n's90c6a2fed2796c07': `Bearbeitungshistorie`,\n'sbcdf43ebad9c5a3a': `Etwas unerwartetes ist passiert!`,\n'sfb0e98cb12fe463c': `Hier wird Ihre Bearbeitungshistorie angezeigt.`,\n    };\n  "],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE,GAAG,MAAM,MAAM;AACtC,IAAI,MAAM,EAAE,IAAI;AAChB,IAAI,OAAO;AACX,IAAI,MAAM;AACV,CAAC,CAAC,CAAC;AACI,MAAM,GAAG,GAAG,IAAI;;ACtBvB;AACA;AACA;AACA;AACA;AACO,MAAM,QAAQ,CAAC;AACtB,IAAI,WAAW,GAAG;AAClB,QAAQ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AAC7B,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AACxD,YAAY,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AACpC,YAAY,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AAClC,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,OAAO,CAAC,KAAK,EAAE;AACnB,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AAC5B,QAAQ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC7B,KAAK;AACL,IAAI,MAAM,CAAC,KAAK,EAAE;AAClB,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AAC5B,QAAQ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC5B,KAAK;AACL;;ACrBA;AACA;AACA;AACA;AACA;AAYA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC9B,IAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;AACjE;;AClBA;AACA;AACA;AACA;AACA;AAiBA,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC;AAC7B;AACA;AACA,OAAO,CAAC,OAAO,EAAE;;ACvBb;AAMA;AACA;AAEa,MAAA,SAAS,GAAG;AACvB,IAAA,mBAAmB,EAAE,GAAG,CAAA,GAAG,CAAC,CAAA,MAAA,EAAS,CAAC,CAAa,WAAA,CAAA;AACzD,IAAA,mBAAmB,EAAE,GAAG,CAAA,CAAA,EAAG,CAAC,CAAW,SAAA,CAAA;AACvC,IAAA,mBAAmB,EAAE,CAAW,SAAA,CAAA;AAChC,IAAA,mBAAmB,EAAE,GAAG,CAAA,CAAA,EAAA,EAAK,CAAC,CAAmB,iBAAA,CAAA;AACjD,IAAA,mBAAmB,EAAE,CAAM,IAAA,CAAA;AAC3B,IAAA,mBAAmB,EAAE,CAAa,WAAA,CAAA;AAClC,IAAA,mBAAmB,EAAE,GAAG,CAAA,GAAG,CAAC,CAAA,IAAA,EAAO,CAAC,CAAY,UAAA,CAAA;AAChD,IAAA,mBAAmB,EAAE,GAAG,CAAA,CAAA,EAAG,CAAC,CAAY,UAAA,CAAA;AACxC,IAAA,mBAAmB,EAAE,CAAY,UAAA,CAAA;AACjC,IAAA,mBAAmB,EAAE,CAAsB,oBAAA,CAAA;AAC3C,IAAA,mBAAmB,EAAE,CAAkC,gCAAA,CAAA;AACvD,IAAA,mBAAmB,EAAE,CAAgD,8CAAA,CAAA;;;;;"}