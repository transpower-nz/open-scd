{"version":3,"file":"testHelpers.js","sources":["../../../../../node_modules/@openenergytools/xml-lib/dist/testHelpers.js"],"sourcesContent":["import { array, constant, constantFrom, dictionary, object as objectArbitrary, oneof, record, string as stringArbitrary, tuple, webUrl, } from \"fast-check\";\nexport const xmlAttributeName = /^(?!xml|Xml|xMl|xmL|XMl|xML|XmL|XML)[A-Za-z_][A-Za-z0-9-_.]*(:[A-Za-z_][A-Za-z0-9-_.]*)?$/;\nexport function descendants(parent) {\n    return Array.from(parent.childNodes).concat(...Array.from(parent.children).map((child) => descendants(child)));\n}\nexport const sclDocString = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <SCL version=\"2007\" revision=\"B\" xmlns=\"http://www.iec.ch/61850/2003/SCL\" xmlns:ens1=\"http://example.org/somePreexistingExtensionNamespace\">\n    <Substation name=\"A1\" desc=\"test substation\"></Substation>\n  </SCL>`;\nconst testDocStrings = [\n    sclDocString,\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <testDoc1>\n  <element1 property1=\"value1\" property2=\"value2\">SomeText</element1>\n  <element2 property2=\"value2\" property3=\"value3\"><!--AComment--></element2>\n  <element3 property3=\"value3\" property1=\"value1\">\n    <subelement1 property1=\"value1\" property2=\"value2\">SomeMoreText</subelement1>\n    <subelement2 property2=\"value2\" property3=\"value3\"><!----></subelement2>\n    <subelement3 property3=\"value3\" property1=\"value1\"></subelement3>\n  </element3>\n  </testDoc1>`,\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <testDoc2>\n  <element1 property1=\"value1\" property2=\"value2\">SomeText</element1>\n  <element2 property2=\"value2\" property3=\"value3\"><!--AComment--></element2>\n  <element3 property3=\"value3\" property1=\"value1\">\n    <subelement1 property1=\"value1\" property2=\"value2\">SomeMoreText</subelement1>\n    <subelement2 property2=\"value2\" property3=\"value3\"><!----></subelement2>\n    <subelement3 property3=\"value3\" property1=\"value1\"></subelement3>\n  </element3>\n  </testDoc2>`,\n];\nexport const testDocs = tuple(constantFrom(...testDocStrings), constantFrom(...testDocStrings))\n    .map((strs) => strs.map((str) => new DOMParser().parseFromString(str, \"application/xml\")))\n    .map((docs) => docs.map((doc) => ({ doc, nodes: descendants(doc).concat([doc]) })));\nexport function remove(nodes) {\n    const node = oneof({ arbitrary: constantFrom(...nodes), weight: nodes.length }, testDocs.chain((docs) => constantFrom(...docs.map((d) => d.doc))));\n    return record({ node });\n}\nexport function insert(nodes) {\n    const references = nodes.concat([null]);\n    const parent = constantFrom(...nodes);\n    const node = constantFrom(...nodes);\n    const reference = constantFrom(...references);\n    return record({ parent, node, reference });\n}\nexport function setTextContent(nodes) {\n    const element = (constantFrom(...nodes.filter((nd) => nd.nodeType === Node.ELEMENT_NODE)));\n    const textContent = stringArbitrary();\n    return record({ element, textContent });\n}\nexport function setAttribute(nodes) {\n    const element = (constantFrom(...nodes.filter((nd) => nd.nodeType === Node.ELEMENT_NODE)));\n    const attributes = dictionary(stringArbitrary(), oneof(stringArbitrary(), constant(null)));\n    // object() instead of nested dictionary() necessary for performance reasons\n    const attributesNS = objectArbitrary({\n        key: webUrl(),\n        values: [attributes],\n        maxDepth: 0,\n    });\n    return record({ element, attributes, attributesNS });\n}\nexport function complexEdit(nodes) {\n    return array(simpleEdit(nodes));\n}\nexport function simpleEdit(nodes) {\n    return oneof(remove(nodes), insert(nodes), setAttribute(nodes), setTextContent(nodes));\n}\nexport function edit(nodes) {\n    return oneof({ arbitrary: simpleEdit(nodes), weight: 2 }, complexEdit(nodes));\n}\nexport function undoRedoTestCases(testDoc1, testDoc2) {\n    const nodes = testDoc1.nodes.concat(testDoc2.nodes);\n    return record({\n        doc1: constant(testDoc1.doc),\n        doc2: constant(testDoc2.doc),\n        edits: array(edit(nodes)),\n    });\n}\nexport function isParentNode(node) {\n    return (node instanceof Element ||\n        node instanceof Document ||\n        node instanceof DocumentFragment);\n}\nexport function isParentOf(parent, node) {\n    return (isParentNode(parent) &&\n        (node === null || Array.from(parent.childNodes).includes(node)));\n}\nexport function isValidInsert({ parent, node, reference }) {\n    return (node !== reference &&\n        isParentOf(parent, reference) &&\n        !node.contains(parent) &&\n        ![Node.DOCUMENT_NODE, Node.DOCUMENT_TYPE_NODE].some((nodeType) => node.nodeType === nodeType) &&\n        !(parent instanceof Document &&\n            (parent.documentElement || !(node instanceof Element))));\n}\n//# sourceMappingURL=testHelpers.js.map"],"names":[],"mappings":";;;;;;;;;;;;;;AAEO,SAAS,WAAW,CAAC,MAAM,EAAE;AACpC,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnH,CAAC;AACW,MAAC,YAAY,GAAG,CAAC;AAC7B;AACA;AACA,QAAQ,EAAE;AACV,MAAM,cAAc,GAAG;AACvB,IAAI,YAAY;AAChB,IAAI,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;AACd,IAAI,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;AACd,CAAC,CAAC;AACsB,KAAK,CAAC,YAAY,CAAC,GAAG,cAAc,CAAC,EAAE,YAAY,CAAC,GAAG,cAAc,CAAC,CAAC;AAC/F,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;AAC9F,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;;;"}