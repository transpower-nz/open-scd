import { tuple } from '../../../fast-check/lib/esm/arbitrary/tuple.js';
import '../../../fast-check/lib/esm/check/precondition/PreconditionFailure.js';
import '../../../fast-check/lib/esm/stream/StreamHelpers.js';
import '../../../fast-check/lib/esm/check/runner/configuration/VerbosityLevel.js';
import '../../../fast-check/lib/esm/utils/stringify.js';
import '../../../fast-check/lib/esm/check/runner/reporter/ExecutionStatus.js';
import { constantFrom } from '../../../fast-check/lib/esm/arbitrary/constantFrom.js';
import '../../../fast-check/lib/esm/arbitrary/_internals/builders/CharacterRangeArbitraryBuilder.js';
import '../../../fast-check/lib/esm/arbitrary/_internals/helpers/DoubleHelpers.js';
import '../../../fast-check/lib/esm/arbitrary/_internals/helpers/FloatHelpers.js';
import '../../../fast-check/lib/esm/arbitrary/_internals/builders/TypedIntArrayArbitraryBuilder.js';
import '../../../fast-check/lib/esm/arbitrary/sparseArray.js';
import '../../../fast-check/lib/esm/arbitrary/stringMatching.js';

function descendants(parent) {
    return Array.from(parent.childNodes).concat(...Array.from(parent.children).map((child) => descendants(child)));
}
const sclDocString = `<?xml version="1.0" encoding="UTF-8"?>
    <SCL version="2007" revision="B" xmlns="http://www.iec.ch/61850/2003/SCL" xmlns:ens1="http://example.org/somePreexistingExtensionNamespace">
    <Substation name="A1" desc="test substation"></Substation>
  </SCL>`;
const testDocStrings = [
    sclDocString,
    `<?xml version="1.0" encoding="UTF-8"?>
    <testDoc1>
  <element1 property1="value1" property2="value2">SomeText</element1>
  <element2 property2="value2" property3="value3"><!--AComment--></element2>
  <element3 property3="value3" property1="value1">
    <subelement1 property1="value1" property2="value2">SomeMoreText</subelement1>
    <subelement2 property2="value2" property3="value3"><!----></subelement2>
    <subelement3 property3="value3" property1="value1"></subelement3>
  </element3>
  </testDoc1>`,
    `<?xml version="1.0" encoding="UTF-8"?>
    <testDoc2>
  <element1 property1="value1" property2="value2">SomeText</element1>
  <element2 property2="value2" property3="value3"><!--AComment--></element2>
  <element3 property3="value3" property1="value1">
    <subelement1 property1="value1" property2="value2">SomeMoreText</subelement1>
    <subelement2 property2="value2" property3="value3"><!----></subelement2>
    <subelement3 property3="value3" property1="value1"></subelement3>
  </element3>
  </testDoc2>`,
];
tuple(constantFrom(...testDocStrings), constantFrom(...testDocStrings))
    .map((strs) => strs.map((str) => new DOMParser().parseFromString(str, "application/xml")))
    .map((docs) => docs.map((doc) => ({ doc, nodes: descendants(doc).concat([doc]) })));

export { descendants, sclDocString };
//# sourceMappingURL=testHelpers.js.map
