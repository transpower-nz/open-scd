{"version":3,"file":"integer.js","sources":["../../../../../../node_modules/fast-check/lib/esm/arbitrary/integer.js"],"sourcesContent":["import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nconst safeNumberIsInteger = Number.isInteger;\nfunction buildCompleteIntegerConstraints(constraints) {\n    const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n    return { min, max };\n}\nexport function integer(constraints = {}) {\n    const fullConstraints = buildCompleteIntegerConstraints(constraints);\n    if (fullConstraints.min > fullConstraints.max) {\n        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n    }\n    if (!safeNumberIsInteger(fullConstraints.min)) {\n        throw new Error('fc.integer minimum value should be an integer');\n    }\n    if (!safeNumberIsInteger(fullConstraints.max)) {\n        throw new Error('fc.integer maximum value should be an integer');\n    }\n    return new IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}\n"],"names":[],"mappings":";;AACA,MAAM,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAC;AAC7C,SAAS,+BAA+B,CAAC,WAAW,EAAE;AACtD,IAAI,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,KAAK,SAAS,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC;AAC9E,IAAI,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,KAAK,SAAS,GAAG,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;AAC7E,IAAI,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACxB,CAAC;AACM,SAAS,OAAO,CAAC,WAAW,GAAG,EAAE,EAAE;AAC1C,IAAI,MAAM,eAAe,GAAG,+BAA+B,CAAC,WAAW,CAAC,CAAC;AACzE,IAAI,IAAI,eAAe,CAAC,GAAG,GAAG,eAAe,CAAC,GAAG,EAAE;AACnD,QAAQ,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;AACpG,KAAK;AACL,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;AACnD,QAAQ,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;AACzE,KAAK;AACL,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;AACnD,QAAQ,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;AACzE,KAAK;AACL,IAAI,OAAO,IAAI,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC;AAC1E;;;;"}