{"version":3,"file":"util.js","sourceRoot":"","sources":["../util.ts"],"names":[],"mappings":"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","sourcesContent":["import { Edit } from '@openscd/open-scd-core';\nimport { getReference } from '@openscd/oscd-scl';\n\nexport const privType = 'Transpower-SLD-Vertices';\nexport const sldNs = 'https://transpower.co.nz/SCL/SSD/SLD/v0';\nexport const xmlnsNs = 'http://www.w3.org/2000/xmlns/';\nexport const svgNs = 'http://www.w3.org/2000/svg';\nexport const xlinkNs = 'http://www.w3.org/1999/xlink';\n\nexport const eqTypes = [\n  'CAB',\n  'CAP',\n  'CBR',\n  'CTR',\n  'DIS',\n  'GEN',\n  'IFL',\n  'LIN',\n  'MOT',\n  'REA',\n  'RES',\n  'SAR',\n  'SMC',\n  'VTR',\n] as const;\nexport type EqType = (typeof eqTypes)[number];\nexport function isEqType(str: string): str is EqType {\n  return eqTypes.includes(str as EqType);\n}\nexport const ringedEqTypes = new Set(['GEN', 'MOT', 'SMC']);\nexport const singleTerminal = new Set([\n  'BAT',\n  'EFN',\n  'FAN',\n  'GEN',\n  'IFL',\n  'MOT',\n  'PMP',\n  'RRC',\n  'SAR',\n  'SMC',\n  'VTR',\n]);\n\n/* eslint-disable no-bitwise */\nexport function uuid() {\n  const digits = new Array(36);\n  for (let i = 0; i < 36; i += 1) {\n    if ([8, 13, 18, 23].includes(i)) digits[i] = '-';\n    else digits[i] = Math.floor(Math.random() * 16);\n  }\n  digits[14] = 4;\n  digits[19] &= ~(1 << 2);\n  digits[19] |= 1 << 3;\n  return digits.map(x => x.toString(16)).join('');\n}\n/* eslint-enable no-bitwise */\n\nconst transformerKinds = ['default', 'auto', 'earthing'] as const;\nexport type Point = [number, number];\nexport type TransformerKind = (typeof transformerKinds)[number];\nexport type Attrs = {\n  pos: Point;\n  dim: Point;\n  label: Point;\n  flip: boolean;\n  rot: 0 | 1 | 2 | 3;\n  bus: boolean;\n  weight: number;\n  color: string;\n  kind: TransformerKind;\n};\n\nexport function isTransformerKind(\n  kind: string | null\n): kind is TransformerKind {\n  return transformerKinds.includes(kind as TransformerKind);\n}\n\nexport function xmlBoolean(value?: string | null) {\n  return ['true', '1'].includes(value?.trim() ?? 'false');\n}\n\nexport function isBusBar(element: Element) {\n  return (\n    element.tagName === 'Bay' &&\n    xmlBoolean(element.querySelector('Section[bus]')?.getAttribute('bus'))\n  );\n}\n\nexport function attributes(element: Element): Attrs {\n  const [x, y, w, h, rotVal, labelX, labelY] = [\n    'x',\n    'y',\n    'w',\n    'h',\n    'rot',\n    'lx',\n    'ly',\n  ].map(name => parseFloat(element.getAttributeNS(sldNs, name) ?? '0'));\n  const weight = parseInt(element.getAttributeNS(sldNs, 'weight') ?? '300', 10);\n  const pos = [x, y].map(d => Math.max(0, d)) as Point;\n  const dim = [w, h].map(d => Math.max(1, d)) as Point;\n  const label = [labelX, labelY].map(d => Math.max(0, d)) as Point;\n\n  const bus = xmlBoolean(element.getAttribute('bus'));\n  const flip = xmlBoolean(element.getAttributeNS(sldNs, 'flip'));\n  const kindVal = element.getAttributeNS(sldNs, 'kind');\n  const kind = isTransformerKind(kindVal) ? kindVal : 'default';\n  const color = element.getAttributeNS(sldNs, 'color') || '#000';\n\n  const rot = (((rotVal % 4) + 4) % 4) as 0 | 1 | 2 | 3;\n\n  return { pos, dim, label, flip, rot, bus, weight, color, kind };\n}\n\nfunction pathString(...args: string[]) {\n  return args.join('/');\n}\n\nexport function elementPath(element: Element, ...rest: string[]): string {\n  const pedigree = [];\n  let child = element;\n  while (child.parentElement && child.hasAttribute('name')) {\n    pedigree.unshift(child.getAttribute('name')!);\n    child = child.parentElement;\n  }\n  return pathString(...pedigree, ...rest);\n}\n\nfunction collinear(v0: Element, v1: Element, v2: Element) {\n  const [[x0, y0], [x1, y1], [x2, y2]] = [v0, v1, v2].map(vertex =>\n    ['x', 'y'].map(name => vertex.getAttributeNS(sldNs, name))\n  );\n  return (x0 === x1 && x1 === x2) || (y0 === y1 && y1 === y2);\n}\n\nexport function removeNode(node: Element): Edit[] {\n  const edits = [] as Edit[];\n\n  if (xmlBoolean(node.querySelector(`Section[bus]`)?.getAttribute('bus'))) {\n    Array.from(node.querySelectorAll('Section:not([bus])')).forEach(section =>\n      edits.push({ node: section })\n    );\n    const sections = Array.from(node.querySelectorAll('Section[bus]'));\n    const busSection = sections[0];\n    Array.from(busSection.children)\n      .slice(1)\n      .forEach(vertex => edits.push({ node: vertex }));\n    const lastVertex = sections[sections.length - 1].lastElementChild;\n    if (lastVertex)\n      edits.push({ parent: busSection, node: lastVertex, reference: null });\n    sections.slice(1).forEach(section => edits.push({ node: section }));\n  } else edits.push({ node });\n\n  Array.from(\n    node.ownerDocument.querySelectorAll(\n      `Terminal[connectivityNode=\"${node.getAttribute(\n        'pathName'\n      )}\"], NeutralPoint[connectivityNode=\"${node.getAttribute('pathName')}\"]`\n    )\n  ).forEach(terminal => edits.push({ node: terminal }));\n\n  return edits;\n}\n\nfunction reverseSection(section: Element): Edit[] {\n  const edits = [] as Edit[];\n\n  Array.from(section.children)\n    .reverse()\n    .forEach(vertex =>\n      edits.push({ parent: section, node: vertex, reference: null })\n    );\n\n  return edits;\n}\n\nfunction healSectionCut(cut: Element): Edit[] {\n  const [x, y] = ['x', 'y'].map(name => cut.getAttributeNS(sldNs, name));\n\n  const isCut = (vertex: Element) =>\n    vertex !== cut &&\n    vertex.getAttributeNS(sldNs, 'x') === x &&\n    vertex.getAttributeNS(sldNs, 'y') === y;\n\n  const cutVertices = Array.from(\n    cut.closest('Private')!.getElementsByTagNameNS(sldNs, 'Section')\n  ).flatMap(section => Array.from(section.children).filter(isCut));\n  const cutSections = cutVertices.map(v => v.parentElement) as Element[];\n\n  if (cutSections.length > 2) return [];\n  if (cutSections.length < 2)\n    return removeNode(cut.closest('ConnectivityNode')!);\n  const [busA, busB] = cutSections.map(section =>\n    xmlBoolean(section.getAttribute('bus'))\n  );\n  if (busA !== busB) return [];\n\n  const edits = [] as Edit[];\n  const [sectionA, sectionB] = cutSections as [Element, Element];\n  if (isCut(sectionA.firstElementChild!)) edits.push(reverseSection(sectionA));\n  const sectionBChildren = Array.from(sectionB.children);\n  if (isCut(sectionB.lastElementChild!)) sectionBChildren.reverse();\n\n  sectionBChildren\n    .slice(1)\n    .forEach(node => edits.push({ parent: sectionA, node, reference: null }));\n\n  const cutA = Array.from(sectionA.children).find(isCut);\n  const neighbourA = isCut(sectionA.firstElementChild!)\n    ? sectionA.children[1]\n    : sectionA.children[sectionA.childElementCount - 2];\n  const neighbourB = sectionBChildren[1];\n  if (\n    neighbourA &&\n    cutA &&\n    neighbourB &&\n    collinear(neighbourA, cutA, neighbourB)\n  )\n    edits.push({ node: cutA });\n  edits.push({ node: sectionB });\n\n  return edits;\n}\n\nfunction updateTerminals(\n  parent: Element,\n  cNode: Element,\n  substationName: string,\n  voltageLevelName: string,\n  bayName: string,\n  cNodeName: string,\n  connectivityNode: string\n) {\n  const updates = [] as Edit[];\n\n  const oldPathName = cNode.getAttribute('pathName');\n  if (!oldPathName) return [];\n  const [oldSubstationName, oldVoltageLevelName, oldBayName, oldCNodeName] =\n    oldPathName.split('/');\n\n  const terminals = Array.from(\n    (cNode.getRootNode() as Document | Element).querySelectorAll(\n      `Terminal[substationName=\"${oldSubstationName}\"][voltageLevelName=\"${oldVoltageLevelName}\"][bayName=\"${oldBayName}\"][cNodeName=\"${oldCNodeName}\"], Terminal[connectivityNode=\"${oldPathName}\"], NeutralPoint[substationName=\"${oldSubstationName}\"][voltageLevelName=\"${oldVoltageLevelName}\"][bayName=\"${oldBayName}\"][cNodeName=\"${oldCNodeName}\"], NeutralPoint[connectivityNode=\"${oldPathName}\"]`\n    )\n  );\n  terminals.forEach(terminal => {\n    updates.push({\n      element: terminal,\n      attributes: {\n        substationName,\n        voltageLevelName,\n        bayName,\n        connectivityNode,\n        cNodeName,\n      },\n    });\n  });\n  return updates;\n}\n\nfunction updateConnectivityNodes(\n  element: Element,\n  parent: Element,\n  name: string\n) {\n  const updates = [] as Edit[];\n\n  const cNodes = Array.from(element.getElementsByTagName('ConnectivityNode'));\n  if (element.tagName === 'ConnectivityNode') cNodes.push(element);\n  const substationName = parent.closest('Substation')!.getAttribute('name');\n  let voltageLevelName = parent.closest('VoltageLevel')?.getAttribute('name');\n  if (element.tagName === 'VoltageLevel') voltageLevelName = name;\n\n  cNodes.forEach(cNode => {\n    let cNodeName = cNode.getAttribute('name');\n    if (element === cNode) cNodeName = name;\n    let bayName = cNode.parentElement?.getAttribute('name') ?? '';\n    if (element.tagName === 'Bay') bayName = name;\n    if (parent.tagName === 'Bay' && parent.hasAttribute('name'))\n      bayName = parent.getAttribute('name')!;\n\n    if (cNodeName && bayName) {\n      const pathName = `${substationName}/${voltageLevelName}/${bayName}/${cNodeName}`;\n      updates.push({\n        element: cNode,\n        attributes: {\n          pathName,\n        },\n      });\n      if (substationName && voltageLevelName && bayName)\n        updates.push(\n          ...updateTerminals(\n            parent,\n            cNode,\n            substationName,\n            voltageLevelName,\n            bayName,\n            cNodeName,\n            pathName\n          )\n        );\n    }\n  });\n  return updates;\n}\n\nexport function uniqueName(element: Element, parent: Element): string {\n  const children = Array.from(parent.children);\n  const oldName = element.getAttribute('name');\n  if (\n    oldName &&\n    !children.find(child => child.getAttribute('name') === oldName)\n  )\n    return oldName;\n\n  const baseName =\n    element.getAttribute('name')?.replace(/[0-9]*$/, '') ??\n    element.getAttribute('type') ??\n    element.tagName.charAt(0);\n  let index = 1;\n  function hasName(child: Element) {\n    return child.getAttribute('name') === baseName + index.toString();\n  }\n  while (children.find(hasName)) index += 1;\n\n  return baseName + index.toString();\n}\n\nexport function reparentElement(element: Element, parent: Element): Edit[] {\n  const edits: Edit[] = [];\n  edits.push({\n    node: element,\n    parent,\n    reference: getReference(parent, element.tagName),\n  });\n  const newName = uniqueName(element, parent);\n  if (newName !== element.getAttribute('name'))\n    edits.push({ element, attributes: { name: newName } });\n  edits.push(...updateConnectivityNodes(element, parent, newName));\n  return edits;\n}\n\nexport function removeTerminal(terminal: Element): Edit[] {\n  const edits = [] as Edit[];\n\n  edits.push({ node: terminal });\n  const pathName = terminal.getAttribute('connectivityNode');\n  const cNode = terminal.ownerDocument.querySelector(\n    `ConnectivityNode[pathName=\"${pathName}\"]`\n  );\n\n  const otherTerminals = Array.from(\n    terminal.ownerDocument.querySelectorAll(\n      `Terminal[connectivityNode=\"${pathName}\"], NeutralPoint[connectivityNode=\"${pathName}\"]`\n    )\n  ).filter(t => t !== terminal);\n\n  if (\n    cNode &&\n    otherTerminals.length > 1 &&\n    otherTerminals.some(t => t.closest('Bay')) &&\n    otherTerminals.every(t => t.closest('Bay') !== cNode.closest('Bay')) &&\n    !isBusBar(cNode.closest('Bay')!)\n  ) {\n    const newParent = otherTerminals\n      .find(t => t.closest('Bay'))!\n      .closest('Bay');\n    if (newParent) edits.push(...reparentElement(cNode, newParent));\n  }\n  if (\n    cNode &&\n    otherTerminals.length <= 1 &&\n    cNode.getAttribute('name') !== 'grounded'\n  ) {\n    edits.push(...removeNode(cNode));\n    return edits;\n  }\n\n  const priv = cNode?.querySelector(`Private[type=\"${privType}\"]`);\n  const vertex = priv?.querySelector(\n    `Vertex[*|uuid=\"${terminal.getAttributeNS(sldNs, 'uuid')}\"]`\n  );\n  const section = vertex?.parentElement;\n  if (!section) return edits;\n  edits.push({ node: section });\n\n  const cut =\n    vertex === section.lastElementChild\n      ? section.firstElementChild\n      : section.lastElementChild;\n\n  if (cut) edits.push(...healSectionCut(cut));\n\n  return edits;\n}\n\nexport function connectionStartPoints(equipment: Element): {\n  T1: [Point, Point];\n  T2: [Point, Point];\n} {\n  const {\n    pos: [x, y],\n    rot,\n  } = attributes(equipment);\n\n  const T1 = [\n    [\n      [x + 0.5, y + 0.16],\n      [x + 0.84, y + 0.5],\n      [x + 0.5, y + 0.84],\n      [x + 0.16, y + 0.5],\n    ][rot],\n    [\n      [x + 0.5, y],\n      [x + 1, y + 0.5],\n      [x + 0.5, y + 1],\n      [x, y + 0.5],\n    ][rot],\n  ] as [Point, Point];\n  const T2 = [\n    [\n      [x + 0.5, y + 0.84],\n      [x + 0.16, y + 0.5],\n      [x + 0.5, y + 0.16],\n      [x + 0.84, y + 0.5],\n    ][rot],\n    [\n      [x + 0.5, y + 1],\n      [x, y + 0.5],\n      [x + 0.5, y],\n      [x + 1, y + 0.5],\n    ][rot],\n  ] as [Point, Point];\n\n  return { T1, T2 };\n}\n\nexport type ResizeDetail = {\n  w: number;\n  h: number;\n  element: Element;\n};\nexport type ResizeEvent = CustomEvent<ResizeDetail>;\nexport function newResizeEvent(detail: ResizeDetail): ResizeEvent {\n  return new CustomEvent('oscd-sld-resize', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\n\nexport type ResizeTLDetail = {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  element: Element;\n};\nexport type ResizeTLEvent = CustomEvent<ResizeTLDetail>;\nexport function newResizeTLEvent(detail: ResizeTLDetail): ResizeTLEvent {\n  return new CustomEvent('oscd-sld-resize-tl', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\n\nexport type PlaceLabelDetail = {\n  x: number;\n  y: number;\n  element: Element;\n};\nexport type PlaceDetail = {\n  x: number;\n  y: number;\n  element: Element;\n  parent: Element;\n};\nexport type PlaceEvent = CustomEvent<PlaceDetail>;\nexport function newPlaceEvent(detail: PlaceDetail): PlaceEvent {\n  return new CustomEvent('oscd-sld-place', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\n\nexport type PlaceLabelEvent = CustomEvent<PlaceLabelDetail>;\nexport function newPlaceLabelEvent(detail: PlaceLabelDetail): PlaceLabelEvent {\n  return new CustomEvent('oscd-sld-place-label', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\n\nexport type ConnectDetail = {\n  from: Element;\n  path: Point[];\n  fromTerminal: 'T1' | 'T2' | 'N1' | 'N2';\n  to: Element;\n  toTerminal?: 'T1' | 'T2' | 'N1' | 'N2';\n};\nexport type ConnectEvent = CustomEvent<ConnectDetail>;\nexport function newConnectEvent(detail: ConnectDetail): ConnectEvent {\n  return new CustomEvent('oscd-sld-connect', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\nexport type StartEvent = CustomEvent<Element>;\nexport function newRotateEvent(detail: Element): StartEvent {\n  return new CustomEvent('oscd-sld-rotate', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\nexport function newStartResizeTLEvent(detail: Element): StartEvent {\n  return new CustomEvent('oscd-sld-start-resize-tl', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\nexport function newStartResizeBREvent(detail: Element): StartEvent {\n  return new CustomEvent('oscd-sld-start-resize-br', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\nexport type StartPlaceDetail = {\n  element: Element;\n  offset: Point;\n};\nexport type StartPlaceEvent = CustomEvent<StartPlaceDetail>;\nexport function newStartPlaceEvent(\n  element: Element,\n  offset: Point = [0, 0]\n): StartPlaceEvent {\n  return new CustomEvent('oscd-sld-start-place', {\n    bubbles: true,\n    composed: true,\n    detail: { element, offset },\n  });\n}\nexport function newStartPlaceLabelEvent(\n  element: Element,\n  offset: Point = [0, 0]\n): StartPlaceEvent {\n  return new CustomEvent('oscd-sld-start-place-label', {\n    bubbles: true,\n    composed: true,\n    detail: { element, offset },\n  });\n}\nexport type StartConnectDetail = {\n  from: Element;\n  fromTerminal: 'T1' | 'T2' | 'N1' | 'N2';\n  path: Point[];\n};\nexport type StartConnectEvent = CustomEvent<StartConnectDetail>;\nexport function newStartConnectEvent(\n  detail: StartConnectDetail\n): StartConnectEvent {\n  return new CustomEvent('oscd-sld-start-connect', {\n    bubbles: true,\n    composed: true,\n    detail,\n  });\n}\n\ndeclare global {\n  interface ElementEventMap {\n    ['oscd-sld-resize']: ResizeEvent;\n    ['oscd-sld-resize-tl']: ResizeTLEvent;\n    ['oscd-sld-place']: PlaceEvent;\n    ['oscd-sld-place-label']: PlaceLabelEvent;\n    ['oscd-sld-connect']: ConnectEvent;\n    ['oscd-sld-rotate']: StartEvent;\n    ['oscd-sld-start-resize-br']: StartEvent;\n    ['oscd-sld-start-resize-tl']: StartEvent;\n    ['oscd-sld-start-place']: StartPlaceEvent;\n    ['oscd-sld-start-place-label']: StartPlaceEvent;\n    ['oscd-sld-start-connect']: StartConnectEvent;\n  }\n}\n\nconst prettifyXSLT = new DOMParser().parseFromString(\n  [\n    // describes how we want to modify the XML - indent everything\n    '<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">',\n    '  <xsl:strip-space elements=\"*\"/>',\n    '  <xsl:template match=\"para[content-style][not(text())]\">',\n    '    <xsl:value-of select=\"normalize-space(.)\"/>',\n    '  </xsl:template>',\n    '  <xsl:template match=\"node()|@*\">',\n    '    <xsl:copy><xsl:apply-templates select=\"node()|@*\"/></xsl:copy>',\n    '  </xsl:template>',\n    '  <xsl:output indent=\"yes\"/>',\n    '</xsl:stylesheet>',\n  ].join('\\n'),\n  'application/xml'\n);\nlet xsltProcessor: XSLTProcessor;\nif (!navigator.userAgent.toLowerCase().includes('firefox')) {\n  xsltProcessor = new XSLTProcessor();\n  xsltProcessor.importStylesheet(prettifyXSLT);\n}\n\nexport function prettyPrint(xmlDoc: XMLDocument | Element): string {\n  const doc = xsltProcessor\n    ? xsltProcessor.transformToDocument(xmlDoc)\n    : xmlDoc;\n  return new XMLSerializer().serializeToString(doc);\n}\n\nexport const robotoDataURL =\n  'data:application/font-woff;charset=utf-8;base64,';\n"]}