/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$8=globalThis,e$k=t$8.ShadowRoot&&(void 0===t$8.ShadyCSS||t$8.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s$h=Symbol(),o$q=new WeakMap;class n$p{constructor(t,e,o){if(this._$cssResult$=!0,o!==s$h)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e;}get styleSheet(){let t=this.o;const s=this.t;if(e$k&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o$q.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o$q.set(s,t));}return t}toString(){return this.cssText}}const r$c=t=>new n$p("string"==typeof t?t:t+"",void 0,s$h),S$5=(s,o)=>{if(e$k)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement("style"),n=t$8.litNonce;void 0!==n&&o.setAttribute("nonce",n),o.textContent=e.cssText,s.appendChild(o);}},c$7=e$k?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return r$c(e)})(t):t;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{is:i$e,defineProperty:e$j,getOwnPropertyDescriptor:r$b,getOwnPropertyNames:h$5,getOwnPropertySymbols:o$p,getPrototypeOf:n$o}=Object,a$7=globalThis,c$6=a$7.trustedTypes,l$k=c$6?c$6.emptyScript:"",p$4=a$7.reactiveElementPolyfillSupport,d$5=(t,s)=>t,u$7={toAttribute(t,s){switch(s){case Boolean:t=t?l$k:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t);}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t);}catch(t){i=null;}}return i}},f$5=(t,s)=>!i$e(t,s),y$4={attribute:!0,type:String,converter:u$7,reflect:!1,hasChanged:f$5};Symbol.metadata??=Symbol("metadata"),a$7.litPropertyMetadata??=new WeakMap;class b$2 extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t);}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=y$4){if(s.state&&(s.attribute=!1),this._$Ei(),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),r=this.getPropertyDescriptor(t,i,s);void 0!==r&&e$j(this.prototype,t,r);}}static getPropertyDescriptor(t,s,i){const{get:e,set:h}=r$b(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t;}};return {get(){return e?.call(this)},set(s){const r=e?.call(this);h.call(this,s),this.requestUpdate(t,r,i);},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??y$4}static _$Ei(){if(this.hasOwnProperty(d$5("elementProperties")))return;const t=n$o(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties);}static finalize(){if(this.hasOwnProperty(d$5("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d$5("properties"))){const t=this.properties,s=[...h$5(t),...o$p(t)];for(const i of s)this.createProperty(i,t[i]);}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i);}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t);}this.elementStyles=this.finalizeStyles(this.styles);}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(c$7(s));}else void 0!==s&&i.push(c$7(s));return i}static _$Eu(t,s){const i=s.attribute;return !1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev();}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)));}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.();}removeController(t){this._$EO?.delete(t);}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t);}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return S$5(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()));}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()));}attributeChangedCallback(t,s,i){this._$AK(t,i);}_$EC(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const r=(void 0!==i.converter?.toAttribute?i.converter:u$7).toAttribute(s,i.type);this._$Em=t,null==r?this.removeAttribute(e):this.setAttribute(e,r),this._$Em=null;}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),r="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u$7;this._$Em=e,this[e]=r.fromAttribute(s,t.type),this._$Em=null;}}requestUpdate(t,s,i){if(void 0!==t){if(i??=this.constructor.getPropertyOptions(t),!(i.hasChanged??f$5)(this[t],s))return;this.P(t,s,i);}!1===this.isUpdatePending&&(this._$ES=this._$ET());}P(t,s,i){this._$AL.has(t)||this._$AL.set(t,s),!0===i.reflect&&this._$Em!==t&&(this._$Ej??=new Set).add(t);}async _$ET(){this.isUpdatePending=!0;try{await this._$ES;}catch(t){Promise.reject(t);}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0;}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t)!0!==i.wrapped||this._$AL.has(s)||void 0===this[s]||this.P(s,this[s],i);}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EU();}catch(s){throw t=!1,this._$EU(),s}t&&this._$AE(s);}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t);}_$EU(){this._$AL=new Map,this.isUpdatePending=!1;}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return !0}update(t){this._$Ej&&=this._$Ej.forEach((t=>this._$EC(t,this[t]))),this._$EU();}updated(t){}firstUpdated(t){}}b$2.elementStyles=[],b$2.shadowRootOptions={mode:"open"},b$2[d$5("elementProperties")]=new Map,b$2[d$5("finalized")]=new Map,p$4?.({ReactiveElement:b$2}),(a$7.reactiveElementVersions??=[]).push("2.0.4");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$7=globalThis,i$d=t$7.trustedTypes,s$g=i$d?i$d.createPolicy("lit-html",{createHTML:t=>t}):void 0,e$i="$lit$",h$4=`lit$${Math.random().toFixed(9).slice(2)}$`,o$o="?"+h$4,n$n=`<${o$o}>`,r$a=document,l$j=()=>r$a.createComment(""),c$5=t=>null===t||"object"!=typeof t&&"function"!=typeof t,a$6=Array.isArray,u$6=t=>a$6(t)||"function"==typeof t?.[Symbol.iterator],d$4="[ \t\n\f\r]",f$4=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v$2=/-->/g,_$2=/>/g,m$3=RegExp(`>|${d$4}(?:([^\\s"'>=/]+)(${d$4}*=${d$4}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),p$3=/'/g,g$2=/"/g,$$2=/^(?:script|style|textarea|title)$/i,y$3=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x$2=y$3(1),T$2=Symbol.for("lit-noChange"),E$2=Symbol.for("lit-nothing"),A$2=new WeakMap,C$2=r$a.createTreeWalker(r$a,129);function P$2(t,i){if(!a$6(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==s$g?s$g.createHTML(i):i}const V$2=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?"<svg>":3===i?"<math>":"",c=f$4;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f$4?"!--"===u[1]?c=v$2:void 0!==u[1]?c=_$2:void 0!==u[2]?($$2.test(u[2])&&(r=RegExp("</"+u[2],"g")),c=m$3):void 0!==u[3]&&(c=m$3):c===m$3?">"===u[0]?(c=r??f$4,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m$3:'"'===u[3]?g$2:p$3):c===g$2||c===p$3?c=m$3:c===v$2||c===_$2?c=f$4:(c=m$3,r=void 0);const x=c===m$3&&t[i+1].startsWith("/>")?" ":"";l+=c===f$4?s+n$n:d>=0?(o.push(a),s.slice(0,d)+e$i+s.slice(d)+h$4+x):s+h$4+(-2===d?i:x);}return [P$2(t,l+(t[s]||"<?>")+(2===i?"</svg>":3===i?"</math>":"")),o]};class N$2{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V$2(t,s);if(this.el=N$2.createElement(f,n),C$2.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes);}for(;null!==(r=C$2.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e$i)){const i=v[a++],s=r.getAttribute(t).split(h$4),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:"."===e[1]?H$2:"?"===e[1]?I$2:"@"===e[1]?L$2:k$2}),r.removeAttribute(t);}else t.startsWith(h$4)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($$2.test(r.tagName)){const t=r.textContent.split(h$4),s=t.length-1;if(s>0){r.textContent=i$d?i$d.emptyScript:"";for(let i=0;i<s;i++)r.append(t[i],l$j()),C$2.nextNode(),d.push({type:2,index:++c});r.append(t[s],l$j());}}}else if(8===r.nodeType)if(r.data===o$o)d.push({type:2,index:c});else {let t=-1;for(;-1!==(t=r.data.indexOf(h$4,t+1));)d.push({type:7,index:c}),t+=h$4.length-1;}c++;}}static createElement(t,i){const s=r$a.createElement("template");return s.innerHTML=t,s}}function S$4(t,i,s=t,e){if(i===T$2)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c$5(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S$4(t,h._$AS(t,i.values),h,e)),i}class M$2{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i;}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r$a).importNode(i,!0);C$2.currentNode=e;let h=C$2.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R$2(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z$2(h,this,t)),this._$AV.push(i),l=s[++n];}o!==l?.index&&(h=C$2.nextNode(),o++);}return C$2.currentNode=r$a,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++;}}class R$2{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E$2,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0;}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S$4(this,t,i),c$5(t)?t===E$2||null==t||""===t?(this._$AH!==E$2&&this._$AR(),this._$AH=E$2):t!==this._$AH&&t!==T$2&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u$6(t)?this.k(t):this._(t);}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t));}_(t){this._$AH!==E$2&&c$5(this._$AH)?this._$AA.nextSibling.data=t:this.T(r$a.createTextNode(t)),this._$AH=t;}$(t){const{values:i,_$litType$:s}=t,e="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N$2.createElement(P$2(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else {const t=new M$2(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t;}}_$AC(t){let i=A$2.get(t.strings);return void 0===i&&A$2.set(t.strings,i=new N$2(t)),i}k(t){a$6(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R$2(this.O(l$j()),this.O(l$j()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e);}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i;}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t));}}class k$2{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E$2,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E$2;}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=S$4(this,t,i,0),o=!c$5(t)||t!==this._$AH&&t!==T$2,o&&(this._$AH=t);else {const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S$4(this,e[s+n],i,n),r===T$2&&(r=this._$AH[n]),o||=!c$5(r)||r!==this._$AH[n],r===E$2?t=E$2:t!==E$2&&(t+=(r??"")+h[n+1]),this._$AH[n]=r;}o&&!e&&this.j(t);}j(t){t===E$2?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??"");}}class H$2 extends k$2{constructor(){super(...arguments),this.type=3;}j(t){this.element[this.name]=t===E$2?void 0:t;}}class I$2 extends k$2{constructor(){super(...arguments),this.type=4;}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E$2);}}class L$2 extends k$2{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5;}_$AI(t,i=this){if((t=S$4(this,t,i,0)??E$2)===T$2)return;const s=this._$AH,e=t===E$2&&s!==E$2||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E$2&&(s===E$2||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t;}handleEvent(t){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t);}}class z$2{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s;}get _$AU(){return this._$AM._$AU}_$AI(t){S$4(this,t);}}const j$1=t$7.litHtmlPolyfillSupport;j$1?.(N$2,R$2),(t$7.litHtmlVersions??=[]).push("3.2.1");

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$6=globalThis,e$h=t$6.ShadowRoot&&(void 0===t$6.ShadyCSS||t$6.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s$f=Symbol(),o$n=new WeakMap;class n$m{constructor(t,e,o){if(this._$cssResult$=!0,o!==s$f)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e;}get styleSheet(){let t=this.o;const s=this.t;if(e$h&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o$n.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o$n.set(s,t));}return t}toString(){return this.cssText}}const r$9=t=>new n$m("string"==typeof t?t:t+"",void 0,s$f),i$c=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(s)+t[o+1]),t[0]);return new n$m(o,t,s$f)},S$3=(s,o)=>{if(e$h)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement("style"),n=t$6.litNonce;void 0!==n&&o.setAttribute("nonce",n),o.textContent=e.cssText,s.appendChild(o);}},c$4=e$h?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return r$9(e)})(t):t;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{is:i$b,defineProperty:e$g,getOwnPropertyDescriptor:r$8,getOwnPropertyNames:h$3,getOwnPropertySymbols:o$m,getPrototypeOf:n$l}=Object,a$5=globalThis,c$3=a$5.trustedTypes,l$i=c$3?c$3.emptyScript:"",p$2=a$5.reactiveElementPolyfillSupport,d$3=(t,s)=>t,u$5={toAttribute(t,s){switch(s){case Boolean:t=t?l$i:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t);}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t);}catch(t){i=null;}}return i}},f$3=(t,s)=>!i$b(t,s),y$2={attribute:!0,type:String,converter:u$5,reflect:!1,hasChanged:f$3};Symbol.metadata??=Symbol("metadata"),a$5.litPropertyMetadata??=new WeakMap;class b$1 extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t);}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=y$2){if(s.state&&(s.attribute=!1),this._$Ei(),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),r=this.getPropertyDescriptor(t,i,s);void 0!==r&&e$g(this.prototype,t,r);}}static getPropertyDescriptor(t,s,i){const{get:e,set:h}=r$8(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t;}};return {get(){return e?.call(this)},set(s){const r=e?.call(this);h.call(this,s),this.requestUpdate(t,r,i);},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??y$2}static _$Ei(){if(this.hasOwnProperty(d$3("elementProperties")))return;const t=n$l(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties);}static finalize(){if(this.hasOwnProperty(d$3("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d$3("properties"))){const t=this.properties,s=[...h$3(t),...o$m(t)];for(const i of s)this.createProperty(i,t[i]);}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i);}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t);}this.elementStyles=this.finalizeStyles(this.styles);}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(c$4(s));}else void 0!==s&&i.push(c$4(s));return i}static _$Eu(t,s){const i=s.attribute;return !1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev();}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)));}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.();}removeController(t){this._$EO?.delete(t);}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t);}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return S$3(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()));}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()));}attributeChangedCallback(t,s,i){this._$AK(t,i);}_$EC(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const r=(void 0!==i.converter?.toAttribute?i.converter:u$5).toAttribute(s,i.type);this._$Em=t,null==r?this.removeAttribute(e):this.setAttribute(e,r),this._$Em=null;}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),r="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u$5;this._$Em=e,this[e]=r.fromAttribute(s,t.type),this._$Em=null;}}requestUpdate(t,s,i){if(void 0!==t){if(i??=this.constructor.getPropertyOptions(t),!(i.hasChanged??f$3)(this[t],s))return;this.P(t,s,i);}!1===this.isUpdatePending&&(this._$ES=this._$ET());}P(t,s,i){this._$AL.has(t)||this._$AL.set(t,s),!0===i.reflect&&this._$Em!==t&&(this._$Ej??=new Set).add(t);}async _$ET(){this.isUpdatePending=!0;try{await this._$ES;}catch(t){Promise.reject(t);}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0;}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t)!0!==i.wrapped||this._$AL.has(s)||void 0===this[s]||this.P(s,this[s],i);}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EU();}catch(s){throw t=!1,this._$EU(),s}t&&this._$AE(s);}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t);}_$EU(){this._$AL=new Map,this.isUpdatePending=!1;}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return !0}update(t){this._$Ej&&=this._$Ej.forEach((t=>this._$EC(t,this[t]))),this._$EU();}updated(t){}firstUpdated(t){}}b$1.elementStyles=[],b$1.shadowRootOptions={mode:"open"},b$1[d$3("elementProperties")]=new Map,b$1[d$3("finalized")]=new Map,p$2?.({ReactiveElement:b$1}),(a$5.reactiveElementVersions??=[]).push("2.0.4");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$5=globalThis,i$a=t$5.trustedTypes,s$e=i$a?i$a.createPolicy("lit-html",{createHTML:t=>t}):void 0,e$f="$lit$",h$2=`lit$${Math.random().toFixed(9).slice(2)}$`,o$l="?"+h$2,n$k=`<${o$l}>`,r$7=document,l$h=()=>r$7.createComment(""),c$2=t=>null===t||"object"!=typeof t&&"function"!=typeof t,a$4=Array.isArray,u$4=t=>a$4(t)||"function"==typeof t?.[Symbol.iterator],d$2="[ \t\n\f\r]",f$2=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v$1=/-->/g,_$1=/>/g,m$2=RegExp(`>|${d$2}(?:([^\\s"'>=/]+)(${d$2}*=${d$2}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),p$1=/'/g,g$1=/"/g,$$1=/^(?:script|style|textarea|title)$/i,y$1=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x$1=y$1(1),b=y$1(2),T$1=Symbol.for("lit-noChange"),E$1=Symbol.for("lit-nothing"),A$1=new WeakMap,C$1=r$7.createTreeWalker(r$7,129);function P$1(t,i){if(!a$4(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==s$e?s$e.createHTML(i):i}const V$1=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?"<svg>":3===i?"<math>":"",c=f$2;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f$2?"!--"===u[1]?c=v$1:void 0!==u[1]?c=_$1:void 0!==u[2]?($$1.test(u[2])&&(r=RegExp("</"+u[2],"g")),c=m$2):void 0!==u[3]&&(c=m$2):c===m$2?">"===u[0]?(c=r??f$2,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m$2:'"'===u[3]?g$1:p$1):c===g$1||c===p$1?c=m$2:c===v$1||c===_$1?c=f$2:(c=m$2,r=void 0);const x=c===m$2&&t[i+1].startsWith("/>")?" ":"";l+=c===f$2?s+n$k:d>=0?(o.push(a),s.slice(0,d)+e$f+s.slice(d)+h$2+x):s+h$2+(-2===d?i:x);}return [P$1(t,l+(t[s]||"<?>")+(2===i?"</svg>":3===i?"</math>":"")),o]};class N$1{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V$1(t,s);if(this.el=N$1.createElement(f,n),C$1.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes);}for(;null!==(r=C$1.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e$f)){const i=v[a++],s=r.getAttribute(t).split(h$2),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:"."===e[1]?H$1:"?"===e[1]?I$1:"@"===e[1]?L$1:k$1}),r.removeAttribute(t);}else t.startsWith(h$2)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($$1.test(r.tagName)){const t=r.textContent.split(h$2),s=t.length-1;if(s>0){r.textContent=i$a?i$a.emptyScript:"";for(let i=0;i<s;i++)r.append(t[i],l$h()),C$1.nextNode(),d.push({type:2,index:++c});r.append(t[s],l$h());}}}else if(8===r.nodeType)if(r.data===o$l)d.push({type:2,index:c});else {let t=-1;for(;-1!==(t=r.data.indexOf(h$2,t+1));)d.push({type:7,index:c}),t+=h$2.length-1;}c++;}}static createElement(t,i){const s=r$7.createElement("template");return s.innerHTML=t,s}}function S$2(t,i,s=t,e){if(i===T$1)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c$2(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S$2(t,h._$AS(t,i.values),h,e)),i}class M$1{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i;}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r$7).importNode(i,!0);C$1.currentNode=e;let h=C$1.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R$1(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z$1(h,this,t)),this._$AV.push(i),l=s[++n];}o!==l?.index&&(h=C$1.nextNode(),o++);}return C$1.currentNode=r$7,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++;}}class R$1{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E$1,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0;}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S$2(this,t,i),c$2(t)?t===E$1||null==t||""===t?(this._$AH!==E$1&&this._$AR(),this._$AH=E$1):t!==this._$AH&&t!==T$1&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u$4(t)?this.k(t):this._(t);}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t));}_(t){this._$AH!==E$1&&c$2(this._$AH)?this._$AA.nextSibling.data=t:this.T(r$7.createTextNode(t)),this._$AH=t;}$(t){const{values:i,_$litType$:s}=t,e="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N$1.createElement(P$1(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else {const t=new M$1(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t;}}_$AC(t){let i=A$1.get(t.strings);return void 0===i&&A$1.set(t.strings,i=new N$1(t)),i}k(t){a$4(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R$1(this.O(l$h()),this.O(l$h()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e);}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i;}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t));}}class k$1{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E$1,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E$1;}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=S$2(this,t,i,0),o=!c$2(t)||t!==this._$AH&&t!==T$1,o&&(this._$AH=t);else {const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S$2(this,e[s+n],i,n),r===T$1&&(r=this._$AH[n]),o||=!c$2(r)||r!==this._$AH[n],r===E$1?t=E$1:t!==E$1&&(t+=(r??"")+h[n+1]),this._$AH[n]=r;}o&&!e&&this.j(t);}j(t){t===E$1?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??"");}}class H$1 extends k$1{constructor(){super(...arguments),this.type=3;}j(t){this.element[this.name]=t===E$1?void 0:t;}}class I$1 extends k$1{constructor(){super(...arguments),this.type=4;}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E$1);}}class L$1 extends k$1{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5;}_$AI(t,i=this){if((t=S$2(this,t,i,0)??E$1)===T$1)return;const s=this._$AH,e=t===E$1&&s!==E$1||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E$1&&(s===E$1||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t;}handleEvent(t){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t);}}class z$1{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s;}get _$AU(){return this._$AM._$AU}_$AI(t){S$2(this,t);}}const j=t$5.litHtmlPolyfillSupport;j?.(N$1,R$1),(t$5.litHtmlVersions??=[]).push("3.2.1");const B$1=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new R$1(i.insertBefore(l$h(),t),t,void 0,s??{});}return h._$AI(t),h};

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */class r$6 extends b$1{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const s=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=B$1(s,this.renderRoot,this.renderOptions);}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0);}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1);}render(){return T$1}}r$6._$litElement$=!0,r$6["finalized"]=!0,globalThis.litElementHydrateSupport?.({LitElement:r$6});const i$9=globalThis.litElementPolyfillSupport;i$9?.({LitElement:r$6});(globalThis.litElementVersions??=[]).push("4.1.1");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const o$k={attribute:!0,type:String,converter:u$7,reflect:!1,hasChanged:f$5},r$5=(t=o$k,e,r)=>{const{kind:n,metadata:i}=r;let s=globalThis.litPropertyMetadata.get(i);if(void 0===s&&globalThis.litPropertyMetadata.set(i,s=new Map),s.set(r.name,t),"accessor"===n){const{name:o}=r;return {set(r){const n=e.get.call(this);e.set.call(this,r),this.requestUpdate(o,n,t);},init(e){return void 0!==e&&this.P(o,void 0,t),e}}}if("setter"===n){const{name:o}=r;return function(r){const n=this[o];e.call(this,r),this.requestUpdate(o,n,t);}}throw Error("Unsupported decorator location: "+n)};function n$j(t){return (e,o)=>"object"==typeof o?r$5(t,e,o):((t,e,o)=>{const r=e.hasOwnProperty(o);return e.constructor.createProperty(o,r?{...t,wrapped:!0}:t),r?Object.getOwnPropertyDescriptor(e,o):void 0})(t,e,o)}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function r$4(r){return n$j({...r,state:!0,attribute:!1})}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const e$e=(e,t,c)=>(c.configurable=!0,c.enumerable=!0,Reflect.decorate&&"object"!=typeof t&&Object.defineProperty(e,t,c),c);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function e$d(e,r){return (n,s,i)=>{const o=t=>t.renderRoot?.querySelector(e)??null;if(r){const{get:e,set:r}="object"==typeof s?n:i??(()=>{const t=Symbol();return {get(){return this[t]},set(e){this[t]=e;}}})();return e$e(n,s,{get(){let t=e.call(this);return void 0===t&&(t=o(this),(null!==t||this.hasUpdated)&&r.call(this,t)),t}})}return e$e(n,s,{get(){return o(this)}})}}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
let e$c;function r$3(r){return (n,o)=>e$e(n,o,{get(){return (this.renderRoot??(e$c??=document.createDocumentFragment())).querySelectorAll(r)}})}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function o$j(o){return (e,n)=>{const{slot:r,selector:s}=o??{},c="slot"+(r?`[name=${r}]`:":not([name])");return e$e(e,n,{get(){const t=this.renderRoot?.querySelector(c),e=t?.assignedElements(o)??[];return void 0===s?e:e.filter((t=>t.matches(s)))}})}}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function n$i(n){return (o,r)=>{const{slot:e}=n??{},s="slot"+(e?`[name=${e}]`:":not([name])");return e$e(o,r,{get(){const t=this.renderRoot?.querySelector(s);return t?.assignedNodes(n)??[]}})}}

const appliedClassMixins = new WeakMap();

/** Vefify if the Mixin was previously applyed
 * @private
 * @param {function} mixin      Mixin being applyed
 * @param {object} superClass   Class receiving the new mixin
 * @returns {boolean}
 */
function wasMixinPreviouslyApplied(mixin, superClass) {
  let klass = superClass;
  while (klass) {
    if (appliedClassMixins.get(klass) === mixin) {
      return true;
    }
    klass = Object.getPrototypeOf(klass);
  }
  return false;
}

/** Apply each mixin in the chain to make sure they are not applied more than once to the final class.
 * @export
 * @param {function} mixin      Mixin to be applyed
 * @returns {object}            Mixed class with mixin applied
 */
function dedupeMixin(mixin) {
  return superClass => {
    if (wasMixinPreviouslyApplied(mixin, superClass)) {
      return superClass;
    }
    const mixedClass = mixin(superClass);
    appliedClassMixins.set(mixedClass, mixin);
    return mixedClass;
  };
}

/**
 * @typedef {import('./types.js').ScopedElementsHost} ScopedElementsHost
 * @typedef {import('./types.js').ScopedElementsMap} ScopedElementsMap
 */

const version = '3.0.0';
const versions = window.scopedElementsVersions || (window.scopedElementsVersions = []);
if (!versions.includes(version)) {
  versions.push(version);
}

/**
 * @template {import('./types.js').Constructor<HTMLElement>} T
 * @param {T} superclass
 * @return {T & import('./types.js').Constructor<ScopedElementsHost>}
 */
const ScopedElementsMixinImplementation$1 = superclass =>
  /** @type {ScopedElementsHost} */
  class ScopedElementsHost extends superclass {
    /**
     * Obtains the scoped elements definitions map if specified.
     *
     * @type {ScopedElementsMap=}
     */
    static scopedElements;

    static get scopedElementsVersion() {
      return version;
    }

    /** @type {CustomElementRegistry=} */
    static __registry;

    /**
     * Obtains the CustomElementRegistry associated to the ShadowRoot.
     *
     * @returns {CustomElementRegistry=}
     */
    get registry() {
      return /** @type {typeof ScopedElementsHost} */ (this.constructor).__registry;
    }

    /**
     * Set the CustomElementRegistry associated to the ShadowRoot
     *
     * @param {CustomElementRegistry} registry
     */
    set registry(registry) {
      /** @type {typeof ScopedElementsHost} */ (this.constructor).__registry = registry;
    }

    /**
     * @param {ShadowRootInit} options
     * @returns {ShadowRoot}
     */
    attachShadow(options) {
      const { scopedElements } = /** @type {typeof ScopedElementsHost} */ (this.constructor);

      const shouldCreateRegistry =
        !this.registry ||
        // @ts-ignore
        (this.registry === this.constructor.__registry &&
          !Object.prototype.hasOwnProperty.call(this.constructor, '__registry'));

      /**
       * Create a new registry if:
       * - the registry is not defined
       * - this class doesn't have its own registry *AND* has no shared registry
       * This is important specifically for superclasses/inheritance
       */
      if (shouldCreateRegistry) {
        this.registry = new CustomElementRegistry();
        for (const [tagName, klass] of Object.entries(scopedElements ?? {})) {
          this.registry.define(tagName, klass);
        }
      }

      return super.attachShadow({
        ...options,
        // The polyfill currently expects the registry to be passed as `customElements`
        customElements: this.registry,
        // But the proposal has moved forward, and renamed it to `registry`
        // For backwards compatibility, we pass it as both
        registry: this.registry,
      });
    }
  };

const ScopedElementsMixin$1 = dedupeMixin(ScopedElementsMixinImplementation$1);

/**
 * @typedef {import('./types.js').ScopedElementsHost} ScopedElementsHost
 * @typedef {import('./types.js').ScopedElementsMap} ScopedElementsMap
 * @typedef {import('lit').CSSResultOrNative} CSSResultOrNative
 * @typedef {import('lit').LitElement} LitElement
 * @typedef {typeof import('lit').LitElement} TypeofLitElement
 * @typedef {import('@open-wc/dedupe-mixin').Constructor<LitElement>} LitElementConstructor
 * @typedef {import('@open-wc/dedupe-mixin').Constructor<ScopedElementsHost>} ScopedElementsHostConstructor
 */

/**
 * @template {LitElementConstructor} T
 * @param {T} superclass
 * @return {T & ScopedElementsHostConstructor}
 */
const ScopedElementsMixinImplementation = superclass =>
  /** @type {ScopedElementsHost} */
  class ScopedElementsHost extends ScopedElementsMixin$1(superclass) {
    createRenderRoot() {
      const { shadowRootOptions, elementStyles } = /** @type {TypeofLitElement} */ (
        this.constructor
      );

      const shadowRoot = this.attachShadow(shadowRootOptions);
      // @ts-ignore
      this.renderOptions.creationScope = shadowRoot;

      S$3(shadowRoot, elementStyles);

      this.renderOptions.renderBefore ??= shadowRoot.firstChild;

      return shadowRoot;
    }
  };

const ScopedElementsMixin = dedupeMixin(ScopedElementsMixinImplementation);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const e$b=e=>n=>"function"==typeof n?((e,n)=>(customElements.define(e,n),n))(e,n):((e,n)=>{const{kind:t,elements:s}=n;return {kind:t,elements:s,finisher(n){customElements.define(e,n);}}})(e,n);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const i$8=(i,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(n){n.createProperty(e.key,i);}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this));},finisher(n){n.createProperty(e.key,i);}},e$a=(i,e,n)=>{e.constructor.createProperty(n,i);};function n$h(n){return (t,o)=>void 0!==o?e$a(n,t,o):i$8(n,t)}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function t$4(t){return n$h({...t,state:!0})}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const o$i=({finisher:e,descriptor:t})=>(o,n)=>{var r;if(void 0===n){const n=null!==(r=o.originalKey)&&void 0!==r?r:o.key,i=null!=t?{kind:"method",placement:"prototype",key:n,descriptor:t(o.key)}:{...o,key:n};return null!=e&&(i.finisher=function(t){e(t,n);}),i}{const r=o.constructor;void 0!==t&&Object.defineProperty(o,n,t(n)),null==e||e(r,n);}};

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function e$9(e){return o$i({finisher:(r,t)=>{Object.assign(r.prototype[t],e);}})}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function i$7(i,n){return o$i({descriptor:o=>{const t={get(){var o,n;return null!==(n=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(i))&&void 0!==n?n:null},enumerable:!0,configurable:!0};if(n){const n="symbol"==typeof o?Symbol():"__"+o;t.get=function(){var o,t;return void 0===this[n]&&(this[n]=null!==(t=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(i))&&void 0!==t?t:null),this[n]};}return t}})}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function e$8(e){return o$i({descriptor:r=>({async get(){var r;return await this.updateComplete,null===(r=this.renderRoot)||void 0===r?void 0:r.querySelector(e)},enumerable:!0,configurable:!0})})}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var n$g;const e$7=null!=(null===(n$g=window.HTMLSlotElement)||void 0===n$g?void 0:n$g.prototype.assignedElements)?(o,n)=>o.assignedElements(n):(o,n)=>o.assignedNodes(n).filter((o=>o.nodeType===Node.ELEMENT_NODE));function l$g(n){const{slot:l,selector:t}=null!=n?n:{};return o$i({descriptor:o=>({get(){var o;const r="slot"+(l?`[name=${l}]`:":not([name])"),i=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(r),s=null!=i?e$7(i,n):[];return t?s.filter((o=>o.matches(t))):s},enumerable:!0,configurable:!0})})}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function o$h(o,n,r){let l,s=o;return "object"==typeof o?(s=o.slot,l=o):l={flatten:n},r?l$g({slot:s,flatten:n,selector:r}):o$i({descriptor:e=>({get(){var e,t;const o="slot"+(s?`[name=${s}]`:":not([name])"),n=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(o);return null!==(t=null==n?void 0:n.assignedNodes(l))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$3=window,e$6=t$3.ShadowRoot&&(void 0===t$3.ShadyCSS||t$3.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s$d=Symbol(),n$f=new WeakMap;class o$g{constructor(t,e,n){if(this._$cssResult$=!0,n!==s$d)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e;}get styleSheet(){let t=this.o;const s=this.t;if(e$6&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=n$f.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&n$f.set(s,t));}return t}toString(){return this.cssText}}const r$2=t=>new o$g("string"==typeof t?t:t+"",void 0,s$d),i$6=(t,...e)=>{const n=1===t.length?t[0]:e.reduce(((e,s,n)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(s)+t[n+1]),t[0]);return new o$g(n,t,s$d)},S$1=(s,n)=>{e$6?s.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((e=>{const n=document.createElement("style"),o=t$3.litNonce;void 0!==o&&n.setAttribute("nonce",o),n.textContent=e.cssText,s.appendChild(n);}));},c$1=e$6?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return r$2(e)})(t):t;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var s$c;const e$5=window,r$1=e$5.trustedTypes,h$1=r$1?r$1.emptyScript:"",o$f=e$5.reactiveElementPolyfillSupport,n$e={toAttribute(t,i){switch(i){case Boolean:t=t?h$1:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t);}return t},fromAttribute(t,i){let s=t;switch(i){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t);}catch(t){s=null;}}return s}},a$3=(t,i)=>i!==t&&(i==i||t==t),l$f={attribute:!0,type:String,converter:n$e,reflect:!1,hasChanged:a$3},d$1="finalized";class u$3 extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this._$Eu();}static addInitializer(t){var i;this.finalize(),(null!==(i=this.h)&&void 0!==i?i:this.h=[]).push(t);}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((i,s)=>{const e=this._$Ep(s,i);void 0!==e&&(this._$Ev.set(e,s),t.push(e));})),t}static createProperty(t,i=l$f){if(i.state&&(i.attribute=!1),this.finalize(),this.elementProperties.set(t,i),!i.noAccessor&&!this.prototype.hasOwnProperty(t)){const s="symbol"==typeof t?Symbol():"__"+t,e=this.getPropertyDescriptor(t,s,i);void 0!==e&&Object.defineProperty(this.prototype,t,e);}}static getPropertyDescriptor(t,i,s){return {get(){return this[i]},set(e){const r=this[t];this[i]=e,this.requestUpdate(t,r,s);},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||l$f}static finalize(){if(this.hasOwnProperty(d$1))return !1;this[d$1]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,i=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of i)this.createProperty(s,t[s]);}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(i){const s=[];if(Array.isArray(i)){const e=new Set(i.flat(1/0).reverse());for(const i of e)s.unshift(c$1(i));}else void 0!==i&&s.push(c$1(i));return s}static _$Ep(t,i){const s=i.attribute;return !1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}_$Eu(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)));}addController(t){var i,s;(null!==(i=this._$ES)&&void 0!==i?i:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t));}removeController(t){var i;null===(i=this._$ES)||void 0===i||i.splice(this._$ES.indexOf(t)>>>0,1);}_$Eg(){this.constructor.elementProperties.forEach(((t,i)=>{this.hasOwnProperty(i)&&(this._$Ei.set(i,this[i]),delete this[i]);}));}createRenderRoot(){var t;const s=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return S$1(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostConnected)||void 0===i?void 0:i.call(t)}));}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostDisconnected)||void 0===i?void 0:i.call(t)}));}attributeChangedCallback(t,i,s){this._$AK(t,s);}_$EO(t,i,s=l$f){var e;const r=this.constructor._$Ep(t,s);if(void 0!==r&&!0===s.reflect){const h=(void 0!==(null===(e=s.converter)||void 0===e?void 0:e.toAttribute)?s.converter:n$e).toAttribute(i,s.type);this._$El=t,null==h?this.removeAttribute(r):this.setAttribute(r,h),this._$El=null;}}_$AK(t,i){var s;const e=this.constructor,r=e._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=e.getPropertyOptions(r),h="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(s=t.converter)||void 0===s?void 0:s.fromAttribute)?t.converter:n$e;this._$El=r,this[r]=h.fromAttribute(i,t.type),this._$El=null;}}requestUpdate(t,i,s){let e=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||a$3)(this[t],i)?(this._$AL.has(t)||this._$AL.set(t,i),!0===s.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):e=!1),!this.isUpdatePending&&e&&(this._$E_=this._$Ej());}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_;}catch(t){Promise.reject(t);}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,i)=>this[i]=t)),this._$Ei=void 0);let i=!1;const s=this._$AL;try{i=this.shouldUpdate(s),i?(this.willUpdate(s),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostUpdate)||void 0===i?void 0:i.call(t)})),this.update(s)):this._$Ek();}catch(t){throw i=!1,this._$Ek(),t}i&&this._$AE(s);}willUpdate(t){}_$AE(t){var i;null===(i=this._$ES)||void 0===i||i.forEach((t=>{var i;return null===(i=t.hostUpdated)||void 0===i?void 0:i.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t);}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1;}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return !0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,i)=>this._$EO(i,this[i],t))),this._$EC=void 0),this._$Ek();}updated(t){}firstUpdated(t){}}u$3[d$1]=!0,u$3.elementProperties=new Map,u$3.elementStyles=[],u$3.shadowRootOptions={mode:"open"},null==o$f||o$f({ReactiveElement:u$3}),(null!==(s$c=e$5.reactiveElementVersions)&&void 0!==s$c?s$c:e$5.reactiveElementVersions=[]).push("1.6.3");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var t$2;const i$5=window,s$b=i$5.trustedTypes,e$4=s$b?s$b.createPolicy("lit-html",{createHTML:t=>t}):void 0,o$e="$lit$",n$d=`lit$${(Math.random()+"").slice(9)}$`,l$e="?"+n$d,h=`<${l$e}>`,r=document,u$2=()=>r.createComment(""),d=t=>null===t||"object"!=typeof t&&"function"!=typeof t,c=Array.isArray,v=t=>c(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]),a$2="[ \t\n\f\r]",f$1=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,_=/-->/g,m$1=/>/g,p=RegExp(`>|${a$2}(?:([^\\s"'>=/]+)(${a$2}*=${a$2}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),g=/'/g,$=/"/g,y=/^(?:script|style|textarea|title)$/i,w=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=w(1),T=Symbol.for("lit-noChange"),A=Symbol.for("lit-nothing"),E=new WeakMap,C=r.createTreeWalker(r,129,null,!1);function P(t,i){if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==e$4?e$4.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,e=[];let l,r=2===i?"<svg>":"",u=f$1;for(let i=0;i<s;i++){const s=t[i];let d,c,v=-1,a=0;for(;a<s.length&&(u.lastIndex=a,c=u.exec(s),null!==c);)a=u.lastIndex,u===f$1?"!--"===c[1]?u=_:void 0!==c[1]?u=m$1:void 0!==c[2]?(y.test(c[2])&&(l=RegExp("</"+c[2],"g")),u=p):void 0!==c[3]&&(u=p):u===p?">"===c[0]?(u=null!=l?l:f$1,v=-1):void 0===c[1]?v=-2:(v=u.lastIndex-c[2].length,d=c[1],u=void 0===c[3]?p:'"'===c[3]?$:g):u===$||u===g?u=p:u===_||u===m$1?u=f$1:(u=p,l=void 0);const w=u===p&&t[i+1].startsWith("/>")?" ":"";r+=u===f$1?s+h:v>=0?(e.push(d),s.slice(0,v)+o$e+s.slice(v)+n$d+w):s+n$d+(-2===v?(e.push(void 0),i):w);}return [P(t,r+(t[s]||"<?>")+(2===i?"</svg>":"")),e]};class N{constructor({strings:t,_$litType$:i},e){let h;this.parts=[];let r=0,d=0;const c=t.length-1,v=this.parts,[a,f]=V(t,i);if(this.el=N.createElement(a,e),C.currentNode=this.el.content,2===i){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes);}for(;null!==(h=C.nextNode())&&v.length<c;){if(1===h.nodeType){if(h.hasAttributes()){const t=[];for(const i of h.getAttributeNames())if(i.endsWith(o$e)||i.startsWith(n$d)){const s=f[d++];if(t.push(i),void 0!==s){const t=h.getAttribute(s.toLowerCase()+o$e).split(n$d),i=/([.?@])?(.*)/.exec(s);v.push({type:1,index:r,name:i[2],strings:t,ctor:"."===i[1]?H:"?"===i[1]?L:"@"===i[1]?z:k});}else v.push({type:6,index:r});}for(const i of t)h.removeAttribute(i);}if(y.test(h.tagName)){const t=h.textContent.split(n$d),i=t.length-1;if(i>0){h.textContent=s$b?s$b.emptyScript:"";for(let s=0;s<i;s++)h.append(t[s],u$2()),C.nextNode(),v.push({type:2,index:++r});h.append(t[i],u$2());}}}else if(8===h.nodeType)if(h.data===l$e)v.push({type:2,index:r});else {let t=-1;for(;-1!==(t=h.data.indexOf(n$d,t+1));)v.push({type:7,index:r}),t+=n$d.length-1;}r++;}}static createElement(t,i){const s=r.createElement("template");return s.innerHTML=t,s}}function S(t,i,s=t,e){var o,n,l,h;if(i===T)return i;let r=void 0!==e?null===(o=s._$Co)||void 0===o?void 0:o[e]:s._$Cl;const u=d(i)?void 0:i._$litDirective$;return (null==r?void 0:r.constructor)!==u&&(null===(n=null==r?void 0:r._$AO)||void 0===n||n.call(r,!1),void 0===u?r=void 0:(r=new u(t),r._$AT(t,s,e)),void 0!==e?(null!==(l=(h=s)._$Co)&&void 0!==l?l:h._$Co=[])[e]=r:s._$Cl=r),void 0!==r&&(i=S(t,r._$AS(t,i.values),r,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i;}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var i;const{el:{content:s},parts:e}=this._$AD,o=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:r).importNode(s,!0);C.currentNode=o;let n=C.nextNode(),l=0,h=0,u=e[0];for(;void 0!==u;){if(l===u.index){let i;2===u.type?i=new R(n,n.nextSibling,this,t):1===u.type?i=new u.ctor(n,u.name,u.strings,this,t):6===u.type&&(i=new Z(n,this,t)),this._$AV.push(i),u=e[++h];}l!==(null==u?void 0:u.index)&&(n=C.nextNode(),l++);}return C.currentNode=r,o}v(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++;}}class R{constructor(t,i,s,e){var o;this.type=2,this._$AH=A,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cp=null===(o=null==e?void 0:e.isConnected)||void 0===o||o;}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===(null==t?void 0:t.nodeType)&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),d(t)?t===A||null==t||""===t?(this._$AH!==A&&this._$AR(),this._$AH=A):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):v(t)?this.T(t):this._(t);}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t));}_(t){this._$AH!==A&&d(this._$AH)?this._$AA.nextSibling.data=t:this.$(r.createTextNode(t)),this._$AH=t;}g(t){var i;const{values:s,_$litType$:e}=t,o="number"==typeof e?this._$AC(t):(void 0===e.el&&(e.el=N.createElement(P(e.h,e.h[0]),this.options)),e);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===o)this._$AH.v(s);else {const t=new M(o,this),i=t.u(this.options);t.v(s),this.$(i),this._$AH=t;}}_$AC(t){let i=E.get(t.strings);return void 0===i&&E.set(t.strings,i=new N(t)),i}T(t){c(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const o of t)e===i.length?i.push(s=new R(this.k(u$2()),this.k(u$2()),this,this.options)):s=i[e],s._$AI(o),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e);}_$AR(t=this._$AA.nextSibling,i){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i;}}setConnected(t){var i;void 0===this._$AM&&(this._$Cp=t,null===(i=this._$AP)||void 0===i||i.call(this,t));}}class k{constructor(t,i,s,e,o){this.type=1,this._$AH=A,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=o,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=A;}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,s,e){const o=this.strings;let n=!1;if(void 0===o)t=S(this,t,i,0),n=!d(t)||t!==this._$AH&&t!==T,n&&(this._$AH=t);else {const e=t;let l,h;for(t=o[0],l=0;l<o.length-1;l++)h=S(this,e[s+l],i,l),h===T&&(h=this._$AH[l]),n||(n=!d(h)||h!==this._$AH[l]),h===A?t=A:t!==A&&(t+=(null!=h?h:"")+o[l+1]),this._$AH[l]=h;}n&&!e&&this.j(t);}j(t){t===A?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"");}}class H extends k{constructor(){super(...arguments),this.type=3;}j(t){this.element[this.name]=t===A?void 0:t;}}const I=s$b?s$b.emptyScript:"";class L extends k{constructor(){super(...arguments),this.type=4;}j(t){t&&t!==A?this.element.setAttribute(this.name,I):this.element.removeAttribute(this.name);}}class z extends k{constructor(t,i,s,e,o){super(t,i,s,e,o),this.type=5;}_$AI(t,i=this){var s;if((t=null!==(s=S(this,t,i,0))&&void 0!==s?s:A)===T)return;const e=this._$AH,o=t===A&&e!==A||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,n=t!==A&&(e===A||o);o&&this.element.removeEventListener(this.name,this,e),n&&this.element.addEventListener(this.name,this,t),this._$AH=t;}handleEvent(t){var i,s;"function"==typeof this._$AH?this._$AH.call(null!==(s=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t);}}class Z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s;}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t);}}const B=i$5.litHtmlPolyfillSupport;null==B||B(N,R),(null!==(t$2=i$5.litHtmlVersions)&&void 0!==t$2?t$2:i$5.litHtmlVersions=[]).push("2.8.0");const D=(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new R(i.insertBefore(u$2(),t),t,void 0,null!=s?s:{});}return l._$AI(t),l};

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$d,o$d;class s$a extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$a.finalized=!0,s$a._$litElement$=!0,null===(l$d=globalThis.litElementHydrateSupport)||void 0===l$d||l$d.call(globalThis,{LitElement:s$a});const n$c=globalThis.litElementPolyfillSupport;null==n$c||n$c({LitElement:s$a});(null!==(o$d=globalThis.litElementVersions)&&void 0!==o$d?o$d:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$p = i$6 `:host{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}`;

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
let Icon$1 = class Icon extends s$a {
    /** @soyTemplate */
    render() {
        return x `<span><slot></slot></span>`;
    }
};
Icon$1.styles = [styles$p];
Icon$1 = __decorate([
    e$b('mwc-icon')
], Icon$1);

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function matches(element, selector) {
    var nativeMatches = element.matches
        || element.webkitMatchesSelector
        || element.msMatchesSelector;
    return nativeMatches.call(element, selector);
}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$c,o$c;class s$9 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$9.finalized=!0,s$9._$litElement$=!0,null===(l$c=globalThis.litElementHydrateSupport)||void 0===l$c||l$c.call(globalThis,{LitElement:s$9});const n$b=globalThis.litElementPolyfillSupport;null==n$b||n$b({LitElement:s$9});(null!==(o$c=globalThis.litElementVersions)&&void 0!==o$c?o$c:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Style preference for leading underscores.
// tslint:disable:strip-private-property-underscore
/**
 * Determines whether a node is an element.
 *
 * @param node Node to check
 */
const isNodeElement = (node) => {
    return node.nodeType === Node.ELEMENT_NODE;
};
function addHasRemoveClass(element) {
    return {
        addClass: (className) => {
            element.classList.add(className);
        },
        removeClass: (className) => {
            element.classList.remove(className);
        },
        hasClass: (className) => element.classList.contains(className),
    };
}
const fn = () => { };
const optionsBlock = {
    get passive() {
        return false;
    }
};
document.addEventListener('x', fn, optionsBlock);
document.removeEventListener('x', fn);
const deepActiveElementPath = (doc = window.document) => {
    let activeElement = doc.activeElement;
    const path = [];
    if (!activeElement) {
        return path;
    }
    while (activeElement) {
        path.push(activeElement);
        if (activeElement.shadowRoot) {
            activeElement = activeElement.shadowRoot.activeElement;
        }
        else {
            break;
        }
    }
    return path;
};
const doesElementContainFocus = (element) => {
    const activePath = deepActiveElementPath();
    if (!activePath.length) {
        return false;
    }
    const deepActiveElement = activePath[activePath.length - 1];
    const focusEv = new Event('check-if-focused', { bubbles: true, composed: true });
    let composedPath = [];
    const listener = (ev) => {
        composedPath = ev.composedPath();
    };
    document.body.addEventListener('check-if-focused', listener);
    deepActiveElement.dispatchEvent(focusEv);
    document.body.removeEventListener('check-if-focused', listener);
    return composedPath.indexOf(element) !== -1;
};

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
class BaseElement extends s$9 {
    click() {
        if (this.mdcRoot) {
            this.mdcRoot.focus();
            this.mdcRoot.click();
            return;
        }
        super.click();
    }
    /**
     * Create and attach the MDC Foundation to the instance
     */
    createFoundation() {
        if (this.mdcFoundation !== undefined) {
            this.mdcFoundation.destroy();
        }
        if (this.mdcFoundationClass) {
            this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter());
            this.mdcFoundation.init();
        }
    }
    firstUpdated() {
        this.createFoundation();
    }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCFoundation = /** @class */ (function () {
    function MDCFoundation(adapter) {
        if (adapter === void 0) { adapter = {}; }
        this.adapter = adapter;
    }
    Object.defineProperty(MDCFoundation, "cssClasses", {
        get: function () {
            // Classes extending MDCFoundation should implement this method to return an object which exports every
            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "strings", {
        get: function () {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "numbers", {
        get: function () {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "defaultAdapter", {
        get: function () {
            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
            // validation.
            return {};
        },
        enumerable: false,
        configurable: true
    });
    MDCFoundation.prototype.init = function () {
        // Subclasses should override this method to perform initialization routines (registering events, etc.)
    };
    MDCFoundation.prototype.destroy = function () {
        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    };
    return MDCFoundation;
}());

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses$5 = {
    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
    // given that it's an 'upgrade' to an existing component. That being said it is the root
    // CSS class that all other CSS classes derive from.
    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
    ROOT: 'mdc-ripple-upgraded',
    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
};
var strings$3 = {
    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
    VAR_FG_SIZE: '--mdc-ripple-fg-size',
    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
    VAR_LEFT: '--mdc-ripple-left',
    VAR_TOP: '--mdc-ripple-top',
};
var numbers$3 = {
    DEACTIVATION_TIMEOUT_MS: 225,
    FG_DEACTIVATION_MS: 150,
    INITIAL_ORIGIN_SCALE: 0.6,
    PADDING: 10,
    TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices
};

/**
 * Stores result from supportsCssVariables to avoid redundant processing to
 * detect CSS custom variable support.
 */
function getNormalizedEventCoords(evt, pageOffset, clientRect) {
    if (!evt) {
        return { x: 0, y: 0 };
    }
    var x = pageOffset.x, y = pageOffset.y;
    var documentX = x + clientRect.left;
    var documentY = y + clientRect.top;
    var normalizedX;
    var normalizedY;
    // Determine touch point relative to the ripple container.
    if (evt.type === 'touchstart') {
        var touchEvent = evt;
        normalizedX = touchEvent.changedTouches[0].pageX - documentX;
        normalizedY = touchEvent.changedTouches[0].pageY - documentY;
    }
    else {
        var mouseEvent = evt;
        normalizedX = mouseEvent.pageX - documentX;
        normalizedY = mouseEvent.pageY - documentY;
    }
    return { x: normalizedX, y: normalizedY };
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
// Activation events registered on the root element of each instance for activation
var ACTIVATION_EVENT_TYPES = [
    'touchstart', 'pointerdown', 'mousedown', 'keydown',
];
// Deactivation events registered on documentElement when a pointer-related down event occurs
var POINTER_DEACTIVATION_EVENT_TYPES = [
    'touchend', 'pointerup', 'mouseup', 'contextmenu',
];
// simultaneous nested activations
var activatedTargets = [];
var MDCRippleFoundation = /** @class */ (function (_super) {
    __extends(MDCRippleFoundation, _super);
    function MDCRippleFoundation(adapter) {
        var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;
        _this.activationAnimationHasEnded = false;
        _this.activationTimer = 0;
        _this.fgDeactivationRemovalTimer = 0;
        _this.fgScale = '0';
        _this.frame = { width: 0, height: 0 };
        _this.initialSize = 0;
        _this.layoutFrame = 0;
        _this.maxRadius = 0;
        _this.unboundedCoords = { left: 0, top: 0 };
        _this.activationState = _this.defaultActivationState();
        _this.activationTimerCallback = function () {
            _this.activationAnimationHasEnded = true;
            _this.runDeactivationUXLogicIfReady();
        };
        _this.activateHandler = function (e) {
            _this.activateImpl(e);
        };
        _this.deactivateHandler = function () {
            _this.deactivateImpl();
        };
        _this.focusHandler = function () {
            _this.handleFocus();
        };
        _this.blurHandler = function () {
            _this.handleBlur();
        };
        _this.resizeHandler = function () {
            _this.layout();
        };
        return _this;
    }
    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
        get: function () {
            return cssClasses$5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "strings", {
        get: function () {
            return strings$3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "numbers", {
        get: function () {
            return numbers$3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
        get: function () {
            return {
                addClass: function () { return undefined; },
                browserSupportsCssVars: function () { return true; },
                computeBoundingRect: function () {
                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
                },
                containsEventTarget: function () { return true; },
                deregisterDocumentInteractionHandler: function () { return undefined; },
                deregisterInteractionHandler: function () { return undefined; },
                deregisterResizeHandler: function () { return undefined; },
                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },
                isSurfaceActive: function () { return true; },
                isSurfaceDisabled: function () { return true; },
                isUnbounded: function () { return true; },
                registerDocumentInteractionHandler: function () { return undefined; },
                registerInteractionHandler: function () { return undefined; },
                registerResizeHandler: function () { return undefined; },
                removeClass: function () { return undefined; },
                updateCssVariable: function () { return undefined; },
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCRippleFoundation.prototype.init = function () {
        var _this = this;
        var supportsPressRipple = this.supportsPressRipple();
        this.registerRootHandlers(supportsPressRipple);
        if (supportsPressRipple) {
            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter.addClass(ROOT_1);
                if (_this.adapter.isUnbounded()) {
                    _this.adapter.addClass(UNBOUNDED_1);
                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                    _this.layoutInternal();
                }
            });
        }
    };
    MDCRippleFoundation.prototype.destroy = function () {
        var _this = this;
        if (this.supportsPressRipple()) {
            if (this.activationTimer) {
                clearTimeout(this.activationTimer);
                this.activationTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
            }
            if (this.fgDeactivationRemovalTimer) {
                clearTimeout(this.fgDeactivationRemovalTimer);
                this.fgDeactivationRemovalTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
            }
            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter.removeClass(ROOT_2);
                _this.adapter.removeClass(UNBOUNDED_2);
                _this.removeCssVars();
            });
        }
        this.deregisterRootHandlers();
        this.deregisterDeactivationHandlers();
    };
    /**
     * @param evt Optional event containing position information.
     */
    MDCRippleFoundation.prototype.activate = function (evt) {
        this.activateImpl(evt);
    };
    MDCRippleFoundation.prototype.deactivate = function () {
        this.deactivateImpl();
    };
    MDCRippleFoundation.prototype.layout = function () {
        var _this = this;
        if (this.layoutFrame) {
            cancelAnimationFrame(this.layoutFrame);
        }
        this.layoutFrame = requestAnimationFrame(function () {
            _this.layoutInternal();
            _this.layoutFrame = 0;
        });
    };
    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
        if (unbounded) {
            this.adapter.addClass(UNBOUNDED);
        }
        else {
            this.adapter.removeClass(UNBOUNDED);
        }
    };
    MDCRippleFoundation.prototype.handleFocus = function () {
        var _this = this;
        requestAnimationFrame(function () { return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
    };
    MDCRippleFoundation.prototype.handleBlur = function () {
        var _this = this;
        requestAnimationFrame(function () { return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
    };
    /**
     * We compute this property so that we are not querying information about the client
     * until the point in time where the foundation requests it. This prevents scenarios where
     * client-side feature-detection may happen too early, such as when components are rendered on the server
     * and then initialized at mount time on the client.
     */
    MDCRippleFoundation.prototype.supportsPressRipple = function () {
        return this.adapter.browserSupportsCssVars();
    };
    MDCRippleFoundation.prototype.defaultActivationState = function () {
        return {
            activationEvent: undefined,
            hasDeactivationUXRun: false,
            isActivated: false,
            isProgrammatic: false,
            wasActivatedByPointer: false,
            wasElementMadeActive: false,
        };
    };
    /**
     * supportsPressRipple Passed from init to save a redundant function call
     */
    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {
        var e_1, _a;
        if (supportsPressRipple) {
            try {
                for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.adapter.isUnbounded()) {
                this.adapter.registerResizeHandler(this.resizeHandler);
            }
        }
        this.adapter.registerInteractionHandler('focus', this.focusHandler);
        this.adapter.registerInteractionHandler('blur', this.blurHandler);
    };
    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {
        var e_2, _a;
        if (evt.type === 'keydown') {
            this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);
        }
        else {
            try {
                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {
        var e_3, _a;
        try {
            for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);
        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);
        if (this.adapter.isUnbounded()) {
            this.adapter.deregisterResizeHandler(this.resizeHandler);
        }
    };
    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {
        var e_4, _a;
        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);
        try {
            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    MDCRippleFoundation.prototype.removeCssVars = function () {
        var _this = this;
        var rippleStrings = MDCRippleFoundation.strings;
        var keys = Object.keys(rippleStrings);
        keys.forEach(function (key) {
            if (key.indexOf('VAR_') === 0) {
                _this.adapter.updateCssVariable(rippleStrings[key], null);
            }
        });
    };
    MDCRippleFoundation.prototype.activateImpl = function (evt) {
        var _this = this;
        if (this.adapter.isSurfaceDisabled()) {
            return;
        }
        var activationState = this.activationState;
        if (activationState.isActivated) {
            return;
        }
        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
        var previousActivationEvent = this.previousActivationEvent;
        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
        if (isSameInteraction) {
            return;
        }
        activationState.isActivated = true;
        activationState.isProgrammatic = evt === undefined;
        activationState.activationEvent = evt;
        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
        var hasActivatedChild = evt !== undefined &&
            activatedTargets.length > 0 &&
            activatedTargets.some(function (target) { return _this.adapter.containsEventTarget(target); });
        if (hasActivatedChild) {
            // Immediately reset activation state, while preserving logic that prevents touch follow-on events
            this.resetActivationState();
            return;
        }
        if (evt !== undefined) {
            activatedTargets.push(evt.target);
            this.registerDeactivationHandlers(evt);
        }
        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
        if (activationState.wasElementMadeActive) {
            this.animateActivation();
        }
        requestAnimationFrame(function () {
            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
            activatedTargets = [];
            if (!activationState.wasElementMadeActive
                && evt !== undefined
                && (evt.key === ' ' || evt.keyCode === 32)) {
                // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                // active states inconsistently when they're called within event handling code:
                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                // variable is set within a rAF callback for a submit button interaction (#2241).
                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
                if (activationState.wasElementMadeActive) {
                    _this.animateActivation();
                }
            }
            if (!activationState.wasElementMadeActive) {
                // Reset activation state immediately if element was not made active.
                _this.activationState = _this.defaultActivationState();
            }
        });
    };
    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {
        return (evt !== undefined && evt.type === 'keydown') ?
            this.adapter.isSurfaceActive() :
            true;
    };
    MDCRippleFoundation.prototype.animateActivation = function () {
        var _this = this;
        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
        this.layoutInternal();
        var translateStart = '';
        var translateEnd = '';
        if (!this.adapter.isUnbounded()) {
            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;
            translateStart = startPoint.x + "px, " + startPoint.y + "px";
            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
        }
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
        // Cancel any ongoing activation/deactivation animations
        clearTimeout(this.activationTimer);
        clearTimeout(this.fgDeactivationRemovalTimer);
        this.rmBoundedActivationClasses();
        this.adapter.removeClass(FG_DEACTIVATION);
        // Force layout in order to re-trigger the animation.
        this.adapter.computeBoundingRect();
        this.adapter.addClass(FG_ACTIVATION);
        this.activationTimer = setTimeout(function () {
            _this.activationTimerCallback();
        }, DEACTIVATION_TIMEOUT_MS);
    };
    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {
        var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
        var startPoint;
        if (wasActivatedByPointer) {
            startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
        }
        else {
            startPoint = {
                x: this.frame.width / 2,
                y: this.frame.height / 2,
            };
        }
        // Center the element around the start point.
        startPoint = {
            x: startPoint.x - (this.initialSize / 2),
            y: startPoint.y - (this.initialSize / 2),
        };
        var endPoint = {
            x: (this.frame.width / 2) - (this.initialSize / 2),
            y: (this.frame.height / 2) - (this.initialSize / 2),
        };
        return { startPoint: startPoint, endPoint: endPoint };
    };
    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {
        var _this = this;
        // This method is called both when a pointing device is released, and when the activation animation ends.
        // The deactivation animation should only run after both of those occur.
        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
        var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
        var activationHasEnded = hasDeactivationUXRun || !isActivated;
        if (activationHasEnded && this.activationAnimationHasEnded) {
            this.rmBoundedActivationClasses();
            this.adapter.addClass(FG_DEACTIVATION);
            this.fgDeactivationRemovalTimer = setTimeout(function () {
                _this.adapter.removeClass(FG_DEACTIVATION);
            }, numbers$3.FG_DEACTIVATION_MS);
        }
    };
    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {
        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
        this.adapter.removeClass(FG_ACTIVATION);
        this.activationAnimationHasEnded = false;
        this.adapter.computeBoundingRect();
    };
    MDCRippleFoundation.prototype.resetActivationState = function () {
        var _this = this;
        this.previousActivationEvent = this.activationState.activationEvent;
        this.activationState = this.defaultActivationState();
        // Touch devices may fire additional events for the same interaction within a short time.
        // Store the previous event until it's safe to assume that subsequent events are for new interactions.
        setTimeout(function () { return _this.previousActivationEvent = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
    };
    MDCRippleFoundation.prototype.deactivateImpl = function () {
        var _this = this;
        var activationState = this.activationState;
        // This can happen in scenarios such as when you have a keyup event that blurs the element.
        if (!activationState.isActivated) {
            return;
        }
        var state = __assign({}, activationState);
        if (activationState.isProgrammatic) {
            requestAnimationFrame(function () {
                _this.animateDeactivation(state);
            });
            this.resetActivationState();
        }
        else {
            this.deregisterDeactivationHandlers();
            requestAnimationFrame(function () {
                _this.activationState.hasDeactivationUXRun = true;
                _this.animateDeactivation(state);
                _this.resetActivationState();
            });
        }
    };
    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {
        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
        if (wasActivatedByPointer || wasElementMadeActive) {
            this.runDeactivationUXLogicIfReady();
        }
    };
    MDCRippleFoundation.prototype.layoutInternal = function () {
        var _this = this;
        this.frame = this.adapter.computeBoundingRect();
        var maxDim = Math.max(this.frame.height, this.frame.width);
        // Surface diameter is treated differently for unbounded vs. bounded ripples.
        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
        // `overflow: hidden`.
        var getBoundedRadius = function () {
            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
            return hypotenuse + MDCRippleFoundation.numbers.PADDING;
        };
        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
        // Unbounded ripple size should always be even number to equally center align.
        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
            this.initialSize = initialSize - 1;
        }
        else {
            this.initialSize = initialSize;
        }
        this.fgScale = "" + this.maxRadius / this.initialSize;
        this.updateLayoutCssVars();
    };
    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {
        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
        if (this.adapter.isUnbounded()) {
            this.unboundedCoords = {
                left: Math.round((this.frame.width / 2) - (this.initialSize / 2)),
                top: Math.round((this.frame.height / 2) - (this.initialSize / 2)),
            };
            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
        }
    };
    return MDCRippleFoundation;
}(MDCFoundation));
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
var MDCRippleFoundation$1 = MDCRippleFoundation;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$b,o$b;class s$8 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$8.finalized=!0,s$8._$litElement$=!0,null===(l$b=globalThis.litElementHydrateSupport)||void 0===l$b||l$b.call(globalThis,{LitElement:s$8});const n$a=globalThis.litElementPolyfillSupport;null==n$a||n$a({LitElement:s$8});(null!==(o$b=globalThis.litElementVersions)&&void 0!==o$b?o$b:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$1={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e$3=t=>(...e)=>({_$litDirective$:t,values:e});class i$4{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i;}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const o$a=e$3(class extends i$4{constructor(t){var i;if(super(t),t.type!==t$1.ATTRIBUTE||"class"!==t.name||(null===(i=t.strings)||void 0===i?void 0:i.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(t){return " "+Object.keys(t).filter((i=>t[i])).join(" ")+" "}update(i,[s]){var r,o;if(void 0===this.it){this.it=new Set,void 0!==i.strings&&(this.nt=new Set(i.strings.join(" ").split(/\s/).filter((t=>""!==t))));for(const t in s)s[t]&&!(null===(r=this.nt)||void 0===r?void 0:r.has(t))&&this.it.add(t);return this.render(s)}const e=i.element.classList;this.it.forEach((t=>{t in s||(e.remove(t),this.it.delete(t));}));for(const t in s){const i=!!s[t];i===this.it.has(t)||(null===(o=this.nt)||void 0===o?void 0:o.has(t))||(i?(e.add(t),this.it.add(t)):(e.remove(t),this.it.delete(t)));}return T}});

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const i$3="important",n$9=" !"+i$3,o$9=e$3(class extends i$4{constructor(t){var e;if(super(t),t.type!==t$1.ATTRIBUTE||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,r)=>{const s=t[r];return null==s?e:e+`${r=r.includes("-")?r:r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(e,[r]){const{style:s}=e.element;if(void 0===this.ht){this.ht=new Set;for(const t in r)this.ht.add(t);return this.render(r)}this.ht.forEach((t=>{null==r[t]&&(this.ht.delete(t),t.includes("-")?s.removeProperty(t):s[t]="");}));for(const t in r){const e=r[t];if(null!=e){this.ht.add(t);const r="string"==typeof e&&e.endsWith(n$9);t.includes("-")||r?s.setProperty(t,r?e.slice(0,-11):e,r?i$3:""):s[t]=e;}}return T}});

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
class RippleBase extends BaseElement {
    constructor() {
        super(...arguments);
        this.primary = false;
        this.accent = false;
        this.unbounded = false;
        this.disabled = false;
        this.activated = false;
        this.selected = false;
        this.internalUseStateLayerCustomProperties = false;
        this.hovering = false;
        this.bgFocused = false;
        this.fgActivation = false;
        this.fgDeactivation = false;
        this.fgScale = '';
        this.fgSize = '';
        this.translateStart = '';
        this.translateEnd = '';
        this.leftPos = '';
        this.topPos = '';
        this.mdcFoundationClass = MDCRippleFoundation$1;
    }
    get isActive() {
        return matches(this.parentElement || this, ':active');
    }
    createAdapter() {
        return {
            browserSupportsCssVars: () => true,
            isUnbounded: () => this.unbounded,
            isSurfaceActive: () => this.isActive,
            isSurfaceDisabled: () => this.disabled,
            addClass: (className) => {
                switch (className) {
                    case 'mdc-ripple-upgraded--background-focused':
                        this.bgFocused = true;
                        break;
                    case 'mdc-ripple-upgraded--foreground-activation':
                        this.fgActivation = true;
                        break;
                    case 'mdc-ripple-upgraded--foreground-deactivation':
                        this.fgDeactivation = true;
                        break;
                }
            },
            removeClass: (className) => {
                switch (className) {
                    case 'mdc-ripple-upgraded--background-focused':
                        this.bgFocused = false;
                        break;
                    case 'mdc-ripple-upgraded--foreground-activation':
                        this.fgActivation = false;
                        break;
                    case 'mdc-ripple-upgraded--foreground-deactivation':
                        this.fgDeactivation = false;
                        break;
                }
            },
            containsEventTarget: () => true,
            registerInteractionHandler: () => undefined,
            deregisterInteractionHandler: () => undefined,
            registerDocumentInteractionHandler: () => undefined,
            deregisterDocumentInteractionHandler: () => undefined,
            registerResizeHandler: () => undefined,
            deregisterResizeHandler: () => undefined,
            updateCssVariable: (varName, value) => {
                switch (varName) {
                    case '--mdc-ripple-fg-scale':
                        this.fgScale = value;
                        break;
                    case '--mdc-ripple-fg-size':
                        this.fgSize = value;
                        break;
                    case '--mdc-ripple-fg-translate-end':
                        this.translateEnd = value;
                        break;
                    case '--mdc-ripple-fg-translate-start':
                        this.translateStart = value;
                        break;
                    case '--mdc-ripple-left':
                        this.leftPos = value;
                        break;
                    case '--mdc-ripple-top':
                        this.topPos = value;
                        break;
                }
            },
            computeBoundingRect: () => (this.parentElement || this).getBoundingClientRect(),
            getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }),
        };
    }
    startPress(ev) {
        this.waitForFoundation(() => {
            this.mdcFoundation.activate(ev);
        });
    }
    endPress() {
        this.waitForFoundation(() => {
            this.mdcFoundation.deactivate();
        });
    }
    startFocus() {
        this.waitForFoundation(() => {
            this.mdcFoundation.handleFocus();
        });
    }
    endFocus() {
        this.waitForFoundation(() => {
            this.mdcFoundation.handleBlur();
        });
    }
    startHover() {
        this.hovering = true;
    }
    endHover() {
        this.hovering = false;
    }
    /**
     * Wait for the MDCFoundation to be created by `firstUpdated`
     */
    waitForFoundation(fn) {
        if (this.mdcFoundation) {
            fn();
        }
        else {
            this.updateComplete.then(fn);
        }
    }
    update(changedProperties) {
        if (changedProperties.has('disabled')) {
            // stop hovering when ripple is disabled to prevent a stuck "hover" state
            // When re-enabled, the outer component will get a `mouseenter` event on
            // the first movement, which will call `startHover()`
            if (this.disabled) {
                this.endHover();
            }
        }
        super.update(changedProperties);
    }
    /** @soyTemplate */
    render() {
        const shouldActivateInPrimary = this.activated && (this.primary || !this.accent);
        const shouldSelectInPrimary = this.selected && (this.primary || !this.accent);
        /** @classMap */
        const classes = {
            'mdc-ripple-surface--accent': this.accent,
            'mdc-ripple-surface--primary--activated': shouldActivateInPrimary,
            'mdc-ripple-surface--accent--activated': this.accent && this.activated,
            'mdc-ripple-surface--primary--selected': shouldSelectInPrimary,
            'mdc-ripple-surface--accent--selected': this.accent && this.selected,
            'mdc-ripple-surface--disabled': this.disabled,
            'mdc-ripple-surface--hover': this.hovering,
            'mdc-ripple-surface--primary': this.primary,
            'mdc-ripple-surface--selected': this.selected,
            'mdc-ripple-upgraded--background-focused': this.bgFocused,
            'mdc-ripple-upgraded--foreground-activation': this.fgActivation,
            'mdc-ripple-upgraded--foreground-deactivation': this.fgDeactivation,
            'mdc-ripple-upgraded--unbounded': this.unbounded,
            'mdc-ripple-surface--internal-use-state-layer-custom-properties': this.internalUseStateLayerCustomProperties,
        };
        return x `
        <div class="mdc-ripple-surface mdc-ripple-upgraded ${o$a(classes)}"
          style="${o$9({
            '--mdc-ripple-fg-scale': this.fgScale,
            '--mdc-ripple-fg-size': this.fgSize,
            '--mdc-ripple-fg-translate-end': this.translateEnd,
            '--mdc-ripple-fg-translate-start': this.translateStart,
            '--mdc-ripple-left': this.leftPos,
            '--mdc-ripple-top': this.topPos,
        })}"></div>`;
    }
}
__decorate([
    i$7('.mdc-ripple-surface')
], RippleBase.prototype, "mdcRoot", void 0);
__decorate([
    n$h({ type: Boolean })
], RippleBase.prototype, "primary", void 0);
__decorate([
    n$h({ type: Boolean })
], RippleBase.prototype, "accent", void 0);
__decorate([
    n$h({ type: Boolean })
], RippleBase.prototype, "unbounded", void 0);
__decorate([
    n$h({ type: Boolean })
], RippleBase.prototype, "disabled", void 0);
__decorate([
    n$h({ type: Boolean })
], RippleBase.prototype, "activated", void 0);
__decorate([
    n$h({ type: Boolean })
], RippleBase.prototype, "selected", void 0);
__decorate([
    n$h({ type: Boolean })
], RippleBase.prototype, "internalUseStateLayerCustomProperties", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "hovering", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "bgFocused", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "fgActivation", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "fgDeactivation", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "fgScale", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "fgSize", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "translateStart", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "translateEnd", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "leftPos", void 0);
__decorate([
    t$4()
], RippleBase.prototype, "topPos", void 0);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$o = i$6 `.mdc-ripple-surface{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity;position:relative;outline:none;overflow:hidden}.mdc-ripple-surface::before,.mdc-ripple-surface::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-ripple-surface::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-ripple-surface::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-ripple-surface.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-ripple-surface.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-ripple-surface.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-ripple-surface::before,.mdc-ripple-surface::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-ripple-surface.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded],.mdc-ripple-upgraded--unbounded{overflow:visible}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]::before,.mdc-ripple-surface[data-mdc-ripple-is-unbounded]::after,.mdc-ripple-upgraded--unbounded::before,.mdc-ripple-upgraded--unbounded::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded::before,.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded::after,.mdc-ripple-upgraded--unbounded.mdc-ripple-upgraded::before,.mdc-ripple-upgraded--unbounded.mdc-ripple-upgraded::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded::after,.mdc-ripple-upgraded--unbounded.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-ripple-surface::before,.mdc-ripple-surface::after{background-color:#000;background-color:var(--mdc-ripple-color, #000)}.mdc-ripple-surface:hover::before,.mdc-ripple-surface.mdc-ripple-surface--hover::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-ripple-surface.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-ripple-surface:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-ripple-surface.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}:host{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;display:block}:host .mdc-ripple-surface{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;will-change:unset}.mdc-ripple-surface--primary::before,.mdc-ripple-surface--primary::after{background-color:#6200ee;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #6200ee))}.mdc-ripple-surface--primary:hover::before,.mdc-ripple-surface--primary.mdc-ripple-surface--hover::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-ripple-surface--primary.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-ripple-surface--primary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-ripple-surface--primary--activated::before{opacity:0.12;opacity:var(--mdc-ripple-activated-opacity, 0.12)}.mdc-ripple-surface--primary--activated::before,.mdc-ripple-surface--primary--activated::after{background-color:#6200ee;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #6200ee))}.mdc-ripple-surface--primary--activated:hover::before,.mdc-ripple-surface--primary--activated.mdc-ripple-surface--hover::before{opacity:0.16;opacity:var(--mdc-ripple-hover-opacity, 0.16)}.mdc-ripple-surface--primary--activated.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface--primary--activated:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-focus-opacity, 0.24)}.mdc-ripple-surface--primary--activated:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface--primary--activated:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-ripple-surface--primary--activated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-ripple-surface--primary--selected::before{opacity:0.08;opacity:var(--mdc-ripple-selected-opacity, 0.08)}.mdc-ripple-surface--primary--selected::before,.mdc-ripple-surface--primary--selected::after{background-color:#6200ee;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #6200ee))}.mdc-ripple-surface--primary--selected:hover::before,.mdc-ripple-surface--primary--selected.mdc-ripple-surface--hover::before{opacity:0.12;opacity:var(--mdc-ripple-hover-opacity, 0.12)}.mdc-ripple-surface--primary--selected.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface--primary--selected:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.2;opacity:var(--mdc-ripple-focus-opacity, 0.2)}.mdc-ripple-surface--primary--selected:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface--primary--selected:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.2;opacity:var(--mdc-ripple-press-opacity, 0.2)}.mdc-ripple-surface--primary--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.2)}.mdc-ripple-surface--accent::before,.mdc-ripple-surface--accent::after{background-color:#018786;background-color:var(--mdc-ripple-color, var(--mdc-theme-secondary, #018786))}.mdc-ripple-surface--accent:hover::before,.mdc-ripple-surface--accent.mdc-ripple-surface--hover::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-ripple-surface--accent.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-ripple-surface--accent.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-ripple-surface--accent--activated::before{opacity:0.12;opacity:var(--mdc-ripple-activated-opacity, 0.12)}.mdc-ripple-surface--accent--activated::before,.mdc-ripple-surface--accent--activated::after{background-color:#018786;background-color:var(--mdc-ripple-color, var(--mdc-theme-secondary, #018786))}.mdc-ripple-surface--accent--activated:hover::before,.mdc-ripple-surface--accent--activated.mdc-ripple-surface--hover::before{opacity:0.16;opacity:var(--mdc-ripple-hover-opacity, 0.16)}.mdc-ripple-surface--accent--activated.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface--accent--activated:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-focus-opacity, 0.24)}.mdc-ripple-surface--accent--activated:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface--accent--activated:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-ripple-surface--accent--activated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-ripple-surface--accent--selected::before{opacity:0.08;opacity:var(--mdc-ripple-selected-opacity, 0.08)}.mdc-ripple-surface--accent--selected::before,.mdc-ripple-surface--accent--selected::after{background-color:#018786;background-color:var(--mdc-ripple-color, var(--mdc-theme-secondary, #018786))}.mdc-ripple-surface--accent--selected:hover::before,.mdc-ripple-surface--accent--selected.mdc-ripple-surface--hover::before{opacity:0.12;opacity:var(--mdc-ripple-hover-opacity, 0.12)}.mdc-ripple-surface--accent--selected.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface--accent--selected:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.2;opacity:var(--mdc-ripple-focus-opacity, 0.2)}.mdc-ripple-surface--accent--selected:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface--accent--selected:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.2;opacity:var(--mdc-ripple-press-opacity, 0.2)}.mdc-ripple-surface--accent--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.2)}.mdc-ripple-surface--disabled{opacity:0}.mdc-ripple-surface--internal-use-state-layer-custom-properties::before,.mdc-ripple-surface--internal-use-state-layer-custom-properties::after{background-color:#000;background-color:var(--mdc-ripple-hover-state-layer-color, #000)}.mdc-ripple-surface--internal-use-state-layer-custom-properties:hover::before,.mdc-ripple-surface--internal-use-state-layer-custom-properties.mdc-ripple-surface--hover::before{opacity:0.04;opacity:var(--mdc-ripple-hover-state-layer-opacity, 0.04)}.mdc-ripple-surface--internal-use-state-layer-custom-properties.mdc-ripple-upgraded--background-focused::before,.mdc-ripple-surface--internal-use-state-layer-custom-properties:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-state-layer-opacity, 0.12)}.mdc-ripple-surface--internal-use-state-layer-custom-properties:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-ripple-surface--internal-use-state-layer-custom-properties:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-pressed-state-layer-opacity, 0.12)}.mdc-ripple-surface--internal-use-state-layer-custom-properties.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-pressed-state-layer-opacity, 0.12)}`;

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
let Ripple$1 = class Ripple extends RippleBase {
};
Ripple$1.styles = [styles$o];
Ripple$1 = __decorate([
    e$b('mwc-ripple')
], Ripple$1);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * TypeScript version of the decorator
 * @see https://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators
 */
function tsDecorator(prototype, name, descriptor) {
    const constructor = prototype.constructor;
    if (!descriptor) {
        /**
         * lit uses internal properties with two leading underscores to
         * provide storage for accessors
         */
        const litInternalPropertyKey = `__${name}`;
        descriptor =
            constructor.getPropertyDescriptor(name, litInternalPropertyKey);
        if (!descriptor) {
            throw new Error('@ariaProperty must be used after a @property decorator');
        }
    }
    // descriptor must exist at this point, reassign so typescript understands
    const propDescriptor = descriptor;
    let attribute = '';
    if (!propDescriptor.set) {
        throw new Error(`@ariaProperty requires a setter for ${name}`);
    }
    // TODO(b/202853219): Remove this check when internal tooling is
    // compatible
    // tslint:disable-next-line:no-any bail if applied to internal generated class
    if (prototype.dispatchWizEvent) {
        return descriptor;
    }
    const wrappedDescriptor = {
        configurable: true,
        enumerable: true,
        set(value) {
            if (attribute === '') {
                const options = constructor.getPropertyOptions(name);
                // if attribute is not a string, use `name` instead
                attribute =
                    typeof options.attribute === 'string' ? options.attribute : name;
            }
            if (this.hasAttribute(attribute)) {
                this.removeAttribute(attribute);
            }
            propDescriptor.set.call(this, value);
        }
    };
    if (propDescriptor.get) {
        wrappedDescriptor.get = function () {
            return propDescriptor.get.call(this);
        };
    }
    return wrappedDescriptor;
}
/**
 * A property decorator proxies an aria attribute to an internal node
 *
 * This decorator is only intended for use with ARIA attributes, such as `role`
 * and `aria-label` due to screenreader needs.
 *
 * Upon first render, `@ariaProperty` will remove the attribute from the host
 * element to prevent screenreaders from reading the host instead of the
 * internal node.
 *
 * This decorator should only be used for non-Symbol public fields decorated
 * with `@property`, or on a setter with an optional getter.
 *
 * @example
 * ```ts
 * class MyElement {
 *   @ariaProperty
 *   @property({ type: String, attribute: 'aria-label' })
 *   ariaLabel!: string;
 * }
 * ```
 * @category Decorator
 * @ExportDecoratedItems
 */
function ariaProperty(protoOrDescriptor, name, 
// tslint:disable-next-line:no-any any is required as a return type from decorators
descriptor) {
    if (name !== undefined) {
        return tsDecorator(protoOrDescriptor, name, descriptor);
    }
    else {
        throw new Error('@ariaProperty only supports TypeScript Decorators');
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Class that encapsulates the events handlers for `mwc-ripple`
 *
 *
 * Example:
 * ```
 * class XFoo extends LitElement {
 *   async getRipple() {
 *     this.renderRipple = true;
 *     await this.updateComplete;
 *     return this.renderRoot.querySelector('mwc-ripple');
 *   }
 *   rippleHandlers = new RippleHandlers(() => this.getRipple());
 *
 *   render() {
 *     return html`
 *       <div @mousedown=${this.rippleHandlers.startPress}></div>
 *       ${this.renderRipple ? html`<mwc-ripple></mwc-ripple>` : ''}
 *     `;
 *   }
 * }
 * ```
 */
class RippleHandlers {
    constructor(
    /** Function that returns a `mwc-ripple` */
    rippleFn) {
        this.startPress = (ev) => {
            rippleFn().then((r) => {
                r && r.startPress(ev);
            });
        };
        this.endPress = () => {
            rippleFn().then((r) => {
                r && r.endPress();
            });
        };
        this.startFocus = () => {
            rippleFn().then((r) => {
                r && r.startFocus();
            });
        };
        this.endFocus = () => {
            rippleFn().then((r) => {
                r && r.endFocus();
            });
        };
        this.startHover = () => {
            rippleFn().then((r) => {
                r && r.startHover();
            });
        };
        this.endHover = () => {
            rippleFn().then((r) => {
                r && r.endHover();
            });
        };
    }
}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$a,o$8;class s$7 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$7.finalized=!0,s$7._$litElement$=!0,null===(l$a=globalThis.litElementHydrateSupport)||void 0===l$a||l$a.call(globalThis,{LitElement:s$7});const n$8=globalThis.litElementPolyfillSupport;null==n$8||n$8({LitElement:s$7});(null!==(o$8=globalThis.litElementVersions)&&void 0!==o$8?o$8:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const l$9=l=>null!=l?l:A;

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
class ButtonBase extends s$7 {
    constructor() {
        super(...arguments);
        this.raised = false;
        this.unelevated = false;
        this.outlined = false;
        this.dense = false;
        this.disabled = false;
        this.trailingIcon = false;
        this.fullwidth = false;
        this.icon = '';
        this.label = '';
        this.expandContent = false;
        this.shouldRenderRipple = false;
        this.rippleHandlers = new RippleHandlers(() => {
            this.shouldRenderRipple = true;
            return this.ripple;
        });
    }
    /** @soyTemplate */
    renderOverlay() {
        return x ``;
    }
    /** @soyTemplate */
    renderRipple() {
        const filled = this.raised || this.unelevated;
        return this.shouldRenderRipple ?
            x `<mwc-ripple class="ripple" .primary="${!filled}" .disabled="${this.disabled}"></mwc-ripple>` :
            '';
    }
    focus() {
        const buttonElement = this.buttonElement;
        if (buttonElement) {
            this.rippleHandlers.startFocus();
            buttonElement.focus();
        }
    }
    blur() {
        const buttonElement = this.buttonElement;
        if (buttonElement) {
            this.rippleHandlers.endFocus();
            buttonElement.blur();
        }
    }
    /** @soyTemplate */
    getRenderClasses() {
        return {
            'mdc-button--raised': this.raised,
            'mdc-button--unelevated': this.unelevated,
            'mdc-button--outlined': this.outlined,
            'mdc-button--dense': this.dense,
        };
    }
    /**
     * @soyTemplate
     * @soyAttributes buttonAttributes: #button
     * @soyClasses buttonClasses: #button
     */
    render() {
        return x `
      <button
          id="button"
          class="mdc-button ${o$a(this.getRenderClasses())}"
          ?disabled="${this.disabled}"
          aria-label="${this.label || this.icon}"
          aria-haspopup="${l$9(this.ariaHasPopup)}"
          @focus="${this.handleRippleFocus}"
          @blur="${this.handleRippleBlur}"
          @mousedown="${this.handleRippleActivate}"
          @mouseenter="${this.handleRippleMouseEnter}"
          @mouseleave="${this.handleRippleMouseLeave}"
          @touchstart="${this.handleRippleActivate}"
          @touchend="${this.handleRippleDeactivate}"
          @touchcancel="${this.handleRippleDeactivate}">
        ${this.renderOverlay()}
        ${this.renderRipple()}
        <span class="leading-icon">
          <slot name="icon">
            ${this.icon && !this.trailingIcon ? this.renderIcon() : ''}
          </slot>
        </span>
        <span class="mdc-button__label">${this.label}</span>
        <span class="slot-container ${o$a({
            flex: this.expandContent
        })}">
          <slot></slot>
        </span>
        <span class="trailing-icon">
          <slot name="trailingIcon">
            ${this.icon && this.trailingIcon ? this.renderIcon() : ''}
          </slot>
        </span>
      </button>`;
    }
    /** @soyTemplate */
    renderIcon() {
        return x `
    <mwc-icon class="mdc-button__icon">
      ${this.icon}
    </mwc-icon>`;
    }
    handleRippleActivate(evt) {
        const onUp = () => {
            window.removeEventListener('mouseup', onUp);
            this.handleRippleDeactivate();
        };
        window.addEventListener('mouseup', onUp);
        this.rippleHandlers.startPress(evt);
    }
    handleRippleDeactivate() {
        this.rippleHandlers.endPress();
    }
    handleRippleMouseEnter() {
        this.rippleHandlers.startHover();
    }
    handleRippleMouseLeave() {
        this.rippleHandlers.endHover();
    }
    handleRippleFocus() {
        this.rippleHandlers.startFocus();
    }
    handleRippleBlur() {
        this.rippleHandlers.endFocus();
    }
}
ButtonBase.shadowRootOptions = { mode: 'open', delegatesFocus: true };
__decorate([
    ariaProperty,
    n$h({ type: String, attribute: 'aria-haspopup' })
], ButtonBase.prototype, "ariaHasPopup", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], ButtonBase.prototype, "raised", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], ButtonBase.prototype, "unelevated", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], ButtonBase.prototype, "outlined", void 0);
__decorate([
    n$h({ type: Boolean })
], ButtonBase.prototype, "dense", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], ButtonBase.prototype, "disabled", void 0);
__decorate([
    n$h({ type: Boolean, attribute: 'trailingicon' })
], ButtonBase.prototype, "trailingIcon", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], ButtonBase.prototype, "fullwidth", void 0);
__decorate([
    n$h({ type: String })
], ButtonBase.prototype, "icon", void 0);
__decorate([
    n$h({ type: String })
], ButtonBase.prototype, "label", void 0);
__decorate([
    n$h({ type: Boolean })
], ButtonBase.prototype, "expandContent", void 0);
__decorate([
    i$7('#button')
], ButtonBase.prototype, "buttonElement", void 0);
__decorate([
    e$8('mwc-ripple')
], ButtonBase.prototype, "ripple", void 0);
__decorate([
    t$4()
], ButtonBase.prototype, "shouldRenderRipple", void 0);
__decorate([
    e$9({ passive: true })
], ButtonBase.prototype, "handleRippleActivate", null);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$n = i$6 `.mdc-button{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase)}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:0;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);background-color:#fff;background-color:var(--mdc-elevation-overlay-color, #fff)}.mdc-button{position:relative;display:inline-flex;align-items:center;justify-content:center;box-sizing:border-box;min-width:64px;border:none;outline:none;line-height:inherit;user-select:none;-webkit-appearance:none;overflow:visible;vertical-align:middle;background:transparent}.mdc-button .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-button::-moz-focus-inner{padding:0;border:0}.mdc-button:active{outline:none}.mdc-button:hover{cursor:pointer}.mdc-button:disabled{cursor:default;pointer-events:none}.mdc-button .mdc-button__icon{margin-left:0;margin-right:8px;display:inline-block;position:relative;vertical-align:top}[dir=rtl] .mdc-button .mdc-button__icon,.mdc-button .mdc-button__icon[dir=rtl]{margin-left:8px;margin-right:0}.mdc-button .mdc-button__label{position:relative}.mdc-button .mdc-button__focus-ring{display:none}@media screen and (forced-colors: active){.mdc-button.mdc-ripple-upgraded--background-focused .mdc-button__focus-ring,.mdc-button:not(.mdc-ripple-upgraded):focus .mdc-button__focus-ring{pointer-events:none;border:2px solid transparent;border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc( 100% + 4px );width:calc( 100% + 4px );display:block}}@media screen and (forced-colors: active)and (forced-colors: active){.mdc-button.mdc-ripple-upgraded--background-focused .mdc-button__focus-ring,.mdc-button:not(.mdc-ripple-upgraded):focus .mdc-button__focus-ring{border-color:CanvasText}}@media screen and (forced-colors: active){.mdc-button.mdc-ripple-upgraded--background-focused .mdc-button__focus-ring::after,.mdc-button:not(.mdc-ripple-upgraded):focus .mdc-button__focus-ring::after{content:"";border:2px solid transparent;border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}}@media screen and (forced-colors: active)and (forced-colors: active){.mdc-button.mdc-ripple-upgraded--background-focused .mdc-button__focus-ring::after,.mdc-button:not(.mdc-ripple-upgraded):focus .mdc-button__focus-ring::after{border-color:CanvasText}}.mdc-button .mdc-button__touch{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%)}.mdc-button__label+.mdc-button__icon{margin-left:8px;margin-right:0}[dir=rtl] .mdc-button__label+.mdc-button__icon,.mdc-button__label+.mdc-button__icon[dir=rtl]{margin-left:0;margin-right:8px}svg.mdc-button__icon{fill:currentColor}.mdc-button--touch{margin-top:6px;margin-bottom:6px}.mdc-button{padding:0 8px 0 8px}.mdc-button--unelevated{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);padding:0 16px 0 16px}.mdc-button--unelevated.mdc-button--icon-trailing{padding:0 12px 0 16px}.mdc-button--unelevated.mdc-button--icon-leading{padding:0 16px 0 12px}.mdc-button--raised{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);padding:0 16px 0 16px}.mdc-button--raised.mdc-button--icon-trailing{padding:0 12px 0 16px}.mdc-button--raised.mdc-button--icon-leading{padding:0 16px 0 12px}.mdc-button--outlined{border-style:solid;transition:border 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-button--outlined .mdc-button__ripple{border-style:solid;border-color:transparent}.mdc-button{height:36px;border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button:not(:disabled){color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}.mdc-button:disabled{color:rgba(0, 0, 0, 0.38)}.mdc-button .mdc-button__icon{font-size:1.125rem;width:1.125rem;height:1.125rem}.mdc-button .mdc-button__ripple{border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--raised,.mdc-button--unelevated{height:36px;border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--raised:not(:disabled),.mdc-button--unelevated:not(:disabled){background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-button--raised:disabled,.mdc-button--unelevated:disabled{background-color:rgba(0, 0, 0, 0.12)}.mdc-button--raised:not(:disabled),.mdc-button--unelevated:not(:disabled){color:#fff;color:var(--mdc-theme-on-primary, #fff)}.mdc-button--raised:disabled,.mdc-button--unelevated:disabled{color:rgba(0, 0, 0, 0.38)}.mdc-button--raised .mdc-button__icon,.mdc-button--unelevated .mdc-button__icon{font-size:1.125rem;width:1.125rem;height:1.125rem}.mdc-button--raised .mdc-button__ripple,.mdc-button--unelevated .mdc-button__ripple{border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--outlined{height:36px;border-radius:4px;border-radius:var(--mdc-shape-small, 4px);padding:0 15px 0 15px;border-width:1px}.mdc-button--outlined:not(:disabled){color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}.mdc-button--outlined:disabled{color:rgba(0, 0, 0, 0.38)}.mdc-button--outlined .mdc-button__icon{font-size:1.125rem;width:1.125rem;height:1.125rem}.mdc-button--outlined .mdc-button__ripple{border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--outlined:not(:disabled){border-color:rgba(0, 0, 0, 0.12)}.mdc-button--outlined:disabled{border-color:rgba(0, 0, 0, 0.12)}.mdc-button--outlined.mdc-button--icon-trailing{padding:0 11px 0 15px}.mdc-button--outlined.mdc-button--icon-leading{padding:0 15px 0 11px}.mdc-button--outlined .mdc-button__ripple{top:-1px;left:-1px;bottom:-1px;right:-1px;border-width:1px}.mdc-button--outlined .mdc-button__touch{left:calc(-1 * 1px);width:calc(100% + 2 * 1px)}.mdc-button--raised{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 1px 5px 0px rgba(0,0,0,.12);transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-button--raised:hover,.mdc-button--raised:focus{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12)}.mdc-button--raised:active{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}.mdc-button--raised:disabled{box-shadow:0px 0px 0px 0px rgba(0, 0, 0, 0.2),0px 0px 0px 0px rgba(0, 0, 0, 0.14),0px 0px 0px 0px rgba(0,0,0,.12)}:host{display:inline-flex;outline:none;-webkit-tap-highlight-color:transparent;vertical-align:top}:host([fullwidth]){width:100%}:host([raised]),:host([unelevated]){--mdc-ripple-color:#fff;--mdc-ripple-focus-opacity:0.24;--mdc-ripple-hover-opacity:0.08;--mdc-ripple-press-opacity:0.24}.trailing-icon ::slotted(*),.trailing-icon .mdc-button__icon,.leading-icon ::slotted(*),.leading-icon .mdc-button__icon{margin-left:0;margin-right:8px;display:inline-block;position:relative;vertical-align:top;font-size:1.125rem;height:1.125rem;width:1.125rem}[dir=rtl] .trailing-icon ::slotted(*),[dir=rtl] .trailing-icon .mdc-button__icon,[dir=rtl] .leading-icon ::slotted(*),[dir=rtl] .leading-icon .mdc-button__icon,.trailing-icon ::slotted(*[dir=rtl]),.trailing-icon .mdc-button__icon[dir=rtl],.leading-icon ::slotted(*[dir=rtl]),.leading-icon .mdc-button__icon[dir=rtl]{margin-left:8px;margin-right:0}.trailing-icon ::slotted(*),.trailing-icon .mdc-button__icon{margin-left:8px;margin-right:0}[dir=rtl] .trailing-icon ::slotted(*),[dir=rtl] .trailing-icon .mdc-button__icon,.trailing-icon ::slotted(*[dir=rtl]),.trailing-icon .mdc-button__icon[dir=rtl]{margin-left:0;margin-right:8px}.slot-container{display:inline-flex;align-items:center;justify-content:center}.slot-container.flex{flex:auto}.mdc-button{flex:auto;overflow:hidden;padding-left:8px;padding-left:var(--mdc-button-horizontal-padding, 8px);padding-right:8px;padding-right:var(--mdc-button-horizontal-padding, 8px)}.mdc-button--raised{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-button-raised-box-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mdc-button--raised:focus{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-button-raised-box-shadow-focus, var(--mdc-button-raised-box-shadow-hover, 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12)))}.mdc-button--raised:hover{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-button-raised-box-shadow-hover, 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12))}.mdc-button--raised:active{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-button-raised-box-shadow-active, 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12))}.mdc-button--raised:disabled{box-shadow:0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-button-raised-box-shadow-disabled, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12))}.mdc-button--raised,.mdc-button--unelevated{padding-left:16px;padding-left:var(--mdc-button-horizontal-padding, 16px);padding-right:16px;padding-right:var(--mdc-button-horizontal-padding, 16px)}.mdc-button--outlined{border-width:1px;border-width:var(--mdc-button-outline-width, 1px);padding-left:calc(16px - 1px);padding-left:calc(var(--mdc-button-horizontal-padding, 16px) - var(--mdc-button-outline-width, 1px));padding-right:calc(16px - 1px);padding-right:calc(var(--mdc-button-horizontal-padding, 16px) - var(--mdc-button-outline-width, 1px))}.mdc-button--outlined:not(:disabled){border-color:rgba(0, 0, 0, 0.12);border-color:var(--mdc-button-outline-color, rgba(0, 0, 0, 0.12))}.mdc-button--outlined .ripple{top:calc(-1 * 1px);top:calc(-1 * var(--mdc-button-outline-width, 1px));left:calc(-1 * 1px);left:calc(-1 * var(--mdc-button-outline-width, 1px));right:initial;right:initial;border-width:1px;border-width:var(--mdc-button-outline-width, 1px);border-style:solid;border-color:transparent}[dir=rtl] .mdc-button--outlined .ripple,.mdc-button--outlined .ripple[dir=rtl]{left:initial;left:initial;right:calc(-1 * 1px);right:calc(-1 * var(--mdc-button-outline-width, 1px))}.mdc-button--dense{height:28px;margin-top:0;margin-bottom:0}.mdc-button--dense .mdc-button__touch{height:100%}:host([disabled]){pointer-events:none}:host([disabled]) .mdc-button{color:rgba(0, 0, 0, 0.38);color:var(--mdc-button-disabled-ink-color, rgba(0, 0, 0, 0.38))}:host([disabled]) .mdc-button--raised,:host([disabled]) .mdc-button--unelevated{background-color:rgba(0, 0, 0, 0.12);background-color:var(--mdc-button-disabled-fill-color, rgba(0, 0, 0, 0.12))}:host([disabled]) .mdc-button--outlined{border-color:rgba(0, 0, 0, 0.12);border-color:var(--mdc-button-disabled-outline-color, rgba(0, 0, 0, 0.12))}`;

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
let Button$1 = class Button extends ButtonBase {
};
Button$1.styles = [styles$n];
Button$1 = __decorate([
    e$b('mwc-button')
], Button$1);

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Specifies an observer callback that is run when the decorated property
 * changes. The observer receives the current and old value as arguments.
 */
const observer = (observer) => 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
(proto, propName) => {
    // if we haven't wrapped `updated` in this class, do so
    if (!proto.constructor
        ._observers) {
        proto.constructor._observers = new Map();
        const userUpdated = proto.updated;
        proto.updated = function (changedProperties) {
            userUpdated.call(this, changedProperties);
            changedProperties.forEach((v, k) => {
                const observers = this.constructor
                    ._observers;
                const observer = observers.get(k);
                if (observer !== undefined) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    observer.call(this, this[k], v);
                }
            });
        };
        // clone any existing observers (superclasses)
        // eslint-disable-next-line no-prototype-builtins
    }
    else if (!proto.constructor.hasOwnProperty('_observers')) {
        const observers = proto.constructor._observers;
        proto.constructor._observers = new Map();
        observers.forEach(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (v, k) => proto.constructor._observers.set(k, v));
    }
    // set this method
    proto.constructor._observers.set(propName, observer);
};

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$8,o$7;class s$6 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$6.finalized=!0,s$6._$litElement$=!0,null===(l$8=globalThis.litElementHydrateSupport)||void 0===l$8||l$8.call(globalThis,{LitElement:s$6});const n$7=globalThis.litElementPolyfillSupport;null==n$7||n$7({LitElement:s$6});(null!==(o$7=globalThis.litElementVersions)&&void 0!==o$7?o$7:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @fires request-selected {RequestSelectedDetail}
 * @fires list-item-rendered
 */
class ListItemBase extends s$6 {
    constructor() {
        super(...arguments);
        this.value = '';
        this.group = null;
        this.tabindex = -1;
        this.disabled = false;
        this.twoline = false;
        this.activated = false;
        this.graphic = null;
        this.multipleGraphics = false;
        this.hasMeta = false;
        this.noninteractive = false;
        this.selected = false;
        this.shouldRenderRipple = false;
        this._managingList = null;
        this.boundOnClick = this.onClick.bind(this);
        this._firstChanged = true;
        this._skipPropRequest = false;
        this.rippleHandlers = new RippleHandlers(() => {
            this.shouldRenderRipple = true;
            return this.ripple;
        });
        this.listeners = [
            {
                target: this,
                eventNames: ['click'],
                cb: () => {
                    this.onClick();
                },
            },
            {
                target: this,
                eventNames: ['mouseenter'],
                cb: this.rippleHandlers.startHover,
            },
            {
                target: this,
                eventNames: ['mouseleave'],
                cb: this.rippleHandlers.endHover,
            },
            {
                target: this,
                eventNames: ['focus'],
                cb: this.rippleHandlers.startFocus,
            },
            {
                target: this,
                eventNames: ['blur'],
                cb: this.rippleHandlers.endFocus,
            },
            {
                target: this,
                eventNames: ['mousedown', 'touchstart'],
                cb: (e) => {
                    const name = e.type;
                    this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);
                },
            },
        ];
    }
    get text() {
        const textContent = this.textContent;
        return textContent ? textContent.trim() : '';
    }
    render() {
        const text = this.renderText();
        const graphic = this.graphic ? this.renderGraphic() : x ``;
        const meta = this.hasMeta ? this.renderMeta() : x ``;
        return x `
      ${this.renderRipple()}
      ${graphic}
      ${text}
      ${meta}`;
    }
    renderRipple() {
        if (this.shouldRenderRipple) {
            return x `
      <mwc-ripple
        .activated=${this.activated}>
      </mwc-ripple>`;
        }
        else if (this.activated) {
            return x `<div class="fake-activated-ripple"></div>`;
        }
        else {
            return '';
        }
    }
    renderGraphic() {
        const graphicClasses = {
            multi: this.multipleGraphics,
        };
        return x `
      <span class="mdc-deprecated-list-item__graphic material-icons ${o$a(graphicClasses)}">
        <slot name="graphic"></slot>
      </span>`;
    }
    renderMeta() {
        return x `
      <span class="mdc-deprecated-list-item__meta material-icons">
        <slot name="meta"></slot>
      </span>`;
    }
    renderText() {
        const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();
        return x `
      <span class="mdc-deprecated-list-item__text">
        ${inner}
      </span>`;
    }
    renderSingleLine() {
        return x `<slot></slot>`;
    }
    renderTwoline() {
        return x `
      <span class="mdc-deprecated-list-item__primary-text">
        <slot></slot>
      </span>
      <span class="mdc-deprecated-list-item__secondary-text">
        <slot name="secondary"></slot>
      </span>
    `;
    }
    onClick() {
        this.fireRequestSelected(!this.selected, 'interaction');
    }
    onDown(upName, evt) {
        const onUp = () => {
            window.removeEventListener(upName, onUp);
            this.rippleHandlers.endPress();
        };
        window.addEventListener(upName, onUp);
        this.rippleHandlers.startPress(evt);
    }
    fireRequestSelected(selected, source) {
        if (this.noninteractive) {
            return;
        }
        const customEv = new CustomEvent('request-selected', { bubbles: true, composed: true, detail: { source, selected } });
        this.dispatchEvent(customEv);
    }
    connectedCallback() {
        super.connectedCallback();
        if (!this.noninteractive) {
            this.setAttribute('mwc-list-item', '');
        }
        for (const listener of this.listeners) {
            for (const eventName of listener.eventNames) {
                listener.target.addEventListener(eventName, listener.cb, { passive: true });
            }
        }
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        for (const listener of this.listeners) {
            for (const eventName of listener.eventNames) {
                listener.target.removeEventListener(eventName, listener.cb);
            }
        }
        if (this._managingList) {
            this._managingList.debouncedLayout ?
                this._managingList.debouncedLayout(true) :
                this._managingList.layout(true);
        }
    }
    // composed flag, event fire through shadow root and up through composed tree
    firstUpdated() {
        const ev = new Event('list-item-rendered', { bubbles: true, composed: true });
        this.dispatchEvent(ev);
    }
}
__decorate([
    i$7('slot')
], ListItemBase.prototype, "slotElement", void 0);
__decorate([
    e$8('mwc-ripple')
], ListItemBase.prototype, "ripple", void 0);
__decorate([
    n$h({ type: String })
], ListItemBase.prototype, "value", void 0);
__decorate([
    n$h({ type: String, reflect: true })
], ListItemBase.prototype, "group", void 0);
__decorate([
    n$h({ type: Number, reflect: true })
], ListItemBase.prototype, "tabindex", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true }),
    observer(function (value) {
        if (value) {
            this.setAttribute('aria-disabled', 'true');
        }
        else {
            this.setAttribute('aria-disabled', 'false');
        }
    })
], ListItemBase.prototype, "disabled", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], ListItemBase.prototype, "twoline", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], ListItemBase.prototype, "activated", void 0);
__decorate([
    n$h({ type: String, reflect: true })
], ListItemBase.prototype, "graphic", void 0);
__decorate([
    n$h({ type: Boolean })
], ListItemBase.prototype, "multipleGraphics", void 0);
__decorate([
    n$h({ type: Boolean })
], ListItemBase.prototype, "hasMeta", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true }),
    observer(function (value) {
        if (value) {
            this.removeAttribute('aria-checked');
            this.removeAttribute('mwc-list-item');
            this.selected = false;
            this.activated = false;
            this.tabIndex = -1;
        }
        else {
            this.setAttribute('mwc-list-item', '');
        }
    })
], ListItemBase.prototype, "noninteractive", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true }),
    observer(function (value) {
        const role = this.getAttribute('role');
        const isAriaSelectable = role === 'gridcell' || role === 'option' ||
            role === 'row' || role === 'tab';
        if (isAriaSelectable && value) {
            this.setAttribute('aria-selected', 'true');
        }
        else if (isAriaSelectable) {
            this.setAttribute('aria-selected', 'false');
        }
        if (this._firstChanged) {
            this._firstChanged = false;
            return;
        }
        if (this._skipPropRequest) {
            return;
        }
        this.fireRequestSelected(value, 'property');
    })
], ListItemBase.prototype, "selected", void 0);
__decorate([
    t$4()
], ListItemBase.prototype, "shouldRenderRipple", void 0);
__decorate([
    t$4()
], ListItemBase.prototype, "_managingList", void 0);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$m = i$6 `:host{cursor:pointer;user-select:none;-webkit-tap-highlight-color:transparent;height:48px;display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:var(--mdc-list-side-padding, 16px);padding-right:var(--mdc-list-side-padding, 16px);outline:none;height:48px;color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87))}:host:focus{outline:none}:host([activated]){color:#6200ee;color:var(--mdc-theme-primary, #6200ee);--mdc-ripple-color: var( --mdc-theme-primary, #6200ee )}:host([activated]) .mdc-deprecated-list-item__graphic{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host([activated]) .fake-activated-ripple::before{position:absolute;display:block;top:0;bottom:0;left:0;right:0;width:100%;height:100%;pointer-events:none;z-index:1;content:"";opacity:0.12;opacity:var(--mdc-ripple-activated-opacity, 0.12);background-color:#6200ee;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #6200ee))}.mdc-deprecated-list-item__graphic{flex-shrink:0;align-items:center;justify-content:center;fill:currentColor;display:inline-flex}.mdc-deprecated-list-item__graphic ::slotted(*){flex-shrink:0;align-items:center;justify-content:center;fill:currentColor;width:100%;height:100%;text-align:center}.mdc-deprecated-list-item__meta{width:var(--mdc-list-item-meta-size, 24px);height:var(--mdc-list-item-meta-size, 24px);margin-left:auto;margin-right:0;color:rgba(0, 0, 0, 0.38);color:var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38))}.mdc-deprecated-list-item__meta.multi{width:auto}.mdc-deprecated-list-item__meta ::slotted(*){width:var(--mdc-list-item-meta-size, 24px);line-height:var(--mdc-list-item-meta-size, 24px)}.mdc-deprecated-list-item__meta ::slotted(.material-icons),.mdc-deprecated-list-item__meta ::slotted(mwc-icon){line-height:var(--mdc-list-item-meta-size, 24px) !important}.mdc-deprecated-list-item__meta ::slotted(:not(.material-icons):not(mwc-icon)){-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:0.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit)}[dir=rtl] .mdc-deprecated-list-item__meta,.mdc-deprecated-list-item__meta[dir=rtl]{margin-left:0;margin-right:auto}.mdc-deprecated-list-item__meta ::slotted(*){width:100%;height:100%}.mdc-deprecated-list-item__text{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.mdc-deprecated-list-item__text ::slotted([for]),.mdc-deprecated-list-item__text[for]{pointer-events:none}.mdc-deprecated-list-item__primary-text{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;display:block;margin-top:0;line-height:normal;margin-bottom:-20px;display:block}.mdc-deprecated-list-item__primary-text::before{display:inline-block;width:0;height:32px;content:"";vertical-align:0}.mdc-deprecated-list-item__primary-text::after{display:inline-block;width:0;height:20px;content:"";vertical-align:-20px}.mdc-deprecated-list-item__secondary-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-body2-font-size, 0.875rem);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight, 400);letter-spacing:0.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing, 0.0178571429em);text-decoration:inherit;text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform, inherit);text-overflow:ellipsis;white-space:nowrap;overflow:hidden;display:block;margin-top:0;line-height:normal;display:block}.mdc-deprecated-list-item__secondary-text::before{display:inline-block;width:0;height:20px;content:"";vertical-align:0}.mdc-deprecated-list--dense .mdc-deprecated-list-item__secondary-text{font-size:inherit}* ::slotted(a),a{color:inherit;text-decoration:none}:host([twoline]){height:72px}:host([twoline]) .mdc-deprecated-list-item__text{align-self:flex-start}:host([disabled]),:host([noninteractive]){cursor:default;pointer-events:none}:host([disabled]) .mdc-deprecated-list-item__text ::slotted(*){opacity:.38}:host([disabled]) .mdc-deprecated-list-item__text ::slotted(*),:host([disabled]) .mdc-deprecated-list-item__primary-text ::slotted(*),:host([disabled]) .mdc-deprecated-list-item__secondary-text ::slotted(*){color:#000;color:var(--mdc-theme-on-surface, #000)}.mdc-deprecated-list-item__secondary-text ::slotted(*){color:rgba(0, 0, 0, 0.54);color:var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54))}.mdc-deprecated-list-item__graphic ::slotted(*){background-color:transparent;color:rgba(0, 0, 0, 0.38);color:var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38))}.mdc-deprecated-list-group__subheader ::slotted(*){color:rgba(0, 0, 0, 0.87);color:var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87))}:host([graphic=avatar]) .mdc-deprecated-list-item__graphic{width:var(--mdc-list-item-graphic-size, 40px);height:var(--mdc-list-item-graphic-size, 40px)}:host([graphic=avatar]) .mdc-deprecated-list-item__graphic.multi{width:auto}:host([graphic=avatar]) .mdc-deprecated-list-item__graphic ::slotted(*){width:var(--mdc-list-item-graphic-size, 40px);line-height:var(--mdc-list-item-graphic-size, 40px)}:host([graphic=avatar]) .mdc-deprecated-list-item__graphic ::slotted(.material-icons),:host([graphic=avatar]) .mdc-deprecated-list-item__graphic ::slotted(mwc-icon){line-height:var(--mdc-list-item-graphic-size, 40px) !important}:host([graphic=avatar]) .mdc-deprecated-list-item__graphic ::slotted(*){border-radius:50%}:host([graphic=avatar]) .mdc-deprecated-list-item__graphic,:host([graphic=medium]) .mdc-deprecated-list-item__graphic,:host([graphic=large]) .mdc-deprecated-list-item__graphic,:host([graphic=control]) .mdc-deprecated-list-item__graphic{margin-left:0;margin-right:var(--mdc-list-item-graphic-margin, 16px)}[dir=rtl] :host([graphic=avatar]) .mdc-deprecated-list-item__graphic,[dir=rtl] :host([graphic=medium]) .mdc-deprecated-list-item__graphic,[dir=rtl] :host([graphic=large]) .mdc-deprecated-list-item__graphic,[dir=rtl] :host([graphic=control]) .mdc-deprecated-list-item__graphic,:host([graphic=avatar]) .mdc-deprecated-list-item__graphic[dir=rtl],:host([graphic=medium]) .mdc-deprecated-list-item__graphic[dir=rtl],:host([graphic=large]) .mdc-deprecated-list-item__graphic[dir=rtl],:host([graphic=control]) .mdc-deprecated-list-item__graphic[dir=rtl]{margin-left:var(--mdc-list-item-graphic-margin, 16px);margin-right:0}:host([graphic=icon]) .mdc-deprecated-list-item__graphic{width:var(--mdc-list-item-graphic-size, 24px);height:var(--mdc-list-item-graphic-size, 24px);margin-left:0;margin-right:var(--mdc-list-item-graphic-margin, 32px)}:host([graphic=icon]) .mdc-deprecated-list-item__graphic.multi{width:auto}:host([graphic=icon]) .mdc-deprecated-list-item__graphic ::slotted(*){width:var(--mdc-list-item-graphic-size, 24px);line-height:var(--mdc-list-item-graphic-size, 24px)}:host([graphic=icon]) .mdc-deprecated-list-item__graphic ::slotted(.material-icons),:host([graphic=icon]) .mdc-deprecated-list-item__graphic ::slotted(mwc-icon){line-height:var(--mdc-list-item-graphic-size, 24px) !important}[dir=rtl] :host([graphic=icon]) .mdc-deprecated-list-item__graphic,:host([graphic=icon]) .mdc-deprecated-list-item__graphic[dir=rtl]{margin-left:var(--mdc-list-item-graphic-margin, 32px);margin-right:0}:host([graphic=avatar]:not([twoLine])),:host([graphic=icon]:not([twoLine])){height:56px}:host([graphic=medium]:not([twoLine])),:host([graphic=large]:not([twoLine])){height:72px}:host([graphic=medium]) .mdc-deprecated-list-item__graphic,:host([graphic=large]) .mdc-deprecated-list-item__graphic{width:var(--mdc-list-item-graphic-size, 56px);height:var(--mdc-list-item-graphic-size, 56px)}:host([graphic=medium]) .mdc-deprecated-list-item__graphic.multi,:host([graphic=large]) .mdc-deprecated-list-item__graphic.multi{width:auto}:host([graphic=medium]) .mdc-deprecated-list-item__graphic ::slotted(*),:host([graphic=large]) .mdc-deprecated-list-item__graphic ::slotted(*){width:var(--mdc-list-item-graphic-size, 56px);line-height:var(--mdc-list-item-graphic-size, 56px)}:host([graphic=medium]) .mdc-deprecated-list-item__graphic ::slotted(.material-icons),:host([graphic=medium]) .mdc-deprecated-list-item__graphic ::slotted(mwc-icon),:host([graphic=large]) .mdc-deprecated-list-item__graphic ::slotted(.material-icons),:host([graphic=large]) .mdc-deprecated-list-item__graphic ::slotted(mwc-icon){line-height:var(--mdc-list-item-graphic-size, 56px) !important}:host([graphic=large]){padding-left:0px}`;

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
let ListItem = class ListItem extends ListItemBase {
};
ListItem.styles = [styles$m];
ListItem = __decorate([
    e$b('mwc-list-item')
], ListItem);

/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * KEY provides normalized string values for keys.
 */
var KEY = {
    UNKNOWN: 'Unknown',
    BACKSPACE: 'Backspace',
    ENTER: 'Enter',
    SPACEBAR: 'Spacebar',
    PAGE_UP: 'PageUp',
    PAGE_DOWN: 'PageDown',
    END: 'End',
    HOME: 'Home',
    ARROW_LEFT: 'ArrowLeft',
    ARROW_UP: 'ArrowUp',
    ARROW_RIGHT: 'ArrowRight',
    ARROW_DOWN: 'ArrowDown',
    DELETE: 'Delete',
    ESCAPE: 'Escape',
    TAB: 'Tab',
};
var normalizedKeys = new Set();
// IE11 has no support for new Map with iterable so we need to initialize this
// by hand.
normalizedKeys.add(KEY.BACKSPACE);
normalizedKeys.add(KEY.ENTER);
normalizedKeys.add(KEY.SPACEBAR);
normalizedKeys.add(KEY.PAGE_UP);
normalizedKeys.add(KEY.PAGE_DOWN);
normalizedKeys.add(KEY.END);
normalizedKeys.add(KEY.HOME);
normalizedKeys.add(KEY.ARROW_LEFT);
normalizedKeys.add(KEY.ARROW_UP);
normalizedKeys.add(KEY.ARROW_RIGHT);
normalizedKeys.add(KEY.ARROW_DOWN);
normalizedKeys.add(KEY.DELETE);
normalizedKeys.add(KEY.ESCAPE);
normalizedKeys.add(KEY.TAB);
var KEY_CODE = {
    BACKSPACE: 8,
    ENTER: 13,
    SPACEBAR: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    ARROW_LEFT: 37,
    ARROW_UP: 38,
    ARROW_RIGHT: 39,
    ARROW_DOWN: 40,
    DELETE: 46,
    ESCAPE: 27,
    TAB: 9,
};
var mappedKeyCodes = new Map();
// IE11 has no support for new Map with iterable so we need to initialize this
// by hand.
mappedKeyCodes.set(KEY_CODE.BACKSPACE, KEY.BACKSPACE);
mappedKeyCodes.set(KEY_CODE.ENTER, KEY.ENTER);
mappedKeyCodes.set(KEY_CODE.SPACEBAR, KEY.SPACEBAR);
mappedKeyCodes.set(KEY_CODE.PAGE_UP, KEY.PAGE_UP);
mappedKeyCodes.set(KEY_CODE.PAGE_DOWN, KEY.PAGE_DOWN);
mappedKeyCodes.set(KEY_CODE.END, KEY.END);
mappedKeyCodes.set(KEY_CODE.HOME, KEY.HOME);
mappedKeyCodes.set(KEY_CODE.ARROW_LEFT, KEY.ARROW_LEFT);
mappedKeyCodes.set(KEY_CODE.ARROW_UP, KEY.ARROW_UP);
mappedKeyCodes.set(KEY_CODE.ARROW_RIGHT, KEY.ARROW_RIGHT);
mappedKeyCodes.set(KEY_CODE.ARROW_DOWN, KEY.ARROW_DOWN);
mappedKeyCodes.set(KEY_CODE.DELETE, KEY.DELETE);
mappedKeyCodes.set(KEY_CODE.ESCAPE, KEY.ESCAPE);
mappedKeyCodes.set(KEY_CODE.TAB, KEY.TAB);
var navigationKeys = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this
// by hand.
navigationKeys.add(KEY.PAGE_UP);
navigationKeys.add(KEY.PAGE_DOWN);
navigationKeys.add(KEY.END);
navigationKeys.add(KEY.HOME);
navigationKeys.add(KEY.ARROW_LEFT);
navigationKeys.add(KEY.ARROW_UP);
navigationKeys.add(KEY.ARROW_RIGHT);
navigationKeys.add(KEY.ARROW_DOWN);
/**
 * normalizeKey returns the normalized string for a navigational action.
 */
function normalizeKey(evt) {
    var key = evt.key;
    // If the event already has a normalized key, return it
    if (normalizedKeys.has(key)) {
        return key;
    }
    // tslint:disable-next-line:deprecation
    var mappedKey = mappedKeyCodes.get(evt.keyCode);
    if (mappedKey) {
        return mappedKey;
    }
    return KEY.UNKNOWN;
}

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var _a$1, _b$1;
var cssClasses$4 = {
    LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
    LIST_ITEM_CLASS: 'mdc-list-item',
    LIST_ITEM_DISABLED_CLASS: 'mdc-list-item--disabled',
    LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
    LIST_ITEM_TEXT_CLASS: 'mdc-list-item__text',
    LIST_ITEM_PRIMARY_TEXT_CLASS: 'mdc-list-item__primary-text',
    ROOT: 'mdc-list',
};
(_a$1 = {},
    _a$1["" + cssClasses$4.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-list-item--activated',
    _a$1["" + cssClasses$4.LIST_ITEM_CLASS] = 'mdc-list-item',
    _a$1["" + cssClasses$4.LIST_ITEM_DISABLED_CLASS] = 'mdc-list-item--disabled',
    _a$1["" + cssClasses$4.LIST_ITEM_SELECTED_CLASS] = 'mdc-list-item--selected',
    _a$1["" + cssClasses$4.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-list-item__primary-text',
    _a$1["" + cssClasses$4.ROOT] = 'mdc-list',
    _a$1);
var deprecatedClassNameMap = (_b$1 = {},
    _b$1["" + cssClasses$4.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-deprecated-list-item--activated',
    _b$1["" + cssClasses$4.LIST_ITEM_CLASS] = 'mdc-deprecated-list-item',
    _b$1["" + cssClasses$4.LIST_ITEM_DISABLED_CLASS] = 'mdc-deprecated-list-item--disabled',
    _b$1["" + cssClasses$4.LIST_ITEM_SELECTED_CLASS] = 'mdc-deprecated-list-item--selected',
    _b$1["" + cssClasses$4.LIST_ITEM_TEXT_CLASS] = 'mdc-deprecated-list-item__text',
    _b$1["" + cssClasses$4.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-deprecated-list-item__primary-text',
    _b$1["" + cssClasses$4.ROOT] = 'mdc-deprecated-list',
    _b$1);
var strings$2 = {
    ACTION_EVENT: 'MDCList:action',
    SELECTION_CHANGE_EVENT: 'MDCList:selectionChange',
    ARIA_CHECKED: 'aria-checked',
    ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
    ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
    ARIA_CURRENT: 'aria-current',
    ARIA_DISABLED: 'aria-disabled',
    ARIA_ORIENTATION: 'aria-orientation',
    ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
    ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
    ARIA_SELECTED: 'aria-selected',
    ARIA_INTERACTIVE_ROLES_SELECTOR: '[role="listbox"], [role="menu"]',
    ARIA_MULTI_SELECTABLE_SELECTOR: '[aria-multiselectable="true"]',
    CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]',
    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
    CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses$4.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$4.LIST_ITEM_CLASS + " a,\n    ." + deprecatedClassNameMap[cssClasses$4.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$4.LIST_ITEM_CLASS] + " a\n  ",
    DEPRECATED_SELECTOR: '.mdc-deprecated-list',
    FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses$4.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$4.LIST_ITEM_CLASS + " a,\n    ." + cssClasses$4.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses$4.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$4.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$4.LIST_ITEM_CLASS] + " a,\n    ." + deprecatedClassNameMap[cssClasses$4.LIST_ITEM_CLASS] + " input[type=\"radio\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$4.LIST_ITEM_CLASS] + " input[type=\"checkbox\"]:not(:disabled)\n  ",
    RADIO_SELECTOR: 'input[type="radio"]',
    SELECTED_ITEM_SELECTOR: '[aria-selected="true"], [aria-current="true"]',
};
var numbers$2 = {
    UNSET_INDEX: -1,
    TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300
};

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const integerSort = (a, b) => {
    return a - b;
};
const findIndexDiff = (oldSet, newSet) => {
    const oldArr = Array.from(oldSet);
    const newArr = Array.from(newSet);
    const diff = { added: [], removed: [] };
    const oldSorted = oldArr.sort(integerSort);
    const newSorted = newArr.sort(integerSort);
    let i = 0;
    let j = 0;
    while (i < oldSorted.length || j < newSorted.length) {
        const oldVal = oldSorted[i];
        const newVal = newSorted[j];
        if (oldVal === newVal) {
            i++;
            j++;
            continue;
        }
        if (oldVal !== undefined && (newVal === undefined || oldVal < newVal)) {
            diff.removed.push(oldVal);
            i++;
            continue;
        }
        if (newVal !== undefined && (oldVal === undefined || newVal < oldVal)) {
            diff.added.push(newVal);
            j++;
            continue;
        }
    }
    return diff;
};
const ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];
function isIndexSet(selectedIndex) {
    return selectedIndex instanceof Set;
}
const createSetFromIndex = (index) => {
    const entry = index === numbers$2.UNSET_INDEX ? new Set() : index;
    return isIndexSet(entry) ? new Set(entry) : new Set([entry]);
};
class MDCListFoundation extends MDCFoundation {
    constructor(adapter) {
        super(Object.assign(Object.assign({}, MDCListFoundation.defaultAdapter), adapter));
        this.isMulti_ = false;
        this.wrapFocus_ = false;
        this.isVertical_ = true;
        this.selectedIndex_ = numbers$2.UNSET_INDEX;
        this.focusedItemIndex_ = numbers$2.UNSET_INDEX;
        this.useActivatedClass_ = false;
        this.ariaCurrentAttrValue_ = null;
    }
    static get strings() {
        return strings$2;
    }
    static get numbers() {
        return numbers$2;
    }
    static get defaultAdapter() {
        return {
            focusItemAtIndex: () => undefined,
            getFocusedElementIndex: () => 0,
            getListItemCount: () => 0,
            isFocusInsideList: () => false,
            isRootFocused: () => false,
            notifyAction: () => undefined,
            notifySelected: () => undefined,
            getSelectedStateForElementIndex: () => false,
            setDisabledStateForElementIndex: () => undefined,
            getDisabledStateForElementIndex: () => false,
            setSelectedStateForElementIndex: () => undefined,
            setActivatedStateForElementIndex: () => undefined,
            setTabIndexForElementIndex: () => undefined,
            setAttributeForElementIndex: () => undefined,
            getAttributeForElementIndex: () => null,
        };
    }
    /**
     * Sets the private wrapFocus_ variable.
     */
    setWrapFocus(value) {
        this.wrapFocus_ = value;
    }
    /**
     * Sets the private wrapFocus_ variable.
     */
    setMulti(value) {
        this.isMulti_ = value;
        const currentIndex = this.selectedIndex_;
        if (value) {
            // number to set
            if (!isIndexSet(currentIndex)) {
                const isUnset = currentIndex === numbers$2.UNSET_INDEX;
                this.selectedIndex_ = isUnset ? new Set() : new Set([currentIndex]);
            }
        }
        else {
            // set to first sorted number in set
            if (isIndexSet(currentIndex)) {
                if (currentIndex.size) {
                    const vals = Array.from(currentIndex).sort(integerSort);
                    this.selectedIndex_ = vals[0];
                }
                else {
                    this.selectedIndex_ = numbers$2.UNSET_INDEX;
                }
            }
        }
    }
    /**
     * Sets the isVertical_ private variable.
     */
    setVerticalOrientation(value) {
        this.isVertical_ = value;
    }
    /**
     * Sets the useActivatedClass_ private variable.
     */
    setUseActivatedClass(useActivated) {
        this.useActivatedClass_ = useActivated;
    }
    getSelectedIndex() {
        return this.selectedIndex_;
    }
    setSelectedIndex(index) {
        if (!this.isIndexValid_(index)) {
            return;
        }
        if (this.isMulti_) {
            this.setMultiSelectionAtIndex_(createSetFromIndex(index));
        }
        else {
            this.setSingleSelectionAtIndex_(index);
        }
    }
    /**
     * Focus in handler for the list items.
     */
    handleFocusIn(_, listItemIndex) {
        if (listItemIndex >= 0) {
            this.adapter.setTabIndexForElementIndex(listItemIndex, 0);
        }
    }
    /**
     * Focus out handler for the list items.
     */
    handleFocusOut(_, listItemIndex) {
        if (listItemIndex >= 0) {
            this.adapter.setTabIndexForElementIndex(listItemIndex, -1);
        }
        /**
         * Between Focusout & Focusin some browsers do not have focus on any
         * element. Setting a delay to wait till the focus is moved to next element.
         */
        setTimeout(() => {
            if (!this.adapter.isFocusInsideList()) {
                this.setTabindexToFirstSelectedItem_();
            }
        }, 0);
    }
    /**
     * Key handler for the list.
     */
    handleKeydown(event, isRootListItem, listItemIndex) {
        const isArrowLeft = normalizeKey(event) === 'ArrowLeft';
        const isArrowUp = normalizeKey(event) === 'ArrowUp';
        const isArrowRight = normalizeKey(event) === 'ArrowRight';
        const isArrowDown = normalizeKey(event) === 'ArrowDown';
        const isHome = normalizeKey(event) === 'Home';
        const isEnd = normalizeKey(event) === 'End';
        const isEnter = normalizeKey(event) === 'Enter';
        const isSpace = normalizeKey(event) === 'Spacebar';
        if (this.adapter.isRootFocused()) {
            if (isArrowUp || isEnd) {
                event.preventDefault();
                this.focusLastElement();
            }
            else if (isArrowDown || isHome) {
                event.preventDefault();
                this.focusFirstElement();
            }
            return;
        }
        let currentIndex = this.adapter.getFocusedElementIndex();
        if (currentIndex === -1) {
            currentIndex = listItemIndex;
            if (currentIndex < 0) {
                // If this event doesn't have a mdc-deprecated-list-item ancestor from
                // the current list (not from a sublist), return early.
                return;
            }
        }
        let nextIndex;
        if ((this.isVertical_ && isArrowDown) ||
            (!this.isVertical_ && isArrowRight)) {
            this.preventDefaultEvent(event);
            nextIndex = this.focusNextElement(currentIndex);
        }
        else if ((this.isVertical_ && isArrowUp) || (!this.isVertical_ && isArrowLeft)) {
            this.preventDefaultEvent(event);
            nextIndex = this.focusPrevElement(currentIndex);
        }
        else if (isHome) {
            this.preventDefaultEvent(event);
            nextIndex = this.focusFirstElement();
        }
        else if (isEnd) {
            this.preventDefaultEvent(event);
            nextIndex = this.focusLastElement();
        }
        else if (isEnter || isSpace) {
            if (isRootListItem) {
                // Return early if enter key is pressed on anchor element which triggers
                // synthetic MouseEvent event.
                const target = event.target;
                if (target && target.tagName === 'A' && isEnter) {
                    return;
                }
                this.preventDefaultEvent(event);
                this.setSelectedIndexOnAction_(currentIndex, true);
            }
        }
        this.focusedItemIndex_ = currentIndex;
        if (nextIndex !== undefined) {
            this.setTabindexAtIndex_(nextIndex);
            this.focusedItemIndex_ = nextIndex;
        }
    }
    /**
     * Click handler for the list.
     */
    handleSingleSelection(index, isInteraction, force) {
        if (index === numbers$2.UNSET_INDEX) {
            return;
        }
        this.setSelectedIndexOnAction_(index, isInteraction, force);
        this.setTabindexAtIndex_(index);
        this.focusedItemIndex_ = index;
    }
    /**
     * Focuses the next element on the list.
     */
    focusNextElement(index) {
        const count = this.adapter.getListItemCount();
        let nextIndex = index + 1;
        if (nextIndex >= count) {
            if (this.wrapFocus_) {
                nextIndex = 0;
            }
            else {
                // Return early because last item is already focused.
                return index;
            }
        }
        this.adapter.focusItemAtIndex(nextIndex);
        return nextIndex;
    }
    /**
     * Focuses the previous element on the list.
     */
    focusPrevElement(index) {
        let prevIndex = index - 1;
        if (prevIndex < 0) {
            if (this.wrapFocus_) {
                prevIndex = this.adapter.getListItemCount() - 1;
            }
            else {
                // Return early because first item is already focused.
                return index;
            }
        }
        this.adapter.focusItemAtIndex(prevIndex);
        return prevIndex;
    }
    focusFirstElement() {
        this.adapter.focusItemAtIndex(0);
        return 0;
    }
    focusLastElement() {
        const lastIndex = this.adapter.getListItemCount() - 1;
        this.adapter.focusItemAtIndex(lastIndex);
        return lastIndex;
    }
    /**
     * @param itemIndex Index of the list item
     * @param isEnabled Sets the list item to enabled or disabled.
     */
    setEnabled(itemIndex, isEnabled) {
        if (!this.isIndexValid_(itemIndex)) {
            return;
        }
        this.adapter.setDisabledStateForElementIndex(itemIndex, !isEnabled);
    }
    /**
     * Ensures that preventDefault is only called if the containing element
     * doesn't consume the event, and it will cause an unintended scroll.
     */
    preventDefaultEvent(evt) {
        const target = evt.target;
        const tagName = `${target.tagName}`.toLowerCase();
        if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
            evt.preventDefault();
        }
    }
    setSingleSelectionAtIndex_(index, isInteraction = true) {
        if (this.selectedIndex_ === index) {
            return;
        }
        // unset previous
        if (this.selectedIndex_ !== numbers$2.UNSET_INDEX) {
            this.adapter.setSelectedStateForElementIndex(this.selectedIndex_, false);
            if (this.useActivatedClass_) {
                this.adapter.setActivatedStateForElementIndex(this.selectedIndex_, false);
            }
        }
        // set new
        if (isInteraction) {
            this.adapter.setSelectedStateForElementIndex(index, true);
        }
        if (this.useActivatedClass_) {
            this.adapter.setActivatedStateForElementIndex(index, true);
        }
        this.setAriaForSingleSelectionAtIndex_(index);
        this.selectedIndex_ = index;
        this.adapter.notifySelected(index);
    }
    setMultiSelectionAtIndex_(newIndex, isInteraction = true) {
        const oldIndex = createSetFromIndex(this.selectedIndex_);
        const diff = findIndexDiff(oldIndex, newIndex);
        if (!diff.removed.length && !diff.added.length) {
            return;
        }
        for (const removed of diff.removed) {
            if (isInteraction) {
                this.adapter.setSelectedStateForElementIndex(removed, false);
            }
            if (this.useActivatedClass_) {
                this.adapter.setActivatedStateForElementIndex(removed, false);
            }
        }
        for (const added of diff.added) {
            if (isInteraction) {
                this.adapter.setSelectedStateForElementIndex(added, true);
            }
            if (this.useActivatedClass_) {
                this.adapter.setActivatedStateForElementIndex(added, true);
            }
        }
        this.selectedIndex_ = newIndex;
        this.adapter.notifySelected(newIndex, diff);
    }
    /**
     * Sets aria attribute for single selection at given index.
     */
    setAriaForSingleSelectionAtIndex_(index) {
        // Detect the presence of aria-current and get the value only during list
        // initialization when it is in unset state.
        if (this.selectedIndex_ === numbers$2.UNSET_INDEX) {
            this.ariaCurrentAttrValue_ =
                this.adapter.getAttributeForElementIndex(index, strings$2.ARIA_CURRENT);
        }
        const isAriaCurrent = this.ariaCurrentAttrValue_ !== null;
        const ariaAttribute = isAriaCurrent ? strings$2.ARIA_CURRENT : strings$2.ARIA_SELECTED;
        if (this.selectedIndex_ !== numbers$2.UNSET_INDEX) {
            this.adapter.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');
        }
        const ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';
        this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
    }
    setTabindexAtIndex_(index) {
        if (this.focusedItemIndex_ === numbers$2.UNSET_INDEX && index !== 0) {
            // If no list item was selected set first list item's tabindex to -1.
            // Generally, tabindex is set to 0 on first list item of list that has no
            // preselected items.
            this.adapter.setTabIndexForElementIndex(0, -1);
        }
        else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {
            this.adapter.setTabIndexForElementIndex(this.focusedItemIndex_, -1);
        }
        this.adapter.setTabIndexForElementIndex(index, 0);
    }
    setTabindexToFirstSelectedItem_() {
        let targetIndex = 0;
        if (typeof this.selectedIndex_ === 'number' &&
            this.selectedIndex_ !== numbers$2.UNSET_INDEX) {
            targetIndex = this.selectedIndex_;
        }
        else if (isIndexSet(this.selectedIndex_) && this.selectedIndex_.size > 0) {
            targetIndex = Math.min(...this.selectedIndex_);
        }
        this.setTabindexAtIndex_(targetIndex);
    }
    isIndexValid_(index) {
        if (index instanceof Set) {
            if (!this.isMulti_) {
                throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
            }
            if (index.size === 0) {
                return true;
            }
            else {
                let isOneInRange = false;
                for (const entry of index) {
                    isOneInRange = this.isIndexInRange_(entry);
                    if (isOneInRange) {
                        break;
                    }
                }
                return isOneInRange;
            }
        }
        else if (typeof index === 'number') {
            if (this.isMulti_) {
                throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' +
                    index);
            }
            return index === numbers$2.UNSET_INDEX || this.isIndexInRange_(index);
        }
        else {
            return false;
        }
    }
    isIndexInRange_(index) {
        const listSize = this.adapter.getListItemCount();
        return index >= 0 && index < listSize;
    }
    /**
     * Sets selected index on user action, toggles checkbox / radio based on
     * toggleCheckbox value. User interaction should not toggle list item(s) when
     * disabled.
     */
    setSelectedIndexOnAction_(index, isInteraction, force) {
        if (this.adapter.getDisabledStateForElementIndex(index)) {
            return;
        }
        let checkedIndex = index;
        if (this.isMulti_) {
            checkedIndex = new Set([index]);
        }
        if (!this.isIndexValid_(checkedIndex)) {
            return;
        }
        if (this.isMulti_) {
            this.toggleMultiAtIndex(index, force, isInteraction);
        }
        else {
            if (isInteraction || force) {
                this.setSingleSelectionAtIndex_(index, isInteraction);
            }
            else {
                const isDeselection = this.selectedIndex_ === index;
                if (isDeselection) {
                    this.setSingleSelectionAtIndex_(numbers$2.UNSET_INDEX);
                }
            }
        }
        if (isInteraction) {
            this.adapter.notifyAction(index);
        }
    }
    toggleMultiAtIndex(index, force, isInteraction = true) {
        let newSelectionValue = false;
        if (force === undefined) {
            newSelectionValue = !this.adapter.getSelectedStateForElementIndex(index);
        }
        else {
            newSelectionValue = force;
        }
        const newSet = createSetFromIndex(this.selectedIndex_);
        if (newSelectionValue) {
            newSet.add(index);
        }
        else {
            newSet.delete(index);
        }
        this.setMultiSelectionAtIndex_(newSet, isInteraction);
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
function debounceLayout(callback, waitInMS = 50) {
    let timeoutId;
    // tslint:disable-next-line
    return function (updateItems = true) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            callback(updateItems);
        }, waitInMS);
    };
}
const isListItem = (element) => {
    return element.hasAttribute('mwc-list-item');
};
function clearAndCreateItemsReadyPromise() {
    const oldResolver = this.itemsReadyResolver;
    this.itemsReady = new Promise((res) => {
        // TODO(b/175626389): Type '(value: never[] | PromiseLike<never[]>) => void'
        // is not assignable to type '(value?: never[] | PromiseLike<never[]> |
        // undefined) => void'.
        return this.itemsReadyResolver = res;
    });
    oldResolver();
}
/**
 * @fires selected {SelectedDetail}
 * @fires action {ActionDetail}
 * @fires items-updated
 */
class ListBase extends BaseElement {
    constructor() {
        super();
        this.mdcAdapter = null;
        this.mdcFoundationClass = MDCListFoundation;
        this.activatable = false;
        this.multi = false;
        this.wrapFocus = false;
        this.itemRoles = null;
        this.innerRole = null;
        this.innerAriaLabel = null;
        this.rootTabbable = false;
        this.previousTabindex = null;
        this.noninteractive = false;
        this.itemsReadyResolver = (() => {
            //
        });
        this.itemsReady = Promise.resolve([]);
        // tslint:enable:ban-ts-ignore
        this.items_ = [];
        const debouncedFunction = debounceLayout(this.layout.bind(this));
        this.debouncedLayout = (updateItems = true) => {
            clearAndCreateItemsReadyPromise.call(this);
            debouncedFunction(updateItems);
        };
    }
    // tslint:disable:ban-ts-ignore
    async getUpdateComplete() {
        // @ts-ignore
        const result = await super.getUpdateComplete();
        await this.itemsReady;
        return result;
    }
    get items() {
        return this.items_;
    }
    updateItems() {
        var _a;
        const nodes = (_a = this.assignedElements) !== null && _a !== void 0 ? _a : [];
        const listItems = [];
        for (const node of nodes) {
            if (isListItem(node)) {
                listItems.push(node);
                node._managingList = this;
            }
            if (node.hasAttribute('divider') && !node.hasAttribute('role')) {
                node.setAttribute('role', 'separator');
            }
        }
        this.items_ = listItems;
        const selectedIndices = new Set();
        this.items_.forEach((item, index) => {
            if (this.itemRoles) {
                item.setAttribute('role', this.itemRoles);
            }
            else {
                item.removeAttribute('role');
            }
            if (item.selected) {
                selectedIndices.add(index);
            }
        });
        if (this.multi) {
            this.select(selectedIndices);
        }
        else {
            const index = selectedIndices.size ? selectedIndices.entries().next().value[1] : -1;
            this.select(index);
        }
        const itemsUpdatedEv = new Event('items-updated', { bubbles: true, composed: true });
        this.dispatchEvent(itemsUpdatedEv);
    }
    get selected() {
        const index = this.index;
        if (!isIndexSet(index)) {
            if (index === -1) {
                return null;
            }
            return this.items[index];
        }
        const selected = [];
        for (const entry of index) {
            selected.push(this.items[entry]);
        }
        return selected;
    }
    get index() {
        if (this.mdcFoundation) {
            return this.mdcFoundation.getSelectedIndex();
        }
        return -1;
    }
    render() {
        const role = this.innerRole === null ? undefined : this.innerRole;
        const ariaLabel = this.innerAriaLabel === null ? undefined : this.innerAriaLabel;
        const tabindex = this.rootTabbable ? '0' : '-1';
        return x `
      <!-- @ts-ignore -->
      <ul
          tabindex=${tabindex}
          role="${l$9(role)}"
          aria-label="${l$9(ariaLabel)}"
          class="mdc-deprecated-list"
          @keydown=${this.onKeydown}
          @focusin=${this.onFocusIn}
          @focusout=${this.onFocusOut}
          @request-selected=${this.onRequestSelected}
          @list-item-rendered=${this.onListItemConnected}>
        <slot></slot>
        ${this.renderPlaceholder()}
      </ul>
    `;
    }
    renderPlaceholder() {
        var _a;
        const nodes = (_a = this.assignedElements) !== null && _a !== void 0 ? _a : [];
        if (this.emptyMessage !== undefined && nodes.length === 0) {
            return x `
        <mwc-list-item noninteractive>${this.emptyMessage}</mwc-list-item>
      `;
        }
        return null;
    }
    firstUpdated() {
        super.firstUpdated();
        if (!this.items.length) {
            // required because this is called before observers
            this.mdcFoundation.setMulti(this.multi);
            // for when children upgrade before list
            this.layout();
        }
    }
    onFocusIn(evt) {
        if (this.mdcFoundation && this.mdcRoot) {
            const index = this.getIndexOfTarget(evt);
            this.mdcFoundation.handleFocusIn(evt, index);
        }
    }
    onFocusOut(evt) {
        if (this.mdcFoundation && this.mdcRoot) {
            const index = this.getIndexOfTarget(evt);
            this.mdcFoundation.handleFocusOut(evt, index);
        }
    }
    onKeydown(evt) {
        if (this.mdcFoundation && this.mdcRoot) {
            const index = this.getIndexOfTarget(evt);
            const target = evt.target;
            const isRootListItem = isListItem(target);
            this.mdcFoundation.handleKeydown(evt, isRootListItem, index);
        }
    }
    onRequestSelected(evt) {
        if (this.mdcFoundation) {
            let index = this.getIndexOfTarget(evt);
            // might happen in shady dom slowness. Recalc children
            if (index === -1) {
                this.layout();
                index = this.getIndexOfTarget(evt);
                // still not found; may not be mwc-list-item. Unsupported case.
                if (index === -1) {
                    return;
                }
            }
            const element = this.items[index];
            if (element.disabled) {
                return;
            }
            const selected = evt.detail.selected;
            const source = evt.detail.source;
            this.mdcFoundation.handleSingleSelection(index, source === 'interaction', selected);
            evt.stopPropagation();
        }
    }
    getIndexOfTarget(evt) {
        const elements = this.items;
        const path = evt.composedPath();
        for (const pathItem of path) {
            let index = -1;
            if (isNodeElement(pathItem) && isListItem(pathItem)) {
                index = elements.indexOf(pathItem);
            }
            if (index !== -1) {
                return index;
            }
        }
        return -1;
    }
    createAdapter() {
        this.mdcAdapter = {
            getListItemCount: () => {
                if (this.mdcRoot) {
                    return this.items.length;
                }
                return 0;
            },
            getFocusedElementIndex: this.getFocusedItemIndex,
            getAttributeForElementIndex: (index, attr) => {
                const listElement = this.mdcRoot;
                if (!listElement) {
                    return '';
                }
                const element = this.items[index];
                return element ? element.getAttribute(attr) : '';
            },
            setAttributeForElementIndex: (index, attr, val) => {
                if (!this.mdcRoot) {
                    return;
                }
                const element = this.items[index];
                if (element) {
                    element.setAttribute(attr, val);
                }
            },
            focusItemAtIndex: (index) => {
                const element = this.items[index];
                if (element) {
                    element.focus();
                }
            },
            setTabIndexForElementIndex: (index, value) => {
                const item = this.items[index];
                if (item) {
                    item.tabindex = value;
                }
            },
            notifyAction: (index) => {
                const init = { bubbles: true, composed: true };
                init.detail = { index };
                const ev = new CustomEvent('action', init);
                this.dispatchEvent(ev);
            },
            notifySelected: (index, diff) => {
                const init = { bubbles: true, composed: true };
                init.detail = { index, diff };
                const ev = new CustomEvent('selected', init);
                this.dispatchEvent(ev);
            },
            isFocusInsideList: () => {
                return doesElementContainFocus(this);
            },
            isRootFocused: () => {
                const mdcRoot = this.mdcRoot;
                const root = mdcRoot.getRootNode();
                return root.activeElement === mdcRoot;
            },
            setDisabledStateForElementIndex: (index, value) => {
                const item = this.items[index];
                if (!item) {
                    return;
                }
                item.disabled = value;
            },
            getDisabledStateForElementIndex: (index) => {
                const item = this.items[index];
                if (!item) {
                    return false;
                }
                return item.disabled;
            },
            setSelectedStateForElementIndex: (index, value) => {
                const item = this.items[index];
                if (!item) {
                    return;
                }
                item.selected = value;
            },
            getSelectedStateForElementIndex: (index) => {
                const item = this.items[index];
                if (!item) {
                    return false;
                }
                return item.selected;
            },
            setActivatedStateForElementIndex: (index, value) => {
                const item = this.items[index];
                if (!item) {
                    return;
                }
                item.activated = value;
            },
        };
        return this.mdcAdapter;
    }
    selectUi(index, activate = false) {
        const item = this.items[index];
        if (item) {
            item.selected = true;
            item.activated = activate;
        }
    }
    deselectUi(index) {
        const item = this.items[index];
        if (item) {
            item.selected = false;
            item.activated = false;
        }
    }
    select(index) {
        if (!this.mdcFoundation) {
            return;
        }
        this.mdcFoundation.setSelectedIndex(index);
    }
    toggle(index, force) {
        if (this.multi) {
            this.mdcFoundation.toggleMultiAtIndex(index, force);
        }
    }
    onListItemConnected(e) {
        const target = e.target;
        this.layout(this.items.indexOf(target) === -1);
    }
    layout(updateItems = true) {
        if (updateItems) {
            this.updateItems();
        }
        const first = this.items[0];
        for (const item of this.items) {
            item.tabindex = -1;
        }
        if (first) {
            if (this.noninteractive) {
                if (!this.previousTabindex) {
                    this.previousTabindex = first;
                }
            }
            else {
                first.tabindex = 0;
            }
        }
        this.itemsReadyResolver();
    }
    getFocusedItemIndex() {
        if (!this.mdcRoot) {
            return -1;
        }
        if (!this.items.length) {
            return -1;
        }
        const activeElementPath = deepActiveElementPath();
        if (!activeElementPath.length) {
            return -1;
        }
        for (let i = activeElementPath.length - 1; i >= 0; i--) {
            const activeItem = activeElementPath[i];
            if (isListItem(activeItem)) {
                return this.items.indexOf(activeItem);
            }
        }
        return -1;
    }
    focusItemAtIndex(index) {
        for (const item of this.items) {
            if (item.tabindex === 0) {
                item.tabindex = -1;
                break;
            }
        }
        this.items[index].tabindex = 0;
        this.items[index].focus();
    }
    focus() {
        const root = this.mdcRoot;
        if (root) {
            root.focus();
        }
    }
    blur() {
        const root = this.mdcRoot;
        if (root) {
            root.blur();
        }
    }
}
__decorate([
    n$h({ type: String })
], ListBase.prototype, "emptyMessage", void 0);
__decorate([
    i$7('.mdc-deprecated-list')
], ListBase.prototype, "mdcRoot", void 0);
__decorate([
    o$h('', true, '*')
], ListBase.prototype, "assignedElements", void 0);
__decorate([
    o$h('', true, '[tabindex="0"]')
], ListBase.prototype, "tabbableElements", void 0);
__decorate([
    n$h({ type: Boolean }),
    observer(function (value) {
        if (this.mdcFoundation) {
            this.mdcFoundation.setUseActivatedClass(value);
        }
    })
], ListBase.prototype, "activatable", void 0);
__decorate([
    n$h({ type: Boolean }),
    observer(function (newValue, oldValue) {
        if (this.mdcFoundation) {
            this.mdcFoundation.setMulti(newValue);
        }
        if (oldValue !== undefined) {
            this.layout();
        }
    })
], ListBase.prototype, "multi", void 0);
__decorate([
    n$h({ type: Boolean }),
    observer(function (value) {
        if (this.mdcFoundation) {
            this.mdcFoundation.setWrapFocus(value);
        }
    })
], ListBase.prototype, "wrapFocus", void 0);
__decorate([
    n$h({ type: String }),
    observer(function (_newValue, oldValue) {
        if (oldValue !== undefined) {
            this.updateItems();
        }
    })
], ListBase.prototype, "itemRoles", void 0);
__decorate([
    n$h({ type: String })
], ListBase.prototype, "innerRole", void 0);
__decorate([
    n$h({ type: String })
], ListBase.prototype, "innerAriaLabel", void 0);
__decorate([
    n$h({ type: Boolean })
], ListBase.prototype, "rootTabbable", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true }),
    observer(function (value) {
        var _a, _b;
        if (value) {
            const tabbable = (_b = (_a = this.tabbableElements) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;
            this.previousTabindex = tabbable;
            if (tabbable) {
                tabbable.setAttribute('tabindex', '-1');
            }
        }
        else if (!value && this.previousTabindex) {
            this.previousTabindex.setAttribute('tabindex', '0');
            this.previousTabindex = null;
        }
    })
], ListBase.prototype, "noninteractive", void 0);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$l = i$6 `@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}:host{display:block}.mdc-deprecated-list{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height, 1.75rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);line-height:1.5rem;margin:0;padding:8px 0;list-style-type:none;color:rgba(0, 0, 0, 0.87);color:var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));padding:var(--mdc-list-vertical-padding, 8px) 0}.mdc-deprecated-list:focus{outline:none}.mdc-deprecated-list-item{height:48px}.mdc-deprecated-list--dense{padding-top:4px;padding-bottom:4px;font-size:.812rem}.mdc-deprecated-list ::slotted([divider]){height:0;margin:0;border:none;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgba(0, 0, 0, 0.12)}.mdc-deprecated-list ::slotted([divider][padded]){margin:0 var(--mdc-list-side-padding, 16px)}.mdc-deprecated-list ::slotted([divider][inset]){margin-left:var(--mdc-list-inset-margin, 72px);margin-right:0;width:calc( 100% - var(--mdc-list-inset-margin, 72px) )}[dir=rtl] .mdc-deprecated-list ::slotted([divider][inset]),.mdc-deprecated-list ::slotted([divider][inset][dir=rtl]){margin-left:0;margin-right:var(--mdc-list-inset-margin, 72px)}.mdc-deprecated-list ::slotted([divider][inset][padded]){width:calc( 100% - var(--mdc-list-inset-margin, 72px) - var(--mdc-list-side-padding, 16px) )}.mdc-deprecated-list--dense ::slotted([mwc-list-item]){height:40px}.mdc-deprecated-list--dense ::slotted([mwc-list]){--mdc-list-item-graphic-size: 20px}.mdc-deprecated-list--two-line.mdc-deprecated-list--dense ::slotted([mwc-list-item]),.mdc-deprecated-list--avatar-list.mdc-deprecated-list--dense ::slotted([mwc-list-item]){height:60px}.mdc-deprecated-list--avatar-list.mdc-deprecated-list--dense ::slotted([mwc-list]){--mdc-list-item-graphic-size: 36px}:host([noninteractive]){pointer-events:none;cursor:default}.mdc-deprecated-list--dense ::slotted(.mdc-deprecated-list-item__primary-text){display:block;margin-top:0;line-height:normal;margin-bottom:-20px}.mdc-deprecated-list--dense ::slotted(.mdc-deprecated-list-item__primary-text)::before{display:inline-block;width:0;height:24px;content:"";vertical-align:0}.mdc-deprecated-list--dense ::slotted(.mdc-deprecated-list-item__primary-text)::after{display:inline-block;width:0;height:20px;content:"";vertical-align:-20px}`;

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
let List$1 = class List extends ListBase {
};
List$1.styles = [styles$l];
List$1 = __decorate([
    e$b('mwc-list')
], List$1);

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A divider component.
 */
class Divider extends r$6 {
    constructor() {
        super(...arguments);
        /**
         * Indents the divider with equal padding on both sides.
         */
        this.inset = false;
        /**
         * Indents the divider with padding on the leading side.
         */
        this.insetStart = false;
        /**
         * Indents the divider with padding on the trailing side.
         */
        this.insetEnd = false;
    }
}
__decorate([
    n$j({ type: Boolean, reflect: true })
], Divider.prototype, "inset", void 0);
__decorate([
    n$j({ type: Boolean, reflect: true, attribute: 'inset-start' })
], Divider.prototype, "insetStart", void 0);
__decorate([
    n$j({ type: Boolean, reflect: true, attribute: 'inset-end' })
], Divider.prototype, "insetEnd", void 0);

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$k = i$c `:host{box-sizing:border-box;color:var(--md-divider-color, var(--md-sys-color-outline-variant, #cac4d0));display:flex;height:var(--md-divider-thickness, 1px);width:100%}:host([inset]),:host([inset-start]){padding-inline-start:16px}:host([inset]),:host([inset-end]){padding-inline-end:16px}:host::before{background:currentColor;content:"";height:100%;width:100%}@media(forced-colors: active){:host::before{background:CanvasText}}
`;

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @summary A divider is a thin line that groups content in lists and
 * containers.
 *
 * @description Dividers can reinforce tapability, such as when used to separate
 * list items or define tappable regions in an accordion.
 *
 * @final
 * @suppress {visibility}
 */
class MdDivider extends Divider {
}
MdDivider.styles = [styles$k];

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e$2=t=>(...e)=>({_$litDirective$:t,values:e});class i$2{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i;}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const e$1=e$2(class extends i$2{constructor(t$1){if(super(t$1),t$1.type!==t.ATTRIBUTE||"class"!==t$1.name||t$1.strings?.length>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(t){return " "+Object.keys(t).filter((s=>t[s])).join(" ")+" "}update(s,[i]){if(void 0===this.st){this.st=new Set,void 0!==s.strings&&(this.nt=new Set(s.strings.join(" ").split(/\s/).filter((t=>""!==t))));for(const t in i)i[t]&&!this.nt?.has(t)&&this.st.add(t);return this.render(i)}const r=s.element.classList;for(const t of this.st)t in i||(r.remove(t),this.st.delete(t));for(const t in i){const s=!!i[t];s===this.st.has(t)||this.nt?.has(t)||(s?(r.add(t),this.st.add(t)):(r.remove(t),this.st.delete(t)));}return T$2}});

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Accessibility Object Model reflective aria properties.
 */
const ARIA_PROPERTIES = [
    'role',
    'ariaAtomic',
    'ariaAutoComplete',
    'ariaBusy',
    'ariaChecked',
    'ariaColCount',
    'ariaColIndex',
    'ariaColSpan',
    'ariaCurrent',
    'ariaDisabled',
    'ariaExpanded',
    'ariaHasPopup',
    'ariaHidden',
    'ariaInvalid',
    'ariaKeyShortcuts',
    'ariaLabel',
    'ariaLevel',
    'ariaLive',
    'ariaModal',
    'ariaMultiLine',
    'ariaMultiSelectable',
    'ariaOrientation',
    'ariaPlaceholder',
    'ariaPosInSet',
    'ariaPressed',
    'ariaReadOnly',
    'ariaRequired',
    'ariaRoleDescription',
    'ariaRowCount',
    'ariaRowIndex',
    'ariaRowSpan',
    'ariaSelected',
    'ariaSetSize',
    'ariaSort',
    'ariaValueMax',
    'ariaValueMin',
    'ariaValueNow',
    'ariaValueText',
];
/**
 * Accessibility Object Model aria attributes.
 */
const ARIA_ATTRIBUTES = ARIA_PROPERTIES.map(ariaPropertyToAttribute);
/**
 * Checks if an attribute is one of the AOM aria attributes.
 *
 * @example
 * isAriaAttribute('aria-label'); // true
 *
 * @param attribute The attribute to check.
 * @return True if the attribute is an aria attribute, or false if not.
 */
function isAriaAttribute(attribute) {
    return ARIA_ATTRIBUTES.includes(attribute);
}
/**
 * Converts an AOM aria property into its corresponding attribute.
 *
 * @example
 * ariaPropertyToAttribute('ariaLabel'); // 'aria-label'
 *
 * @param property The aria property.
 * @return The aria attribute.
 */
function ariaPropertyToAttribute(property) {
    return property
        .replace('aria', 'aria-')
        // IDREF attributes also include an "Element" or "Elements" suffix
        .replace(/Elements?/g, '')
        .toLowerCase();
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Private symbols
const privateIgnoreAttributeChangesFor = Symbol('privateIgnoreAttributeChangesFor');
/**
 * Mixes in aria delegation for elements that delegate focus and aria to inner
 * shadow root elements.
 *
 * This mixin fixes invalid aria announcements with shadow roots, caused by
 * duplicate aria attributes on both the host and the inner shadow root element.
 *
 * Note: this mixin **does not yet support** ID reference attributes, such as
 * `aria-labelledby` or `aria-controls`.
 *
 * @example
 * ```ts
 * class MyButton extends mixinDelegatesAria(LitElement) {
 *   static shadowRootOptions = {mode: 'open', delegatesFocus: true};
 *
 *   render() {
 *     return html`
 *       <button aria-label=${this.ariaLabel || nothing}>
 *         <slot></slot>
 *       </button>
 *     `;
 *   }
 * }
 * ```
 * ```html
 * <my-button aria-label="Plus one">+1</my-button>
 * ```
 *
 * Use `ARIAMixinStrict` for lit analyzer strict types, such as the "role"
 * attribute.
 *
 * @example
 * ```ts
 * return html`
 *   <button role=${(this as ARIAMixinStrict).role || nothing}>
 *     <slot></slot>
 *   </button>
 * `;
 * ```
 *
 * In the future, updates to the Accessibility Object Model (AOM) will provide
 * built-in aria delegation features that will replace this mixin.
 *
 * @param base The class to mix functionality into.
 * @return The provided class with aria delegation mixed in.
 */
function mixinDelegatesAria(base) {
    var _a;
    class WithDelegatesAriaElement extends base {
        constructor() {
            super(...arguments);
            this[_a] = new Set();
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (!isAriaAttribute(name)) {
                super.attributeChangedCallback(name, oldValue, newValue);
                return;
            }
            if (this[privateIgnoreAttributeChangesFor].has(name)) {
                return;
            }
            // Don't trigger another `attributeChangedCallback` once we remove the
            // aria attribute from the host. We check the explicit name of the
            // attribute to ignore since `attributeChangedCallback` can be called
            // multiple times out of an expected order when hydrating an element with
            // multiple attributes.
            this[privateIgnoreAttributeChangesFor].add(name);
            this.removeAttribute(name);
            this[privateIgnoreAttributeChangesFor].delete(name);
            const dataProperty = ariaAttributeToDataProperty(name);
            if (newValue === null) {
                delete this.dataset[dataProperty];
            }
            else {
                this.dataset[dataProperty] = newValue;
            }
            this.requestUpdate(ariaAttributeToDataProperty(name), oldValue);
        }
        getAttribute(name) {
            if (isAriaAttribute(name)) {
                return super.getAttribute(ariaAttributeToDataAttribute(name));
            }
            return super.getAttribute(name);
        }
        removeAttribute(name) {
            super.removeAttribute(name);
            if (isAriaAttribute(name)) {
                super.removeAttribute(ariaAttributeToDataAttribute(name));
                // Since `aria-*` attributes are already removed`, we need to request
                // an update because `attributeChangedCallback` will not be called.
                this.requestUpdate();
            }
        }
    }
    _a = privateIgnoreAttributeChangesFor;
    setupDelegatesAriaProperties(WithDelegatesAriaElement);
    return WithDelegatesAriaElement;
}
/**
 * Overrides the constructor's native `ARIAMixin` properties to ensure that
 * aria properties reflect the values that were shifted to a data attribute.
 *
 * @param ctor The `ReactiveElement` constructor to patch.
 */
function setupDelegatesAriaProperties(ctor) {
    for (const ariaProperty of ARIA_PROPERTIES) {
        // The casing between ariaProperty and the dataProperty may be different.
        // ex: aria-haspopup -> ariaHasPopup
        const ariaAttribute = ariaPropertyToAttribute(ariaProperty);
        // ex: aria-haspopup -> data-aria-haspopup
        const dataAttribute = ariaAttributeToDataAttribute(ariaAttribute);
        // ex: aria-haspopup -> dataset.ariaHaspopup
        const dataProperty = ariaAttributeToDataProperty(ariaAttribute);
        // Call `ReactiveElement.createProperty()` so that the `aria-*` and `data-*`
        // attributes are added to the `static observedAttributes` array. This
        // triggers `attributeChangedCallback` for the delegates aria mixin to
        // handle.
        ctor.createProperty(ariaProperty, {
            attribute: ariaAttribute,
            noAccessor: true,
        });
        ctor.createProperty(Symbol(dataAttribute), {
            attribute: dataAttribute,
            noAccessor: true,
        });
        // Re-define the `ARIAMixin` properties to handle data attribute shifting.
        // It is safe to use `Object.defineProperty` here because the properties
        // are native and not renamed.
        // tslint:disable-next-line:ban-unsafe-reflection
        Object.defineProperty(ctor.prototype, ariaProperty, {
            configurable: true,
            enumerable: true,
            get() {
                return this.dataset[dataProperty] ?? null;
            },
            set(value) {
                const prevValue = this.dataset[dataProperty] ?? null;
                if (value === prevValue) {
                    return;
                }
                if (value === null) {
                    delete this.dataset[dataProperty];
                }
                else {
                    this.dataset[dataProperty] = value;
                }
                this.requestUpdate(ariaProperty, prevValue);
            },
        });
    }
}
function ariaAttributeToDataAttribute(ariaAttribute) {
    // aria-haspopup -> data-aria-haspopup
    return `data-${ariaAttribute}`;
}
function ariaAttributeToDataProperty(ariaAttribute) {
    // aria-haspopup -> dataset.ariaHaspopup
    return ariaAttribute.replace(/-\w/, (dashLetter) => dashLetter[1].toUpperCase());
}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Re-dispatches an event from the provided element.
 *
 * This function is useful for forwarding non-composed events, such as `change`
 * events.
 *
 * @example
 * class MyInput extends LitElement {
 *   render() {
 *     return html`<input @change=${this.redispatchEvent}>`;
 *   }
 *
 *   protected redispatchEvent(event: Event) {
 *     redispatchEvent(this, event);
 *   }
 * }
 *
 * @param element The element to dispatch the event from.
 * @param event The event to re-dispatch.
 * @return Whether or not the event was dispatched (if cancelable).
 */
function redispatchEvent(element, event) {
    // For bubbling events in SSR light DOM (or composed), stop their propagation
    // and dispatch the copy.
    if (event.bubbles && (!element.shadowRoot || event.composed)) {
        event.stopPropagation();
    }
    const copy = Reflect.construct(event.constructor, [event.type, event]);
    const dispatched = element.dispatchEvent(copy);
    if (!dispatched) {
        event.preventDefault();
    }
    return dispatched;
}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Easing functions to use for web animations.
 *
 * **NOTE:** `EASING.EMPHASIZED` is approximated with unknown accuracy.
 *
 * TODO(b/241113345): replace with tokens
 */
const EASING = {
    STANDARD: 'cubic-bezier(0.2, 0, 0, 1)',
    STANDARD_ACCELERATE: 'cubic-bezier(.3,0,1,1)',
    STANDARD_DECELERATE: 'cubic-bezier(0,0,0,1)',
    EMPHASIZED: 'cubic-bezier(.3,0,0,1)',
    EMPHASIZED_ACCELERATE: 'cubic-bezier(.3,0,.8,.15)',
    EMPHASIZED_DECELERATE: 'cubic-bezier(.05,.7,.1,1)',
};
/**
 * Creates an `AnimationSignal` that can be used to cancel a previous task.
 *
 * @example
 * class MyClass {
 *   private labelAnimationSignal = createAnimationSignal();
 *
 *   private async animateLabel() {
 *     // Start of the task. Previous tasks will be canceled.
 *     const signal = this.labelAnimationSignal.start();
 *
 *     // Do async work...
 *     if (signal.aborted) {
 *       // Use AbortSignal to check if a request was made to abort after some
 *       // asynchronous work.
 *       return;
 *     }
 *
 *     const animation = this.animate(...);
 *     // Add event listeners to be notified when the task should be canceled.
 *     signal.addEventListener('abort', () => {
 *       animation.cancel();
 *     });
 *
 *     animation.addEventListener('finish', () => {
 *       // Tell the signal that the current task is finished.
 *       this.labelAnimationSignal.finish();
 *     });
 *   }
 * }
 *
 * @return An `AnimationSignal`.
 */
function createAnimationSignal() {
    // The current animation's AbortController
    let animationAbortController = null;
    return {
        start() {
            // Tell the previous animation to cancel.
            animationAbortController?.abort();
            // Set up a new AbortController for the current animation.
            animationAbortController = new AbortController();
            // Provide the AbortSignal so that the caller can check aborted status
            // and add listeners.
            return animationAbortController.signal;
        },
        finish() {
            animationAbortController = null;
        },
    };
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * The default dialog open animation.
 */
const DIALOG_DEFAULT_OPEN_ANIMATION = {
    dialog: [
        [
            // Dialog slide down
            [{ 'transform': 'translateY(-50px)' }, { 'transform': 'translateY(0)' }],
            { duration: 500, easing: EASING.EMPHASIZED },
        ],
    ],
    scrim: [
        [
            // Scrim fade in
            [{ 'opacity': 0 }, { 'opacity': 0.32 }],
            { duration: 500, easing: 'linear' },
        ],
    ],
    container: [
        [
            // Container fade in
            [{ 'opacity': 0 }, { 'opacity': 1 }],
            { duration: 50, easing: 'linear', pseudoElement: '::before' },
        ],
        [
            // Container grow
            // Note: current spec says to grow from 0dp->100% and shrink from
            // 100%->35%. We change this to 35%->100% to simplify the animation that
            // is supposed to clip content as it grows. From 0dp it's possible to see
            // text/actions appear before the container has fully grown.
            [{ 'height': '35%' }, { 'height': '100%' }],
            { duration: 500, easing: EASING.EMPHASIZED, pseudoElement: '::before' },
        ],
    ],
    headline: [
        [
            // Headline fade in
            [{ 'opacity': 0 }, { 'opacity': 0, offset: 0.2 }, { 'opacity': 1 }],
            { duration: 250, easing: 'linear', fill: 'forwards' },
        ],
    ],
    content: [
        [
            // Content fade in
            [{ 'opacity': 0 }, { 'opacity': 0, offset: 0.2 }, { 'opacity': 1 }],
            { duration: 250, easing: 'linear', fill: 'forwards' },
        ],
    ],
    actions: [
        [
            // Actions fade in
            [{ 'opacity': 0 }, { 'opacity': 0, offset: 0.5 }, { 'opacity': 1 }],
            { duration: 300, easing: 'linear', fill: 'forwards' },
        ],
    ],
};
/**
 * The default dialog close animation.
 */
const DIALOG_DEFAULT_CLOSE_ANIMATION = {
    dialog: [
        [
            // Dialog slide up
            [{ 'transform': 'translateY(0)' }, { 'transform': 'translateY(-50px)' }],
            { duration: 150, easing: EASING.EMPHASIZED_ACCELERATE },
        ],
    ],
    scrim: [
        [
            // Scrim fade out
            [{ 'opacity': 0.32 }, { 'opacity': 0 }],
            { duration: 150, easing: 'linear' },
        ],
    ],
    container: [
        [
            // Container shrink
            [{ 'height': '100%' }, { 'height': '35%' }],
            {
                duration: 150,
                easing: EASING.EMPHASIZED_ACCELERATE,
                pseudoElement: '::before',
            },
        ],
        [
            // Container fade out
            [{ 'opacity': '1' }, { 'opacity': '0' }],
            { delay: 100, duration: 50, easing: 'linear', pseudoElement: '::before' },
        ],
    ],
    headline: [
        [
            // Headline fade out
            [{ 'opacity': 1 }, { 'opacity': 0 }],
            { duration: 100, easing: 'linear', fill: 'forwards' },
        ],
    ],
    content: [
        [
            // Content fade out
            [{ 'opacity': 1 }, { 'opacity': 0 }],
            { duration: 100, easing: 'linear', fill: 'forwards' },
        ],
    ],
    actions: [
        [
            // Actions fade out
            [{ 'opacity': 1 }, { 'opacity': 0 }],
            { duration: 100, easing: 'linear', fill: 'forwards' },
        ],
    ],
};

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Separate variable needed for closure.
const dialogBaseClass = mixinDelegatesAria(ScopedElementsMixin(r$6));
/**
 * A dialog component.
 *
 * @fires open {Event} Dispatched when the dialog is opening before any animations.
 * @fires opened {Event} Dispatched when the dialog has opened after any animations.
 * @fires close {Event} Dispatched when the dialog is closing before any animations.
 * @fires closed {Event} Dispatched when the dialog has closed after any animations.
 * @fires cancel {Event} Dispatched when the dialog has been canceled by clicking
 * on the scrim or pressing Escape.
 */
class Dialog extends dialogBaseClass {
    get open() {
        return this.isOpen;
    }
    set open(open) {
        if (open === this.isOpen) {
            return;
        }
        this.isOpen = open;
        if (open) {
            this.setAttribute('open', '');
            this.show();
        }
        else {
            this.removeAttribute('open');
            this.close();
        }
    }
    constructor() {
        super();
        /**
         * Skips the opening and closing animations.
         */
        this.quick = false;
        /**
         * Gets or sets the dialog's return value, usually to indicate which button
         * a user pressed to close it.
         *
         * https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/returnValue
         */
        this.returnValue = '';
        /**
         * Disables focus trapping, which by default keeps keyboard Tab navigation
         * within the dialog.
         *
         * When disabled, after focusing the last element of a dialog, pressing Tab
         * again will release focus from the window back to the browser (such as the
         * URL bar).
         *
         * Focus trapping is recommended for accessibility, and should not typically
         * be disabled. Only turn this off if the use case of a dialog is more
         * accessible without focus trapping.
         */
        this.noFocusTrap = false;
        /**
         * Gets the opening animation for a dialog. Set to a new function to customize
         * the animation.
         */
        this.getOpenAnimation = () => DIALOG_DEFAULT_OPEN_ANIMATION;
        /**
         * Gets the closing animation for a dialog. Set to a new function to customize
         * the animation.
         */
        this.getCloseAnimation = () => DIALOG_DEFAULT_CLOSE_ANIMATION;
        this.isOpen = false;
        this.isOpening = false;
        this.isConnectedPromise = this.getIsConnectedPromise();
        this.isAtScrollTop = false;
        this.isAtScrollBottom = false;
        this.nextClickIsFromContent = false;
        // Dialogs should not be SSR'd while open, so we can just use runtime checks.
        this.hasHeadline = false;
        this.hasActions = false;
        this.hasIcon = false;
        // See https://bugs.chromium.org/p/chromium/issues/detail?id=1512224
        // Chrome v120 has a bug where escape keys do not trigger cancels. If we get
        // a dialog "close" event that is triggered without a "cancel" after an escape
        // keydown, then we need to manually trigger our closing logic.
        //
        // This bug occurs when pressing escape to close a dialog without first
        // interacting with the dialog's content.
        //
        // Cleanup tracking:
        // https://github.com/material-components/material-web/issues/5330
        // This can be removed when full CloseWatcher support added and the above bug
        // in Chromium is fixed to fire 'cancel' with one escape press and close with
        // multiple.
        this.escapePressedWithoutCancel = false;
        // This TreeWalker is used to walk through a dialog's children to find
        // focusable elements. TreeWalker is faster than `querySelectorAll('*')`.
        // We check for isServer because there isn't a "document" during an SSR
        // run.
        this.treewalker = document.createTreeWalker(this, NodeFilter.SHOW_ELEMENT);
        {
            this.addEventListener('submit', this.handleSubmit);
        }
    }
    /**
     * Opens the dialog and fires a cancelable `open` event. After a dialog's
     * animation, an `opened` event is fired.
     *
     * Add an `autofocus` attribute to a child of the dialog that should
     * receive focus after opening.
     *
     * @return A Promise that resolves after the animation is finished and the
     *     `opened` event was fired.
     */
    async show() {
        this.isOpening = true;
        // Dialogs can be opened before being attached to the DOM, so we need to
        // wait until we're connected before calling `showModal()`.
        await this.isConnectedPromise;
        await this.updateComplete;
        const dialog = this.dialog;
        // Check if already opened or if `dialog.close()` was called while awaiting.
        if (dialog.open || !this.isOpening) {
            this.isOpening = false;
            return;
        }
        const preventOpen = !this.dispatchEvent(new Event('open', { cancelable: true }));
        if (preventOpen) {
            this.open = false;
            this.isOpening = false;
            return;
        }
        // All Material dialogs are modal.
        dialog.showModal();
        this.open = true;
        // Reset scroll position if re-opening a dialog with the same content.
        if (this.scroller) {
            this.scroller.scrollTop = 0;
        }
        // Native modal dialogs ignore autofocus and instead force focus to the
        // first focusable child. Override this behavior if there is a child with
        // an autofocus attribute.
        this.querySelector('[autofocus]')?.focus();
        await this.animateDialog(this.getOpenAnimation());
        this.dispatchEvent(new Event('opened'));
        this.isOpening = false;
    }
    /**
     * Closes the dialog and fires a cancelable `close` event. After a dialog's
     * animation, a `closed` event is fired.
     *
     * @param returnValue A return value usually indicating which button was used
     *     to close a dialog. If a dialog is canceled by clicking the scrim or
     *     pressing Escape, it will not change the return value after closing.
     * @return A Promise that resolves after the animation is finished and the
     *     `closed` event was fired.
     */
    async close(returnValue = this.returnValue) {
        this.isOpening = false;
        if (!this.isConnected) {
            // Disconnected dialogs do not fire close events or animate.
            this.open = false;
            return;
        }
        await this.updateComplete;
        const dialog = this.dialog;
        // Check if already closed or if `dialog.show()` was called while awaiting.
        if (!dialog.open || this.isOpening) {
            this.open = false;
            return;
        }
        const prevReturnValue = this.returnValue;
        this.returnValue = returnValue;
        const preventClose = !this.dispatchEvent(new Event('close', { cancelable: true }));
        if (preventClose) {
            this.returnValue = prevReturnValue;
            return;
        }
        await this.animateDialog(this.getCloseAnimation());
        dialog.close(returnValue);
        this.open = false;
        this.dispatchEvent(new Event('closed'));
    }
    connectedCallback() {
        super.connectedCallback();
        this.isConnectedPromiseResolve();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.isConnectedPromise = this.getIsConnectedPromise();
    }
    render() {
        const scrollable = this.open && !(this.isAtScrollTop && this.isAtScrollBottom);
        const classes = {
            'has-headline': this.hasHeadline,
            'has-actions': this.hasActions,
            'has-icon': this.hasIcon,
            'scrollable': scrollable,
            'show-top-divider': scrollable && !this.isAtScrollTop,
            'show-bottom-divider': scrollable && !this.isAtScrollBottom,
        };
        // The focus trap sentinels are only added after the dialog opens, since
        // dialog.showModal() will try to autofocus them, even with tabindex="-1".
        const showFocusTrap = this.open && !this.noFocusTrap;
        const focusTrap = x$1 `
      <div
        class="focus-trap"
        tabindex="0"
        aria-hidden="true"
        @focus=${this.handleFocusTrapFocus}></div>
    `;
        const { ariaLabel } = this;
        return x$1 `
      <div class="scrim"></div>
      <dialog
        class=${e$1(classes)}
        aria-label=${ariaLabel || E$1}
        aria-labelledby=${this.hasHeadline ? 'headline' : E$1}
        role=${this.type === 'alert' ? 'alertdialog' : E$1}
        @cancel=${this.handleCancel}
        @click=${this.handleDialogClick}
        @close=${this.handleClose}
        @keydown=${this.handleKeydown}
        .returnValue=${this.returnValue || E$1}>
        ${showFocusTrap ? focusTrap : E$1}
        <div class="container" @click=${this.handleContentClick}>
          <div class="headline">
            <div class="icon" aria-hidden="true">
              <slot name="icon" @slotchange=${this.handleIconChange}></slot>
            </div>
            <h2 id="headline" aria-hidden=${!this.hasHeadline || E$1}>
              <slot
                name="headline"
                @slotchange=${this.handleHeadlineChange}></slot>
            </h2>
            <md-divider></md-divider>
          </div>
          <div class="scroller">
            <div class="content">
              <div class="top anchor"></div>
              <slot name="content"></slot>
              <div class="bottom anchor"></div>
            </div>
          </div>
          <div class="actions">
            <md-divider></md-divider>
            <slot name="actions" @slotchange=${this.handleActionsChange}></slot>
          </div>
        </div>
        ${showFocusTrap ? focusTrap : E$1}
      </dialog>
    `;
    }
    firstUpdated() {
        this.intersectionObserver = new IntersectionObserver((entries) => {
            for (const entry of entries) {
                this.handleAnchorIntersection(entry);
            }
        }, { root: this.scroller });
        this.intersectionObserver.observe(this.topAnchor);
        this.intersectionObserver.observe(this.bottomAnchor);
    }
    handleDialogClick() {
        if (this.nextClickIsFromContent) {
            // Avoid doing a layout calculation below if we know the click came from
            // content.
            this.nextClickIsFromContent = false;
            return;
        }
        // Click originated on the backdrop. Native `<dialog>`s will not cancel,
        // but Material dialogs do.
        const preventDefault = !this.dispatchEvent(new Event('cancel', { cancelable: true }));
        if (preventDefault) {
            return;
        }
        this.close();
    }
    handleContentClick() {
        this.nextClickIsFromContent = true;
    }
    handleSubmit(event) {
        const form = event.target;
        const { submitter } = event;
        if (form.method !== 'dialog' || !submitter) {
            return;
        }
        // Close reason is the submitter's value attribute, or the dialog's
        // `returnValue` if there is no attribute.
        this.close(submitter.getAttribute('value') ?? this.returnValue);
    }
    handleCancel(event) {
        if (event.target !== this.dialog) {
            // Ignore any cancel events dispatched by content.
            return;
        }
        this.escapePressedWithoutCancel = false;
        const preventDefault = !redispatchEvent(this, event);
        // We always prevent default on the original dialog event since we'll
        // animate closing it before it actually closes.
        event.preventDefault();
        if (preventDefault) {
            return;
        }
        this.close();
    }
    handleClose() {
        if (!this.escapePressedWithoutCancel) {
            return;
        }
        this.escapePressedWithoutCancel = false;
        this.dialog?.dispatchEvent(new Event('cancel', { cancelable: true }));
    }
    handleKeydown(event) {
        if (event.key !== 'Escape') {
            return;
        }
        // An escape key was pressed. If a "close" event fires next without a
        // "cancel" event first, then we know we're in the Chrome v120 bug.
        this.escapePressedWithoutCancel = true;
        // Wait a full task for the cancel/close event listeners to fire, then
        // reset the flag.
        setTimeout(() => {
            this.escapePressedWithoutCancel = false;
        });
    }
    async animateDialog(animation) {
        // Always cancel the previous animations. Animations can include `fill`
        // modes that need to be cleared when `quick` is toggled. If not, content
        // that faded out will remain hidden when a `quick` dialog re-opens after
        // previously opening and closing without `quick`.
        this.cancelAnimations?.abort();
        this.cancelAnimations = new AbortController();
        if (this.quick) {
            return;
        }
        const { dialog, scrim, container, headline, content, actions } = this;
        if (!dialog || !scrim || !container || !headline || !content || !actions) {
            return;
        }
        const { container: containerAnimate, dialog: dialogAnimate, scrim: scrimAnimate, headline: headlineAnimate, content: contentAnimate, actions: actionsAnimate, } = animation;
        const elementAndAnimation = [
            [dialog, dialogAnimate ?? []],
            [scrim, scrimAnimate ?? []],
            [container, containerAnimate ?? []],
            [headline, headlineAnimate ?? []],
            [content, contentAnimate ?? []],
            [actions, actionsAnimate ?? []],
        ];
        const animations = [];
        for (const [element, animation] of elementAndAnimation) {
            for (const animateArgs of animation) {
                const animation = element.animate(...animateArgs);
                this.cancelAnimations.signal.addEventListener('abort', () => {
                    animation.cancel();
                });
                animations.push(animation);
            }
        }
        await Promise.all(animations.map((animation) => animation.finished.catch(() => {
            // Ignore intentional AbortErrors when calling `animation.cancel()`.
        })));
    }
    handleHeadlineChange(event) {
        const slot = event.target;
        this.hasHeadline = slot.assignedElements().length > 0;
    }
    handleActionsChange(event) {
        const slot = event.target;
        this.hasActions = slot.assignedElements().length > 0;
    }
    handleIconChange(event) {
        const slot = event.target;
        this.hasIcon = slot.assignedElements().length > 0;
    }
    handleAnchorIntersection(entry) {
        const { target, isIntersecting } = entry;
        if (target === this.topAnchor) {
            this.isAtScrollTop = isIntersecting;
        }
        if (target === this.bottomAnchor) {
            this.isAtScrollBottom = isIntersecting;
        }
    }
    getIsConnectedPromise() {
        return new Promise((resolve) => {
            this.isConnectedPromiseResolve = resolve;
        });
    }
    handleFocusTrapFocus(event) {
        const [firstFocusableChild, lastFocusableChild] = this.getFirstAndLastFocusableChildren();
        if (!firstFocusableChild || !lastFocusableChild) {
            // When a dialog does not have focusable children, the dialog itself
            // receives focus.
            this.dialog?.focus();
            return;
        }
        // To determine which child to focus, we need to know which focus trap
        // received focus...
        const isFirstFocusTrap = event.target === this.firstFocusTrap;
        const isLastFocusTrap = !isFirstFocusTrap;
        // ...and where the focus came from (what was previously focused).
        const focusCameFromFirstChild = event.relatedTarget === firstFocusableChild;
        const focusCameFromLastChild = event.relatedTarget === lastFocusableChild;
        // Although this is a focus trap, focus can come from outside the trap.
        // This can happen when elements are programmatically `focus()`'d. It also
        // happens when focus leaves and returns to the window, such as clicking on
        // the browser's URL bar and pressing Tab, or switching focus between
        // iframes.
        const focusCameFromOutsideDialog = !focusCameFromFirstChild && !focusCameFromLastChild;
        // Focus the dialog's first child when we reach the end of the dialog and
        // focus is moving forward. Or, when focus is moving forwards into the
        // dialog from outside of the window.
        const shouldFocusFirstChild = (isLastFocusTrap && focusCameFromLastChild) ||
            (isFirstFocusTrap && focusCameFromOutsideDialog);
        if (shouldFocusFirstChild) {
            firstFocusableChild.focus();
            return;
        }
        // Focus the dialog's last child when we reach the beginning of the dialog
        // and focus is moving backward. Or, when focus is moving backwards into the
        // dialog from outside of the window.
        const shouldFocusLastChild = (isFirstFocusTrap && focusCameFromFirstChild) ||
            (isLastFocusTrap && focusCameFromOutsideDialog);
        if (shouldFocusLastChild) {
            lastFocusableChild.focus();
            return;
        }
        // The booleans above are verbose for readability, but code executation
        // won't actually reach here.
    }
    getFirstAndLastFocusableChildren() {
        if (!this.treewalker) {
            return [null, null];
        }
        let firstFocusableChild = null;
        let lastFocusableChild = null;
        // Reset the current node back to the root host element.
        this.treewalker.currentNode = this.treewalker.root;
        while (this.treewalker.nextNode()) {
            // Cast as Element since the TreeWalker filter only accepts Elements.
            const nextChild = this.treewalker.currentNode;
            if (!isFocusable(nextChild)) {
                continue;
            }
            if (!firstFocusableChild) {
                firstFocusableChild = nextChild;
            }
            lastFocusableChild = nextChild;
        }
        // We set lastFocusableChild immediately after finding a
        // firstFocusableChild, which means the pair is either both null or both
        // non-null. Cast since TypeScript does not recognize this.
        return [firstFocusableChild, lastFocusableChild];
    }
}
// We do not use `delegatesFocus: true` due to a Chromium bug with
// selecting text.
// See https://bugs.chromium.org/p/chromium/issues/detail?id=950357
/**
 * Opens the dialog when set to `true` and closes it when set to `false`.
 */
Dialog.scopedElements = {
    'md-divider': MdDivider,
};
__decorate([
    n$j({ type: Boolean })
], Dialog.prototype, "open", null);
__decorate([
    n$j({ type: Boolean })
], Dialog.prototype, "quick", void 0);
__decorate([
    n$j({ attribute: false })
], Dialog.prototype, "returnValue", void 0);
__decorate([
    n$j()
], Dialog.prototype, "type", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'no-focus-trap' })
], Dialog.prototype, "noFocusTrap", void 0);
__decorate([
    e$d('dialog')
], Dialog.prototype, "dialog", void 0);
__decorate([
    e$d('.scrim')
], Dialog.prototype, "scrim", void 0);
__decorate([
    e$d('.container')
], Dialog.prototype, "container", void 0);
__decorate([
    e$d('.headline')
], Dialog.prototype, "headline", void 0);
__decorate([
    e$d('.content')
], Dialog.prototype, "content", void 0);
__decorate([
    e$d('.actions')
], Dialog.prototype, "actions", void 0);
__decorate([
    r$4()
], Dialog.prototype, "isAtScrollTop", void 0);
__decorate([
    r$4()
], Dialog.prototype, "isAtScrollBottom", void 0);
__decorate([
    e$d('.scroller')
], Dialog.prototype, "scroller", void 0);
__decorate([
    e$d('.top.anchor')
], Dialog.prototype, "topAnchor", void 0);
__decorate([
    e$d('.bottom.anchor')
], Dialog.prototype, "bottomAnchor", void 0);
__decorate([
    e$d('.focus-trap')
], Dialog.prototype, "firstFocusTrap", void 0);
__decorate([
    r$4()
], Dialog.prototype, "hasHeadline", void 0);
__decorate([
    r$4()
], Dialog.prototype, "hasActions", void 0);
__decorate([
    r$4()
], Dialog.prototype, "hasIcon", void 0);
function isFocusable(element) {
    // Check if the element is a known built-in focusable element:
    // - <a> and <area> with `href` attributes.
    // - Form controls that are not disabled.
    // - `contenteditable` elements.
    // - Anything with a non-negative `tabindex`.
    const knownFocusableElements = ':is(button,input,select,textarea,object,:is(a,area)[href],[tabindex],[contenteditable=true])';
    const notDisabled = ':not(:disabled,[disabled])';
    const notNegativeTabIndex = ':not([tabindex^="-"])';
    if (element.matches(knownFocusableElements + notDisabled + notNegativeTabIndex)) {
        return true;
    }
    const isCustomElement = element.localName.includes('-');
    if (!isCustomElement) {
        return false;
    }
    // If a custom element does not have a tabindex, it may still be focusable
    // if it delegates focus with a shadow root. We also need to check again if
    // the custom element is a disabled form control.
    if (!element.matches(notDisabled)) {
        return false;
    }
    return element.shadowRoot?.delegatesFocus ?? false;
}

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$j = i$c `:host{border-start-start-radius:var(--md-dialog-container-shape-start-start, var(--md-dialog-container-shape, var(--md-sys-shape-corner-extra-large, 28px)));border-start-end-radius:var(--md-dialog-container-shape-start-end, var(--md-dialog-container-shape, var(--md-sys-shape-corner-extra-large, 28px)));border-end-end-radius:var(--md-dialog-container-shape-end-end, var(--md-dialog-container-shape, var(--md-sys-shape-corner-extra-large, 28px)));border-end-start-radius:var(--md-dialog-container-shape-end-start, var(--md-dialog-container-shape, var(--md-sys-shape-corner-extra-large, 28px)));display:contents;margin:auto;max-height:min(560px,100% - 48px);max-width:min(560px,100% - 48px);min-height:140px;min-width:280px;position:fixed;height:fit-content;width:fit-content}dialog{background:rgba(0,0,0,0);border:none;border-radius:inherit;flex-direction:column;height:inherit;margin:inherit;max-height:inherit;max-width:inherit;min-height:inherit;min-width:inherit;outline:none;overflow:visible;padding:0;width:inherit}dialog[open]{display:flex}::backdrop{background:none}.scrim{background:var(--md-sys-color-scrim, #000);display:none;inset:0;opacity:32%;pointer-events:none;position:fixed;z-index:1}:host([open]) .scrim{display:flex}h2{all:unset;align-self:stretch}.headline{align-items:center;color:var(--md-dialog-headline-color, var(--md-sys-color-on-surface, #1d1b20));display:flex;flex-direction:column;font-family:var(--md-dialog-headline-font, var(--md-sys-typescale-headline-small-font, var(--md-ref-typeface-brand, Roboto)));font-size:var(--md-dialog-headline-size, var(--md-sys-typescale-headline-small-size, 1.5rem));line-height:var(--md-dialog-headline-line-height, var(--md-sys-typescale-headline-small-line-height, 2rem));font-weight:var(--md-dialog-headline-weight, var(--md-sys-typescale-headline-small-weight, var(--md-ref-typeface-weight-regular, 400)));position:relative}slot[name=headline]::slotted(*){align-items:center;align-self:stretch;box-sizing:border-box;display:flex;gap:8px;padding:24px 24px 0}.icon{display:flex}slot[name=icon]::slotted(*){color:var(--md-dialog-icon-color, var(--md-sys-color-secondary, #625b71));fill:currentColor;font-size:var(--md-dialog-icon-size, 24px);margin-top:24px;height:var(--md-dialog-icon-size, 24px);width:var(--md-dialog-icon-size, 24px)}.has-icon slot[name=headline]::slotted(*){justify-content:center;padding-top:16px}.scrollable slot[name=headline]::slotted(*){padding-bottom:16px}.scrollable.has-headline slot[name=content]::slotted(*){padding-top:8px}.container{border-radius:inherit;display:flex;flex-direction:column;flex-grow:1;overflow:hidden;position:relative;transform-origin:top}.container::before{background:var(--md-dialog-container-color, var(--md-sys-color-surface-container-high, #ece6f0));border-radius:inherit;content:"";inset:0;position:absolute}.scroller{display:flex;flex:1;flex-direction:column;overflow:hidden;z-index:1}.scrollable .scroller{overflow-y:scroll}.content{color:var(--md-dialog-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));font-family:var(--md-dialog-supporting-text-font, var(--md-sys-typescale-body-medium-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-dialog-supporting-text-size, var(--md-sys-typescale-body-medium-size, 0.875rem));line-height:var(--md-dialog-supporting-text-line-height, var(--md-sys-typescale-body-medium-line-height, 1.25rem));flex:1;font-weight:var(--md-dialog-supporting-text-weight, var(--md-sys-typescale-body-medium-weight, var(--md-ref-typeface-weight-regular, 400)));height:min-content;position:relative}slot[name=content]::slotted(*){box-sizing:border-box;padding:24px}.anchor{position:absolute}.top.anchor{top:0}.bottom.anchor{bottom:0}.actions{position:relative}slot[name=actions]::slotted(*){box-sizing:border-box;display:flex;gap:8px;justify-content:flex-end;padding:16px 24px 24px}.has-actions slot[name=content]::slotted(*){padding-bottom:8px}md-divider{display:none;position:absolute}.has-headline.show-top-divider .headline md-divider,.has-actions.show-bottom-divider .actions md-divider{display:flex}.headline md-divider{bottom:0}.actions md-divider{top:0}@media(forced-colors: active){dialog{outline:2px solid WindowText}}
`;

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @summary Dialogs can require an action, communicate information, or help
 * users accomplish a task. There are two types of dialogs: basic and
 * full-screen.
 *
 * @description
 * A dialog is a modal window that appears in front of app content to provide
 * critical information or ask for a decision. Dialogs disable all app
 * functionality when they appear, and remain on screen until confirmed,
 * dismissed, or a required action has been taken.
 *
 * Dialogs are purposefully interruptive, so they should be used sparingly.
 * A less disruptive alternative is to use a menu, which provides options
 * without interrupting a user’s experience.
 *
 * On mobile devices only, complex dialogs should be displayed fullscreen.
 *
 * __Example usages:__
 * - Common use cases for basic dialogs include alerts, quick selection, and
 * confirmation.
 * - More complex dialogs may contain actions that require a series of tasks
 * to complete. One example is creating a calendar entry with the event title,
 * date, location, and time.
 *
 * @final
 * @suppress {visibility}
 */
class MdDialog extends Dialog {
}
MdDialog.styles = [styles$j];

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * TODO(b/265336902): add docs
 */
class Icon extends r$6 {
    render() {
        return x$1 `<slot></slot>`;
    }
    connectedCallback() {
        super.connectedCallback();
        const ariaHidden = this.getAttribute('aria-hidden');
        if (ariaHidden === 'false') {
            // Allow the user to set `aria-hidden="false"` to create an icon that is
            // announced by screenreaders.
            this.removeAttribute('aria-hidden');
            return;
        }
        // Needed for VoiceOver, which will create a "group" if the element is a
        // sibling to other content.
        this.setAttribute('aria-hidden', 'true');
    }
}

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$i = i$c `:host{font-size:var(--md-icon-size, 24px);width:var(--md-icon-size, 24px);height:var(--md-icon-size, 24px);color:inherit;font-variation-settings:inherit;font-weight:400;font-family:var(--md-icon-font, Material Symbols Outlined);display:inline-flex;font-style:normal;place-items:center;place-content:center;line-height:1;overflow:hidden;letter-spacing:normal;text-transform:none;user-select:none;white-space:nowrap;word-wrap:normal;flex-shrink:0;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale}::slotted(svg){fill:currentColor}::slotted(*){height:100%;width:100%}
`;

class MdIcon extends Icon {
}
/** @nocollapse */
MdIcon.styles = [styles$i];

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A unique symbol used for protected access to an instance's
 * `ElementInternals`.
 *
 * @example
 * ```ts
 * class MyElement extends mixinElementInternals(LitElement) {
 *   constructor() {
 *     super();
 *     this[internals].role = 'button';
 *   }
 * }
 * ```
 */
const internals = Symbol('internals');
// Private symbols
const privateInternals = Symbol('privateInternals');
/**
 * Mixes in an attached `ElementInternals` instance.
 *
 * This mixin is only needed when other shared code needs access to a
 * component's `ElementInternals`, such as form-associated mixins.
 *
 * @param base The class to mix functionality into.
 * @return The provided class with `WithElementInternals` mixed in.
 */
function mixinElementInternals(base) {
    class WithElementInternalsElement extends base {
        get [internals]() {
            // Create internals in getter so that it can be used in methods called on
            // construction in `ReactiveElement`, such as `requestUpdate()`.
            if (!this[privateInternals]) {
                // Cast needed for closure
                this[privateInternals] = this.attachInternals();
            }
            return this[privateInternals];
        }
    }
    return WithElementInternalsElement;
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Sets up an element's constructor to enable form submission. The element
 * instance should be form associated and have a `type` property.
 *
 * A click listener is added to each element instance. If the click is not
 * default prevented, it will submit the element's form, if any.
 *
 * @example
 * ```ts
 * class MyElement extends mixinElementInternals(LitElement) {
 *   static {
 *     setupFormSubmitter(MyElement);
 *   }
 *
 *   static formAssociated = true;
 *
 *   type: FormSubmitterType = 'submit';
 * }
 * ```
 *
 * @param ctor The form submitter element's constructor.
 */
function setupFormSubmitter(ctor) {
    ctor.addInitializer((instance) => {
        const submitter = instance;
        submitter.addEventListener('click', async (event) => {
            const { type, [internals]: elementInternals } = submitter;
            const { form } = elementInternals;
            if (!form || type === 'button') {
                return;
            }
            // Wait a full task for event bubbling to complete.
            await new Promise((resolve) => {
                setTimeout(resolve);
            });
            if (event.defaultPrevented) {
                return;
            }
            if (type === 'reset') {
                form.reset();
                return;
            }
            // form.requestSubmit(submitter) does not work with form associated custom
            // elements. This patches the dispatched submit event to add the correct
            // `submitter`.
            // See https://github.com/WICG/webcomponents/issues/814
            form.addEventListener('submit', (submitEvent) => {
                Object.defineProperty(submitEvent, 'submitter', {
                    configurable: true,
                    enumerable: true,
                    get: () => submitter,
                });
            }, { capture: true, once: true });
            elementInternals.setFormValue(submitter.value);
            form.requestSubmit();
        });
    });
}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Dispatches a click event to the given element that triggers a native action,
 * but is not composed and therefore is not seen outside the element.
 *
 * This is useful for responding to an external click event on the host element
 * that should trigger an internal action like a button click.
 *
 * Note, a helper is provided because setting this up correctly is a bit tricky.
 * In particular, calling `click` on an element creates a composed event, which
 * is not desirable, and a manually dispatched event must specifically be a
 * `MouseEvent` to trigger a native action.
 *
 * @example
 * hostClickListener = (event: MouseEvent) {
 *   if (isActivationClick(event)) {
 *     this.dispatchActivationClick(this.buttonElement);
 *   }
 * }
 *
 */
function dispatchActivationClick(element) {
    const event = new MouseEvent('click', { bubbles: true });
    element.dispatchEvent(event);
    return event;
}
/**
 * Returns true if the click event should trigger an activation behavior. The
 * behavior is defined by the element and is whatever it should do when
 * clicked.
 *
 * Typically when an element needs to handle a click, the click is generated
 * from within the element and an event listener within the element implements
 * the needed behavior; however, it's possible to fire a click directly
 * at the element that the element should handle. This method helps
 * distinguish these "external" clicks.
 *
 * An "external" click can be triggered in a number of ways: via a click
 * on an associated label for a form  associated element, calling
 * `element.click()`, or calling
 * `element.dispatchEvent(new MouseEvent('click', ...))`.
 *
 * Also works around Firefox issue
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1804576 by squelching
 * events for a microtask after called.
 *
 * @example
 * hostClickListener = (event: MouseEvent) {
 *   if (isActivationClick(event)) {
 *     this.dispatchActivationClick(this.buttonElement);
 *   }
 * }
 *
 */
function isActivationClick(event) {
    // Event must start at the event target.
    if (event.currentTarget !== event.target) {
        return false;
    }
    // Event must not be retargeted from shadowRoot.
    if (event.composedPath()[0] !== event.target) {
        return false;
    }
    // Target must not be disabled; this should only occur for a synthetically
    // dispatched click.
    if (event.target.disabled) {
        return false;
    }
    // This is an activation if the event should not be squelched.
    return !squelchEvent(event);
}
// TODO(https://bugzilla.mozilla.org/show_bug.cgi?id=1804576)
//  Remove when Firefox bug is addressed.
function squelchEvent(event) {
    const squelched = isSquelchingEvents;
    if (squelched) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    squelchEventsForMicrotask();
    return squelched;
}
// Ignore events for one microtask only.
let isSquelchingEvents = false;
async function squelchEventsForMicrotask() {
    isSquelchingEvents = true;
    // Need to pause for just one microtask.
    // tslint:disable-next-line
    await null;
    isSquelchingEvents = false;
}

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Separate variable needed for closure.
const buttonBaseClass = mixinDelegatesAria(mixinElementInternals(ScopedElementsMixin(r$6)));
/**
 * A button component.
 */
class Button extends buttonBaseClass {
    get name() {
        return this.getAttribute('name') ?? '';
    }
    set name(name) {
        this.setAttribute('name', name);
    }
    /**
     * The associated form element with which this element's value will submit.
     */
    get form() {
        return this[internals].form;
    }
    constructor() {
        super();
        /**
         * Whether or not the button is disabled.
         */
        this.disabled = false;
        /**
         * Whether or not the button is "soft-disabled" (disabled but still
         * focusable).
         *
         * Use this when a button needs increased visibility when disabled. See
         * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls
         * for more guidance on when this is needed.
         */
        this.softDisabled = false;
        /**
         * The URL that the link button points to.
         */
        this.href = '';
        /**
         * Where to display the linked `href` URL for a link button. Common options
         * include `_blank` to open in a new tab.
         */
        this.target = '';
        /**
         * Whether to render the icon at the inline end of the label rather than the
         * inline start.
         *
         * _Note:_ Link buttons cannot have trailing icons.
         */
        this.trailingIcon = false;
        /**
         * Whether to display the icon or not.
         */
        this.hasIcon = false;
        /**
         * The default behavior of the button. May be "button", "reset", or "submit"
         * (default).
         */
        this.type = 'submit';
        /**
         * The value added to a form with the button's name when the button submits a
         * form.
         */
        this.value = '';
        {
            this.addEventListener('click', this.handleClick.bind(this));
        }
    }
    focus() {
        this.buttonElement?.focus();
    }
    blur() {
        this.buttonElement?.blur();
    }
    render() {
        // Link buttons may not be disabled
        const isRippleDisabled = !this.href && (this.disabled || this.softDisabled);
        const buttonOrLink = this.href ? this.renderLink() : this.renderButton();
        // TODO(b/310046938): due to a limitation in focus ring/ripple, we can't use
        // the same ID for different elements, so we change the ID instead.
        const buttonId = this.href ? 'link' : 'button';
        return x$1 `
      ${this.renderElevationOrOutline?.()}
      <div class="background"></div>
      <md-focus-ring part="focus-ring" for=${buttonId}></md-focus-ring>
      <md-ripple
        part="ripple"
        for=${buttonId}
        ?disabled="${isRippleDisabled}"></md-ripple>
      ${buttonOrLink}
    `;
    }
    renderButton() {
        // Needed for closure conformance
        const { ariaLabel, ariaHasPopup, ariaExpanded } = this;
        return x$1 `<button
      id="button"
      class="button"
      ?disabled=${this.disabled}
      aria-disabled=${this.softDisabled || E$1}
      aria-label="${ariaLabel || E$1}"
      aria-haspopup="${ariaHasPopup || E$1}"
      aria-expanded="${ariaExpanded || E$1}">
      ${this.renderContent()}
    </button>`;
    }
    renderLink() {
        // Needed for closure conformance
        const { ariaLabel, ariaHasPopup, ariaExpanded } = this;
        return x$1 `<a
      id="link"
      class="button"
      aria-label="${ariaLabel || E$1}"
      aria-haspopup="${ariaHasPopup || E$1}"
      aria-expanded="${ariaExpanded || E$1}"
      href=${this.href}
      target=${this.target || E$1}
      >${this.renderContent()}
    </a>`;
    }
    renderContent() {
        const icon = x$1 `<slot
      name="icon"
      @slotchange="${this.handleSlotChange}"></slot>`;
        return x$1 `
      <span class="touch"></span>
      ${this.trailingIcon ? E$1 : icon}
      <span class="label"><slot></slot></span>
      ${this.trailingIcon ? icon : E$1}
    `;
    }
    handleClick(event) {
        // If the button is soft-disabled, we need to explicitly prevent the click
        // from propagating to other event listeners as well as prevent the default
        // action.
        if (!this.href && this.softDisabled) {
            event.stopImmediatePropagation();
            event.preventDefault();
            return;
        }
        if (!isActivationClick(event) || !this.buttonElement) {
            return;
        }
        this.focus();
        dispatchActivationClick(this.buttonElement);
    }
    handleSlotChange() {
        this.hasIcon = this.assignedIcons.length > 0;
    }
}
(() => {
    setupFormSubmitter(Button);
})();
/** @nocollapse */
Button.formAssociated = true;
/** @nocollapse */
Button.shadowRootOptions = {
    mode: 'open',
    delegatesFocus: true,
};
__decorate([
    n$j({ type: Boolean, reflect: true })
], Button.prototype, "disabled", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'soft-disabled', reflect: true })
], Button.prototype, "softDisabled", void 0);
__decorate([
    n$j()
], Button.prototype, "href", void 0);
__decorate([
    n$j()
], Button.prototype, "target", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'trailing-icon', reflect: true })
], Button.prototype, "trailingIcon", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'has-icon', reflect: true })
], Button.prototype, "hasIcon", void 0);
__decorate([
    n$j()
], Button.prototype, "type", void 0);
__decorate([
    n$j({ reflect: true })
], Button.prototype, "value", void 0);
__decorate([
    e$d('.button')
], Button.prototype, "buttonElement", void 0);
__decorate([
    o$j({ slot: 'icon', flatten: true })
], Button.prototype, "assignedIcons", void 0);

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$h = i$c `:host{border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-start-radius:var(--_container-shape-end-start);border-end-end-radius:var(--_container-shape-end-end);box-sizing:border-box;cursor:pointer;display:inline-flex;gap:8px;min-height:var(--_container-height);outline:none;padding-block:calc((var(--_container-height) - max(var(--_label-text-line-height),var(--_icon-size)))/2);padding-inline-start:var(--_leading-space);padding-inline-end:var(--_trailing-space);place-content:center;place-items:center;position:relative;font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight);text-overflow:ellipsis;text-wrap:nowrap;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0);vertical-align:top;--md-ripple-hover-color: var(--_hover-state-layer-color);--md-ripple-pressed-color: var(--_pressed-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity)}md-focus-ring{--md-focus-ring-shape-start-start: var(--_container-shape-start-start);--md-focus-ring-shape-start-end: var(--_container-shape-start-end);--md-focus-ring-shape-end-end: var(--_container-shape-end-end);--md-focus-ring-shape-end-start: var(--_container-shape-end-start)}:host(:is([disabled],[soft-disabled])){cursor:default;pointer-events:none}.button{border-radius:inherit;cursor:inherit;display:inline-flex;align-items:center;justify-content:center;border:none;outline:none;-webkit-appearance:none;vertical-align:middle;background:rgba(0,0,0,0);text-decoration:none;min-width:calc(64px - var(--_leading-space) - var(--_trailing-space));width:100%;z-index:0;height:100%;font:inherit;color:var(--_label-text-color);padding:0;gap:inherit;text-transform:inherit}.button::-moz-focus-inner{padding:0;border:0}:host(:hover) .button{color:var(--_hover-label-text-color)}:host(:focus-within) .button{color:var(--_focus-label-text-color)}:host(:active) .button{color:var(--_pressed-label-text-color)}.background{background-color:var(--_container-color);border-radius:inherit;inset:0;position:absolute}.label{overflow:hidden}:is(.button,.label,.label slot),.label ::slotted(*){text-overflow:inherit}:host(:is([disabled],[soft-disabled])) .label{color:var(--_disabled-label-text-color);opacity:var(--_disabled-label-text-opacity)}:host(:is([disabled],[soft-disabled])) .background{background-color:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}@media(forced-colors: active){.background{border:1px solid CanvasText}:host(:is([disabled],[soft-disabled])){--_disabled-icon-color: GrayText;--_disabled-icon-opacity: 1;--_disabled-container-opacity: 1;--_disabled-label-text-color: GrayText;--_disabled-label-text-opacity: 1}}:host([has-icon]:not([trailing-icon])){padding-inline-start:var(--_with-leading-icon-leading-space);padding-inline-end:var(--_with-leading-icon-trailing-space)}:host([has-icon][trailing-icon]){padding-inline-start:var(--_with-trailing-icon-leading-space);padding-inline-end:var(--_with-trailing-icon-trailing-space)}::slotted([slot=icon]){display:inline-flex;position:relative;writing-mode:horizontal-tb;fill:currentColor;flex-shrink:0;color:var(--_icon-color);font-size:var(--_icon-size);inline-size:var(--_icon-size);block-size:var(--_icon-size)}:host(:hover) ::slotted([slot=icon]){color:var(--_hover-icon-color)}:host(:focus-within) ::slotted([slot=icon]){color:var(--_focus-icon-color)}:host(:active) ::slotted([slot=icon]){color:var(--_pressed-icon-color)}:host(:is([disabled],[soft-disabled])) ::slotted([slot=icon]){color:var(--_disabled-icon-color);opacity:var(--_disabled-icon-opacity)}.touch{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%)}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--_container-height))/2) 0}:host([touch-target=none]) .touch{display:none}
`;

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$g = i$c `:host{--_container-height: var(--md-text-button-container-height, 40px);--_disabled-label-text-color: var(--md-text-button-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-text-button-disabled-label-text-opacity, 0.38);--_focus-label-text-color: var(--md-text-button-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_hover-label-text-color: var(--md-text-button-hover-label-text-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-color: var(--md-text-button-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-opacity: var(--md-text-button-hover-state-layer-opacity, 0.08);--_label-text-color: var(--md-text-button-label-text-color, var(--md-sys-color-primary, #6750a4));--_label-text-font: var(--md-text-button-label-text-font, var(--md-sys-typescale-label-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-text-button-label-text-line-height, var(--md-sys-typescale-label-large-line-height, 1.25rem));--_label-text-size: var(--md-text-button-label-text-size, var(--md-sys-typescale-label-large-size, 0.875rem));--_label-text-weight: var(--md-text-button-label-text-weight, var(--md-sys-typescale-label-large-weight, var(--md-ref-typeface-weight-medium, 500)));--_pressed-label-text-color: var(--md-text-button-pressed-label-text-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-color: var(--md-text-button-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-opacity: var(--md-text-button-pressed-state-layer-opacity, 0.12);--_disabled-icon-color: var(--md-text-button-disabled-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-icon-opacity: var(--md-text-button-disabled-icon-opacity, 0.38);--_focus-icon-color: var(--md-text-button-focus-icon-color, var(--md-sys-color-primary, #6750a4));--_hover-icon-color: var(--md-text-button-hover-icon-color, var(--md-sys-color-primary, #6750a4));--_icon-color: var(--md-text-button-icon-color, var(--md-sys-color-primary, #6750a4));--_icon-size: var(--md-text-button-icon-size, 18px);--_pressed-icon-color: var(--md-text-button-pressed-icon-color, var(--md-sys-color-primary, #6750a4));--_container-shape-start-start: var(--md-text-button-container-shape-start-start, var(--md-text-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_container-shape-start-end: var(--md-text-button-container-shape-start-end, var(--md-text-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_container-shape-end-end: var(--md-text-button-container-shape-end-end, var(--md-text-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_container-shape-end-start: var(--md-text-button-container-shape-end-start, var(--md-text-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_leading-space: var(--md-text-button-leading-space, 12px);--_trailing-space: var(--md-text-button-trailing-space, 12px);--_with-leading-icon-leading-space: var(--md-text-button-with-leading-icon-leading-space, 12px);--_with-leading-icon-trailing-space: var(--md-text-button-with-leading-icon-trailing-space, 16px);--_with-trailing-icon-leading-space: var(--md-text-button-with-trailing-icon-leading-space, 16px);--_with-trailing-icon-trailing-space: var(--md-text-button-with-trailing-icon-trailing-space, 12px);--_container-color: none;--_disabled-container-color: none;--_disabled-container-opacity: 0}
`;

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A key to retrieve an `Attachable` element's `AttachableController` from a
 * global `MutationObserver`.
 */
const ATTACHABLE_CONTROLLER = Symbol('attachableController');
let FOR_ATTRIBUTE_OBSERVER;
{
    /**
     * A global `MutationObserver` that reacts to `for` attribute changes on
     * `Attachable` elements. If the `for` attribute changes, the controller will
     * re-attach to the new referenced element.
     */
    FOR_ATTRIBUTE_OBSERVER = new MutationObserver((records) => {
        for (const record of records) {
            // When a control's `for` attribute changes, inform its
            // `AttachableController` to update to a new control.
            record.target[ATTACHABLE_CONTROLLER]?.hostConnected();
        }
    });
}
/**
 * A controller that provides an implementation for `Attachable` elements.
 *
 * @example
 * ```ts
 * class MyElement extends LitElement implements Attachable {
 *   get control() { return this.attachableController.control; }
 *
 *   private readonly attachableController = new AttachableController(
 *     this,
 *     (previousControl, newControl) => {
 *       previousControl?.removeEventListener('click', this.handleClick);
 *       newControl?.addEventListener('click', this.handleClick);
 *     }
 *   );
 *
 *   // Implement remaining `Attachable` properties/methods that call the
 *   // controller's properties/methods.
 * }
 * ```
 */
class AttachableController {
    get htmlFor() {
        return this.host.getAttribute('for');
    }
    set htmlFor(htmlFor) {
        if (htmlFor === null) {
            this.host.removeAttribute('for');
        }
        else {
            this.host.setAttribute('for', htmlFor);
        }
    }
    get control() {
        if (this.host.hasAttribute('for')) {
            if (!this.htmlFor || !this.host.isConnected) {
                return null;
            }
            return this.host.getRootNode().querySelector(`#${this.htmlFor}`);
        }
        return this.currentControl || this.host.parentElement;
    }
    set control(control) {
        if (control) {
            this.attach(control);
        }
        else {
            this.detach();
        }
    }
    /**
     * Creates a new controller for an `Attachable` element.
     *
     * @param host The `Attachable` element.
     * @param onControlChange A callback with two parameters for the previous and
     *     next control. An `Attachable` element may perform setup or teardown
     *     logic whenever the control changes.
     */
    constructor(host, onControlChange) {
        this.host = host;
        this.onControlChange = onControlChange;
        this.currentControl = null;
        host.addController(this);
        host[ATTACHABLE_CONTROLLER] = this;
        FOR_ATTRIBUTE_OBSERVER?.observe(host, { attributeFilter: ['for'] });
    }
    attach(control) {
        if (control === this.currentControl) {
            return;
        }
        this.setCurrentControl(control);
        // When imperatively attaching, remove the `for` attribute so
        // that the attached control is used instead of a referenced one.
        this.host.removeAttribute('for');
    }
    detach() {
        this.setCurrentControl(null);
        // When imperatively detaching, add an empty `for=""` attribute. This will
        // ensure the control is `null` rather than the `parentElement`.
        this.host.setAttribute('for', '');
    }
    /** @private */
    hostConnected() {
        this.setCurrentControl(this.control);
    }
    /** @private */
    hostDisconnected() {
        this.setCurrentControl(null);
    }
    setCurrentControl(control) {
        this.onControlChange(this.currentControl, control);
        this.currentControl = control;
    }
}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Events that the focus ring listens to.
 */
const EVENTS$1 = ['focusin', 'focusout', 'pointerdown'];
/**
 * A focus ring component.
 *
 * @fires visibility-changed {Event} Fired whenever `visible` changes.
 */
class FocusRing extends r$6 {
    constructor() {
        super(...arguments);
        /**
         * Makes the focus ring visible.
         */
        this.visible = false;
        /**
         * Makes the focus ring animate inwards instead of outwards.
         */
        this.inward = false;
        this.attachableController = new AttachableController(this, this.onControlChange.bind(this));
    }
    get htmlFor() {
        return this.attachableController.htmlFor;
    }
    set htmlFor(htmlFor) {
        this.attachableController.htmlFor = htmlFor;
    }
    get control() {
        return this.attachableController.control;
    }
    set control(control) {
        this.attachableController.control = control;
    }
    attach(control) {
        this.attachableController.attach(control);
    }
    detach() {
        this.attachableController.detach();
    }
    connectedCallback() {
        super.connectedCallback();
        // Needed for VoiceOver, which will create a "group" if the element is a
        // sibling to other content.
        this.setAttribute('aria-hidden', 'true');
    }
    /** @private */
    handleEvent(event) {
        if (event[HANDLED_BY_FOCUS_RING]) {
            // This ensures the focus ring does not activate when multiple focus rings
            // are used within a single component.
            return;
        }
        switch (event.type) {
            default:
                return;
            case 'focusin':
                this.visible = this.control?.matches(':focus-visible') ?? false;
                break;
            case 'focusout':
            case 'pointerdown':
                this.visible = false;
                break;
        }
        event[HANDLED_BY_FOCUS_RING] = true;
    }
    onControlChange(prev, next) {
        for (const event of EVENTS$1) {
            prev?.removeEventListener(event, this);
            next?.addEventListener(event, this);
        }
    }
    update(changed) {
        if (changed.has('visible')) {
            // This logic can be removed once the `:has` selector has been introduced
            // to Firefox. This is necessary to allow correct submenu styles.
            this.dispatchEvent(new Event('visibility-changed'));
        }
        super.update(changed);
    }
}
__decorate([
    n$j({ type: Boolean, reflect: true })
], FocusRing.prototype, "visible", void 0);
__decorate([
    n$j({ type: Boolean, reflect: true })
], FocusRing.prototype, "inward", void 0);
const HANDLED_BY_FOCUS_RING = Symbol('handledByFocusRing');

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$f = i$c `:host{animation-delay:0s,calc(var(--md-focus-ring-duration, 600ms)*.25);animation-duration:calc(var(--md-focus-ring-duration, 600ms)*.25),calc(var(--md-focus-ring-duration, 600ms)*.75);animation-timing-function:cubic-bezier(0.2, 0, 0, 1);box-sizing:border-box;color:var(--md-focus-ring-color, var(--md-sys-color-secondary, #625b71));display:none;pointer-events:none;position:absolute}:host([visible]){display:flex}:host(:not([inward])){animation-name:outward-grow,outward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));inset:calc(-1*var(--md-focus-ring-outward-offset, 2px));outline:var(--md-focus-ring-width, 3px) solid currentColor}:host([inward]){animation-name:inward-grow,inward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border:var(--md-focus-ring-width, 3px) solid currentColor;inset:var(--md-focus-ring-inward-offset, 0px)}@keyframes outward-grow{from{outline-width:0}to{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes outward-shrink{from{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-grow{from{border-width:0}to{border-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-shrink{from{border-width:var(--md-focus-ring-active-width, 8px)}}@media(prefers-reduced-motion){:host{animation:none}}
`;

class MdFocusRing extends FocusRing {
}
MdFocusRing.styles = [styles$f];

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const PRESS_GROW_MS = 450;
const MINIMUM_PRESS_MS = 225;
const INITIAL_ORIGIN_SCALE = 0.2;
const PADDING = 10;
const SOFT_EDGE_MINIMUM_SIZE = 75;
const SOFT_EDGE_CONTAINER_RATIO = 0.35;
const PRESS_PSEUDO = '::after';
const ANIMATION_FILL = 'forwards';
/**
 * Interaction states for the ripple.
 *
 * On Touch:
 *  - `INACTIVE -> TOUCH_DELAY -> WAITING_FOR_CLICK -> INACTIVE`
 *  - `INACTIVE -> TOUCH_DELAY -> HOLDING -> WAITING_FOR_CLICK -> INACTIVE`
 *
 * On Mouse or Pen:
 *   - `INACTIVE -> WAITING_FOR_CLICK -> INACTIVE`
 */
var State;
(function (State) {
    /**
     * Initial state of the control, no touch in progress.
     *
     * Transitions:
     *   - on touch down: transition to `TOUCH_DELAY`.
     *   - on mouse down: transition to `WAITING_FOR_CLICK`.
     */
    State[State["INACTIVE"] = 0] = "INACTIVE";
    /**
     * Touch down has been received, waiting to determine if it's a swipe or
     * scroll.
     *
     * Transitions:
     *   - on touch up: begin press; transition to `WAITING_FOR_CLICK`.
     *   - on cancel: transition to `INACTIVE`.
     *   - after `TOUCH_DELAY_MS`: begin press; transition to `HOLDING`.
     */
    State[State["TOUCH_DELAY"] = 1] = "TOUCH_DELAY";
    /**
     * A touch has been deemed to be a press
     *
     * Transitions:
     *  - on up: transition to `WAITING_FOR_CLICK`.
     */
    State[State["HOLDING"] = 2] = "HOLDING";
    /**
     * The user touch has finished, transition into rest state.
     *
     * Transitions:
     *   - on click end press; transition to `INACTIVE`.
     */
    State[State["WAITING_FOR_CLICK"] = 3] = "WAITING_FOR_CLICK";
})(State || (State = {}));
/**
 * Events that the ripple listens to.
 */
const EVENTS = [
    'click',
    'contextmenu',
    'pointercancel',
    'pointerdown',
    'pointerenter',
    'pointerleave',
    'pointerup',
];
/**
 * Delay reacting to touch so that we do not show the ripple for a swipe or
 * scroll interaction.
 */
const TOUCH_DELAY_MS = 150;
/**
 * Used to detect if HCM is active. Events do not process during HCM when the
 * ripple is not displayed.
 */
const FORCED_COLORS = window.matchMedia('(forced-colors: active)');
/**
 * A ripple component.
 */
class Ripple extends r$6 {
    constructor() {
        super(...arguments);
        /**
         * Disables the ripple.
         */
        this.disabled = false;
        this.hovered = false;
        this.pressed = false;
        this.rippleSize = '';
        this.rippleScale = '';
        this.initialSize = 0;
        this.state = State.INACTIVE;
        this.checkBoundsAfterContextMenu = false;
        this.attachableController = new AttachableController(this, this.onControlChange.bind(this));
    }
    get htmlFor() {
        return this.attachableController.htmlFor;
    }
    set htmlFor(htmlFor) {
        this.attachableController.htmlFor = htmlFor;
    }
    get control() {
        return this.attachableController.control;
    }
    set control(control) {
        this.attachableController.control = control;
    }
    attach(control) {
        this.attachableController.attach(control);
    }
    detach() {
        this.attachableController.detach();
    }
    connectedCallback() {
        super.connectedCallback();
        // Needed for VoiceOver, which will create a "group" if the element is a
        // sibling to other content.
        this.setAttribute('aria-hidden', 'true');
    }
    render() {
        const classes = {
            'hovered': this.hovered,
            'pressed': this.pressed,
        };
        return x$1 `<div class="surface ${e$1(classes)}"></div>`;
    }
    update(changedProps) {
        if (changedProps.has('disabled') && this.disabled) {
            this.hovered = false;
            this.pressed = false;
        }
        super.update(changedProps);
    }
    /**
     * TODO(b/269799771): make private
     * @private only public for slider
     */
    handlePointerenter(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.hovered = true;
    }
    /**
     * TODO(b/269799771): make private
     * @private only public for slider
     */
    handlePointerleave(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.hovered = false;
        // release a held mouse or pen press that moves outside the element
        if (this.state !== State.INACTIVE) {
            this.endPressAnimation();
        }
    }
    handlePointerup(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        if (this.state === State.HOLDING) {
            this.state = State.WAITING_FOR_CLICK;
            return;
        }
        if (this.state === State.TOUCH_DELAY) {
            this.state = State.WAITING_FOR_CLICK;
            this.startPressAnimation(this.rippleStartEvent);
            return;
        }
    }
    async handlePointerdown(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.rippleStartEvent = event;
        if (!this.isTouch(event)) {
            this.state = State.WAITING_FOR_CLICK;
            this.startPressAnimation(event);
            return;
        }
        // after a longpress contextmenu event, an extra `pointerdown` can be
        // dispatched to the pressed element. Check that the down is within
        // bounds of the element in this case.
        if (this.checkBoundsAfterContextMenu && !this.inBounds(event)) {
            return;
        }
        this.checkBoundsAfterContextMenu = false;
        // Wait for a hold after touch delay
        this.state = State.TOUCH_DELAY;
        await new Promise((resolve) => {
            setTimeout(resolve, TOUCH_DELAY_MS);
        });
        if (this.state !== State.TOUCH_DELAY) {
            return;
        }
        this.state = State.HOLDING;
        this.startPressAnimation(event);
    }
    handleClick() {
        // Click is a MouseEvent in Firefox and Safari, so we cannot use
        // `shouldReactToEvent`
        if (this.disabled) {
            return;
        }
        if (this.state === State.WAITING_FOR_CLICK) {
            this.endPressAnimation();
            return;
        }
        if (this.state === State.INACTIVE) {
            // keyboard synthesized click event
            this.startPressAnimation();
            this.endPressAnimation();
        }
    }
    handlePointercancel(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.endPressAnimation();
    }
    handleContextmenu() {
        if (this.disabled) {
            return;
        }
        this.checkBoundsAfterContextMenu = true;
        this.endPressAnimation();
    }
    determineRippleSize() {
        const { height, width } = this.getBoundingClientRect();
        const maxDim = Math.max(height, width);
        const softEdgeSize = Math.max(SOFT_EDGE_CONTAINER_RATIO * maxDim, SOFT_EDGE_MINIMUM_SIZE);
        const initialSize = Math.floor(maxDim * INITIAL_ORIGIN_SCALE);
        const hypotenuse = Math.sqrt(width ** 2 + height ** 2);
        const maxRadius = hypotenuse + PADDING;
        this.initialSize = initialSize;
        this.rippleScale = `${(maxRadius + softEdgeSize) / initialSize}`;
        this.rippleSize = `${initialSize}px`;
    }
    getNormalizedPointerEventCoords(pointerEvent) {
        const { scrollX, scrollY } = window;
        const { left, top } = this.getBoundingClientRect();
        const documentX = scrollX + left;
        const documentY = scrollY + top;
        const { pageX, pageY } = pointerEvent;
        return { x: pageX - documentX, y: pageY - documentY };
    }
    getTranslationCoordinates(positionEvent) {
        const { height, width } = this.getBoundingClientRect();
        // end in the center
        const endPoint = {
            x: (width - this.initialSize) / 2,
            y: (height - this.initialSize) / 2,
        };
        let startPoint;
        if (positionEvent instanceof PointerEvent) {
            startPoint = this.getNormalizedPointerEventCoords(positionEvent);
        }
        else {
            startPoint = {
                x: width / 2,
                y: height / 2,
            };
        }
        // center around start point
        startPoint = {
            x: startPoint.x - this.initialSize / 2,
            y: startPoint.y - this.initialSize / 2,
        };
        return { startPoint, endPoint };
    }
    startPressAnimation(positionEvent) {
        if (!this.mdRoot) {
            return;
        }
        this.pressed = true;
        this.growAnimation?.cancel();
        this.determineRippleSize();
        const { startPoint, endPoint } = this.getTranslationCoordinates(positionEvent);
        const translateStart = `${startPoint.x}px, ${startPoint.y}px`;
        const translateEnd = `${endPoint.x}px, ${endPoint.y}px`;
        this.growAnimation = this.mdRoot.animate({
            top: [0, 0],
            left: [0, 0],
            height: [this.rippleSize, this.rippleSize],
            width: [this.rippleSize, this.rippleSize],
            transform: [
                `translate(${translateStart}) scale(1)`,
                `translate(${translateEnd}) scale(${this.rippleScale})`,
            ],
        }, {
            pseudoElement: PRESS_PSEUDO,
            duration: PRESS_GROW_MS,
            easing: EASING.STANDARD,
            fill: ANIMATION_FILL,
        });
    }
    async endPressAnimation() {
        this.rippleStartEvent = undefined;
        this.state = State.INACTIVE;
        const animation = this.growAnimation;
        let pressAnimationPlayState = Infinity;
        if (typeof animation?.currentTime === 'number') {
            pressAnimationPlayState = animation.currentTime;
        }
        else if (animation?.currentTime) {
            pressAnimationPlayState = animation.currentTime.to('ms').value;
        }
        if (pressAnimationPlayState >= MINIMUM_PRESS_MS) {
            this.pressed = false;
            return;
        }
        await new Promise((resolve) => {
            setTimeout(resolve, MINIMUM_PRESS_MS - pressAnimationPlayState);
        });
        if (this.growAnimation !== animation) {
            // A new press animation was started. The old animation was canceled and
            // should not finish the pressed state.
            return;
        }
        this.pressed = false;
    }
    /**
     * Returns `true` if
     *  - the ripple element is enabled
     *  - the pointer is primary for the input type
     *  - the pointer is the pointer that started the interaction, or will start
     * the interaction
     *  - the pointer is a touch, or the pointer state has the primary button
     * held, or the pointer is hovering
     */
    shouldReactToEvent(event) {
        if (this.disabled || !event.isPrimary) {
            return false;
        }
        if (this.rippleStartEvent &&
            this.rippleStartEvent.pointerId !== event.pointerId) {
            return false;
        }
        if (event.type === 'pointerenter' || event.type === 'pointerleave') {
            return !this.isTouch(event);
        }
        const isPrimaryButton = event.buttons === 1;
        return this.isTouch(event) || isPrimaryButton;
    }
    /**
     * Check if the event is within the bounds of the element.
     *
     * This is only needed for the "stuck" contextmenu longpress on Chrome.
     */
    inBounds({ x, y }) {
        const { top, left, bottom, right } = this.getBoundingClientRect();
        return x >= left && x <= right && y >= top && y <= bottom;
    }
    isTouch({ pointerType }) {
        return pointerType === 'touch';
    }
    /** @private */
    async handleEvent(event) {
        if (FORCED_COLORS?.matches) {
            // Skip event logic since the ripple is `display: none`.
            return;
        }
        switch (event.type) {
            case 'click':
                this.handleClick();
                break;
            case 'contextmenu':
                this.handleContextmenu();
                break;
            case 'pointercancel':
                this.handlePointercancel(event);
                break;
            case 'pointerdown':
                await this.handlePointerdown(event);
                break;
            case 'pointerenter':
                this.handlePointerenter(event);
                break;
            case 'pointerleave':
                this.handlePointerleave(event);
                break;
            case 'pointerup':
                this.handlePointerup(event);
                break;
        }
    }
    onControlChange(prev, next) {
        for (const event of EVENTS) {
            prev?.removeEventListener(event, this);
            next?.addEventListener(event, this);
        }
    }
}
__decorate([
    n$j({ type: Boolean, reflect: true })
], Ripple.prototype, "disabled", void 0);
__decorate([
    r$4()
], Ripple.prototype, "hovered", void 0);
__decorate([
    r$4()
], Ripple.prototype, "pressed", void 0);
__decorate([
    e$d('.surface')
], Ripple.prototype, "mdRoot", void 0);

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$e = i$c `:host{display:flex;margin:auto;pointer-events:none}:host([disabled]){display:none}@media(forced-colors: active){:host{display:none}}:host,.surface{border-radius:inherit;position:absolute;inset:0;overflow:hidden}.surface{-webkit-tap-highlight-color:rgba(0,0,0,0)}.surface::before,.surface::after{content:"";opacity:0;position:absolute}.surface::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));inset:0;transition:opacity 15ms linear,background-color 15ms linear}.surface::after{background:radial-gradient(closest-side, var(--md-ripple-pressed-color, var(--md-sys-color-on-surface, #1d1b20)) max(100% - 70px, 65%), transparent 100%);transform-origin:center center;transition:opacity 375ms linear}.hovered::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-ripple-hover-opacity, 0.08)}.pressed::after{opacity:var(--md-ripple-pressed-opacity, 0.12);transition-duration:105ms}
`;

class MdRipple extends Ripple {
}
MdRipple.styles = [styles$e];

/**
 * @summary Buttons help people take action, such as sending an email, sharing a
 * document, or liking a comment.
 *
 * @description
 * __Emphasis:__ Low emphasis – For optional or supplementary actions with the
 * least amount of prominence
 *
 * __Rationale:__ Text buttons have less visual prominence, so should be used
 * for low emphasis actions, such as an alternative option.
 *
 * __Example usages:__
 * - Learn more
 * - View all
 * - Change account
 * - Turn on
 *
 * @final
 * @suppress {visibility}
 */
class MdTextButton extends Button {
}
MdTextButton.scopedElements = {
    'md-focus-ring': MdFocusRing,
    'md-ripple': MdRipple,
};
MdTextButton.styles = [styles$h, styles$g];

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Activates the first non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items from which to activate the
 *     first item.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 */
function activateFirstItem(items, isActivatable = (isItemNotDisabled)) {
    // NOTE: These selector functions are static and not on the instance such
    // that multiple operations can be chained and we do not have to re-query
    // the DOM
    const firstItem = getFirstActivatableItem(items, isActivatable);
    if (firstItem) {
        firstItem.tabIndex = 0;
        firstItem.focus();
    }
    return firstItem;
}
/**
 * Activates the last non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items from which to activate the
 *     last item.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @nocollapse
 */
function activateLastItem(items, isActivatable = (isItemNotDisabled)) {
    const lastItem = getLastActivatableItem(items, isActivatable);
    if (lastItem) {
        lastItem.tabIndex = 0;
        lastItem.focus();
    }
    return lastItem;
}
/**
 * Retrieves the first activated item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @return A record of the first activated item including the item and the
 *     index of the item or `null` if none are activated.
 * @nocollapse
 */
function getActiveItem(items, isActivatable = (isItemNotDisabled)) {
    for (let i = 0; i < items.length; i++) {
        const item = items[i];
        if (item.tabIndex === 0 && isActivatable(item)) {
            return {
                item,
                index: i,
            };
        }
    }
    return null;
}
/**
 * Retrieves the first non-disabled item of a given array of items. This
 * the first item that is not disabled.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @return The first activatable item or `null` if none are activatable.
 * @nocollapse
 */
function getFirstActivatableItem(items, isActivatable = (isItemNotDisabled)) {
    for (const item of items) {
        if (isActivatable(item)) {
            return item;
        }
    }
    return null;
}
/**
 * Retrieves the last non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @return The last activatable item or `null` if none are activatable.
 * @nocollapse
 */
function getLastActivatableItem(items, isActivatable = (isItemNotDisabled)) {
    for (let i = items.length - 1; i >= 0; i--) {
        const item = items[i];
        if (isActivatable(item)) {
            return item;
        }
    }
    return null;
}
/**
 * Retrieves the next non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param index {{index: number}} The index to search from.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @param wrap If true, then the next item at the end of the list is the first
 *     item. Defaults to true.
 * @return The next activatable item or `null` if none are activatable.
 */
function getNextItem(items, index, isActivatable = (isItemNotDisabled), wrap = true) {
    for (let i = 1; i < items.length; i++) {
        const nextIndex = (i + index) % items.length;
        if (nextIndex < index && !wrap) {
            // Return if the index loops back to the beginning and not wrapping.
            return null;
        }
        const item = items[nextIndex];
        if (isActivatable(item)) {
            return item;
        }
    }
    return items[index] ? items[index] : null;
}
/**
 * Retrieves the previous non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param index {{index: number}} The index to search from.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @param wrap If true, then the previous item at the beginning of the list is
 *     the last item. Defaults to true.
 * @return The previous activatable item or `null` if none are activatable.
 */
function getPrevItem(items, index, isActivatable = (isItemNotDisabled), wrap = true) {
    for (let i = 1; i < items.length; i++) {
        const prevIndex = (index - i + items.length) % items.length;
        if (prevIndex > index && !wrap) {
            // Return if the index loops back to the end and not wrapping.
            return null;
        }
        const item = items[prevIndex];
        if (isActivatable(item)) {
            return item;
        }
    }
    return items[index] ? items[index] : null;
}
/**
 * Activates the next item and focuses it. If nothing is currently activated,
 * activates the first item.
 */
function activateNextItem(items, activeItemRecord, isActivatable = (isItemNotDisabled), wrap = true) {
    if (activeItemRecord) {
        const next = getNextItem(items, activeItemRecord.index, isActivatable, wrap);
        if (next) {
            next.tabIndex = 0;
            next.focus();
        }
        return next;
    }
    else {
        return activateFirstItem(items, isActivatable);
    }
}
/**
 * Activates the previous item and focuses it. If nothing is currently
 * activated, activates the last item.
 */
function activatePreviousItem(items, activeItemRecord, isActivatable = (isItemNotDisabled), wrap = true) {
    if (activeItemRecord) {
        const prev = getPrevItem(items, activeItemRecord.index, isActivatable, wrap);
        if (prev) {
            prev.tabIndex = 0;
            prev.focus();
        }
        return prev;
    }
    else {
        return activateLastItem(items, isActivatable);
    }
}
/**
 * Creates an event that requests the menu to set `tabindex=0` on the item and
 * focus it. We use this pattern because List keeps track of what element is
 * active in the List by maintaining tabindex. We do not want list items
 * to set tabindex on themselves or focus themselves so that we can organize all
 * that logic in the parent List and Menus, and list item stays as dumb as
 * possible.
 */
function createRequestActivationEvent() {
    return new Event('request-activation', { bubbles: true, composed: true });
}
/**
 * The default `isActivatable` function, which checks if an item is not
 * disabled.
 *
 * @param item The item to check.
 * @return true if `item.disabled` is `false.
 */
function isItemNotDisabled(item) {
    return !item.disabled;
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// TODO: move this file to List and make List use this
/**
 * Default keys that trigger navigation.
 */
// tslint:disable:enforce-name-casing Following Enum style
const NavigableKeys = {
    ArrowDown: 'ArrowDown',
    ArrowLeft: 'ArrowLeft',
    ArrowUp: 'ArrowUp',
    ArrowRight: 'ArrowRight',
    Home: 'Home',
    End: 'End',
};
/**
 * A controller that handles list keyboard navigation and item management.
 */
class ListController {
    constructor(config) {
        /**
         * Handles keyboard navigation. Should be bound to the node that will act as
         * the List.
         */
        this.handleKeydown = (event) => {
            const key = event.key;
            if (event.defaultPrevented || !this.isNavigableKey(key)) {
                return;
            }
            // do not use this.items directly in upcoming calculations so we don't
            // re-query the DOM unnecessarily
            const items = this.items;
            if (!items.length) {
                return;
            }
            const activeItemRecord = getActiveItem(items, this.isActivatable);
            event.preventDefault();
            const isRtl = this.isRtl();
            const inlinePrevious = isRtl
                ? NavigableKeys.ArrowRight
                : NavigableKeys.ArrowLeft;
            const inlineNext = isRtl
                ? NavigableKeys.ArrowLeft
                : NavigableKeys.ArrowRight;
            let nextActiveItem = null;
            switch (key) {
                // Activate the next item
                case NavigableKeys.ArrowDown:
                case inlineNext:
                    nextActiveItem = activateNextItem(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
                    break;
                // Activate the previous item
                case NavigableKeys.ArrowUp:
                case inlinePrevious:
                    nextActiveItem = activatePreviousItem(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
                    break;
                // Activate the first item
                case NavigableKeys.Home:
                    nextActiveItem = activateFirstItem(items, this.isActivatable);
                    break;
                // Activate the last item
                case NavigableKeys.End:
                    nextActiveItem = activateLastItem(items, this.isActivatable);
                    break;
            }
            if (nextActiveItem &&
                activeItemRecord &&
                activeItemRecord.item !== nextActiveItem) {
                // If a new item was activated, remove the tabindex of the previous
                // activated item.
                activeItemRecord.item.tabIndex = -1;
            }
        };
        /**
         * Listener to be bound to the `deactivate-items` item event.
         */
        this.onDeactivateItems = () => {
            const items = this.items;
            for (const item of items) {
                this.deactivateItem(item);
            }
        };
        /**
         * Listener to be bound to the `request-activation` item event..
         */
        this.onRequestActivation = (event) => {
            this.onDeactivateItems();
            const target = event.target;
            this.activateItem(target);
            target.focus();
        };
        /**
         * Listener to be bound to the `slotchange` event for the slot that renders
         * the items.
         */
        this.onSlotchange = () => {
            const items = this.items;
            // Whether we have encountered an item that has been activated
            let encounteredActivated = false;
            for (const item of items) {
                const isActivated = !item.disabled && item.tabIndex > -1;
                if (isActivated && !encounteredActivated) {
                    encounteredActivated = true;
                    item.tabIndex = 0;
                    continue;
                }
                // Deactivate the rest including disabled
                item.tabIndex = -1;
            }
            if (encounteredActivated) {
                return;
            }
            const firstActivatableItem = getFirstActivatableItem(items, this.isActivatable);
            if (!firstActivatableItem) {
                return;
            }
            firstActivatableItem.tabIndex = 0;
        };
        const { isItem, getPossibleItems, isRtl, deactivateItem, activateItem, isNavigableKey, isActivatable, wrapNavigation, } = config;
        this.isItem = isItem;
        this.getPossibleItems = getPossibleItems;
        this.isRtl = isRtl;
        this.deactivateItem = deactivateItem;
        this.activateItem = activateItem;
        this.isNavigableKey = isNavigableKey;
        this.isActivatable = isActivatable;
        this.wrapNavigation = wrapNavigation ?? (() => true);
    }
    /**
     * The items being managed by the list. Additionally, attempts to see if the
     * object has a sub-item in the `.item` property.
     */
    get items() {
        const maybeItems = this.getPossibleItems();
        const items = [];
        for (const itemOrParent of maybeItems) {
            const isItem = this.isItem(itemOrParent);
            // if the item is a list item, add it to the list of items
            if (isItem) {
                items.push(itemOrParent);
                continue;
            }
            // If the item exposes an `item` property check if it is a list item.
            const subItem = itemOrParent.item;
            if (subItem && this.isItem(subItem)) {
                items.push(subItem);
            }
        }
        return items;
    }
    /**
     * Activates the next item in the list. If at the end of the list, the first
     * item will be activated.
     *
     * @return The activated list item or `null` if there are no items.
     */
    activateNextItem() {
        const items = this.items;
        const activeItemRecord = getActiveItem(items, this.isActivatable);
        if (activeItemRecord) {
            activeItemRecord.item.tabIndex = -1;
        }
        return activateNextItem(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
    }
    /**
     * Activates the previous item in the list. If at the start of the list, the
     * last item will be activated.
     *
     * @return The activated list item or `null` if there are no items.
     */
    activatePreviousItem() {
        const items = this.items;
        const activeItemRecord = getActiveItem(items, this.isActivatable);
        if (activeItemRecord) {
            activeItemRecord.item.tabIndex = -1;
        }
        return activatePreviousItem(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
    }
}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const NAVIGABLE_KEY_SET = new Set(Object.values(NavigableKeys));
// tslint:disable-next-line:enforce-comments-on-exported-symbols
class List extends r$6 {
    /** @export */
    get items() {
        return this.listController.items;
    }
    constructor() {
        super();
        this.listController = new ListController({
            isItem: (item) => item.hasAttribute('md-list-item'),
            getPossibleItems: () => this.slotItems,
            isRtl: () => getComputedStyle(this).direction === 'rtl',
            deactivateItem: (item) => {
                item.tabIndex = -1;
            },
            activateItem: (item) => {
                item.tabIndex = 0;
            },
            isNavigableKey: (key) => NAVIGABLE_KEY_SET.has(key),
            isActivatable: (item) => !item.disabled && item.type !== 'text',
        });
        this.internals = 
        // Cast needed for closure
        this.attachInternals();
        {
            this.internals.role = 'list';
            this.addEventListener('keydown', this.listController.handleKeydown);
        }
    }
    render() {
        return x$1 `
      <slot
        @deactivate-items=${this.listController.onDeactivateItems}
        @request-activation=${this.listController.onRequestActivation}
        @slotchange=${this.listController.onSlotchange}>
      </slot>
    `;
    }
    /**
     * Activates the next item in the list. If at the end of the list, the first
     * item will be activated.
     *
     * @return The activated list item or `null` if there are no items.
     */
    activateNextItem() {
        return this.listController.activateNextItem();
    }
    /**
     * Activates the previous item in the list. If at the start of the list, the
     * last item will be activated.
     *
     * @return The activated list item or `null` if there are no items.
     */
    activatePreviousItem() {
        return this.listController.activatePreviousItem();
    }
}
__decorate([
    o$j({ flatten: true })
], List.prototype, "slotItems", void 0);

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$d = i$c `:host{background:var(--md-list-container-color, var(--md-sys-color-surface, #fef7ff));color:unset;display:flex;flex-direction:column;outline:none;padding:8px 0;position:relative}
`;

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @summary Lists are continuous, vertical indexes of text or images.
 *
 * @description
 * Lists consist of one or more list items, and can contain actions represented
 * by icons and text. List items come in three sizes: one-line, two-line, and
 * three-line.
 *
 * __Takeaways:__
 *
 * - Lists should be sorted in logical ways that make content easy to scan, such
 *   as alphabetical, numerical, chronological, or by user preference.
 * - Lists present content in a way that makes it easy to identify a specific
 *   item in a collection and act on it.
 * - Lists should present icons, text, and actions in a consistent format.
 *
 * @final
 * @suppress {visibility}
 */
class MdList extends List {
}
MdList.styles = [styles$d];

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * An item layout component.
 */
class Item extends r$6 {
    constructor() {
        super(...arguments);
        /**
         * Only needed for SSR.
         *
         * Add this attribute when an item has two lines to avoid a Flash Of Unstyled
         * Content. This attribute is not needed for single line items or items with
         * three or more lines.
         */
        this.multiline = false;
    }
    render() {
        return x$1 `
      <slot name="container"></slot>
      <slot class="non-text" name="start"></slot>
      <div class="text">
        <slot name="overline" @slotchange=${this.handleTextSlotChange}></slot>
        <slot
          class="default-slot"
          @slotchange=${this.handleTextSlotChange}></slot>
        <slot name="headline" @slotchange=${this.handleTextSlotChange}></slot>
        <slot
          name="supporting-text"
          @slotchange=${this.handleTextSlotChange}></slot>
      </div>
      <slot class="non-text" name="trailing-supporting-text"></slot>
      <slot class="non-text" name="end"></slot>
    `;
    }
    handleTextSlotChange() {
        // Check if there's more than one text slot with content. If so, the item is
        // multiline, which has a different min-height than single line items.
        let isMultiline = false;
        let slotsWithContent = 0;
        for (const slot of this.textSlots) {
            if (slotHasContent(slot)) {
                slotsWithContent += 1;
            }
            if (slotsWithContent > 1) {
                isMultiline = true;
                break;
            }
        }
        this.multiline = isMultiline;
    }
}
__decorate([
    n$j({ type: Boolean, reflect: true })
], Item.prototype, "multiline", void 0);
__decorate([
    r$3('.text slot')
], Item.prototype, "textSlots", void 0);
function slotHasContent(slot) {
    for (const node of slot.assignedNodes({ flatten: true })) {
        // Assume there's content if there's an element slotted in
        const isElement = node.nodeType === Node.ELEMENT_NODE;
        // If there's only text nodes for the default slot, check if there's
        // non-whitespace.
        const isTextWithContent = node.nodeType === Node.TEXT_NODE && node.textContent?.match(/\S/);
        if (isElement || isTextWithContent) {
            return true;
        }
    }
    return false;
}

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$c = i$c `:host{color:var(--md-sys-color-on-surface, #1d1b20);font-family:var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-body-large-size, 1rem);font-weight:var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400));line-height:var(--md-sys-typescale-body-large-line-height, 1.5rem);align-items:center;box-sizing:border-box;display:flex;gap:16px;min-height:56px;overflow:hidden;padding:12px 16px;position:relative;text-overflow:ellipsis}:host([multiline]){min-height:72px}[name=overline]{color:var(--md-sys-color-on-surface-variant, #49454f);font-family:var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-label-small-size, 0.6875rem);font-weight:var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500));line-height:var(--md-sys-typescale-label-small-line-height, 1rem)}[name=supporting-text]{color:var(--md-sys-color-on-surface-variant, #49454f);font-family:var(--md-sys-typescale-body-medium-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-body-medium-size, 0.875rem);font-weight:var(--md-sys-typescale-body-medium-weight, var(--md-ref-typeface-weight-regular, 400));line-height:var(--md-sys-typescale-body-medium-line-height, 1.25rem)}[name=trailing-supporting-text]{color:var(--md-sys-color-on-surface-variant, #49454f);font-family:var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-label-small-size, 0.6875rem);font-weight:var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500));line-height:var(--md-sys-typescale-label-small-line-height, 1rem)}[name=container]::slotted(*){inset:0;position:absolute}.default-slot{display:inline}.default-slot,.text ::slotted(*){overflow:hidden;text-overflow:ellipsis}.text{display:flex;flex:1;flex-direction:column;overflow:hidden}
`;

class MdItem extends Item {
}
MdItem.styles = [styles$c];

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const a$1=Symbol.for(""),o$6=t=>{if(t?.r===a$1)return t?._$litStatic$},i$1=(t,...r)=>({_$litStatic$:r.reduce(((r,e,a)=>r+(t=>{if(void 0!==t._$litStatic$)return t._$litStatic$;throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`)})(e)+t[a+1]),t[0]),r:a$1}),l$7=new Map,n$6=t=>(r,...e)=>{const a=e.length;let s,i;const n=[],u=[];let c,$=0,f=!1;for(;$<a;){for(c=r[$];$<a&&void 0!==(i=e[$],s=o$6(i));)c+=s+r[++$],f=!0;$!==a&&u.push(i),n.push(c),$++;}if($===a&&n.push(r[a]),f){const t=n.join("$$lit$$");void 0===(r=l$7.get(t))&&(n.raw=n,l$7.set(t,r=n)),e=u;}return t(r,...e)},u$1=n$6(x$2);

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Separate variable needed for closure.
const listItemBaseClass = mixinDelegatesAria(ScopedElementsMixin(r$6));
/**
 * @fires request-activation {Event} Requests the list to set `tabindex=0` on
 * the item and focus it. --bubbles --composed
 */
class ListItemEl extends listItemBaseClass {
    constructor() {
        super(...arguments);
        /**
         * Disables the item and makes it non-selectable and non-interactive.
         */
        this.disabled = false;
        /**
         * Sets the behavior of the list item, defaults to "text". Change to "link" or
         * "button" for interactive items.
         */
        this.type = 'text';
        /**
         * READONLY. Sets the `md-list-item` attribute on the element.
         */
        this.isListItem = true;
        /**
         * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.
         */
        this.href = '';
        /**
         * Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is
         * set.
         */
        this.target = '';
        /** Highlight the item */
        this.activated = false;
    }
    get isDisabled() {
        return this.disabled && this.type !== 'link';
    }
    willUpdate(changed) {
        if (this.href) {
            this.type = 'link';
        }
        super.willUpdate(changed);
    }
    render() {
        return this.renderListItem(x$1 `
      <md-item>
        <div slot="container">
          ${this.renderRipple()} ${this.renderFocusRing()}
        </div>
        <slot name="start" slot="start"></slot>
        <slot name="end" slot="end"></slot>
        ${this.renderBody()}
      </md-item>
    `);
    }
    /**
     * Renders the root list item.
     *
     * @param content the child content of the list item.
     */
    renderListItem(content) {
        const isAnchor = this.type === 'link';
        let tag;
        switch (this.type) {
            case 'link':
                tag = i$1 `a`;
                break;
            case 'button':
                tag = i$1 `button`;
                break;
            default:
            case 'text':
                tag = i$1 `li`;
                break;
        }
        const isInteractive = this.type !== 'text';
        // TODO(b/265339866): announce "button"/"link" inside of a list item. Until
        // then all are "listitem" roles for correct announcement.
        const target = isAnchor && !!this.target ? this.target : E$1;
        return u$1 `
      <${tag}
        id="item"
        tabindex="${this.isDisabled || !isInteractive ? -1 : 0}"
        ?disabled=${this.isDisabled}
        role="listitem"
        aria-selected=${this.ariaSelected || E$1}
        aria-checked=${this.ariaChecked || E$1}
        aria-expanded=${this.ariaExpanded || E$1}
        aria-haspopup=${this.ariaHasPopup || E$1}
        class="list-item ${e$1(this.getRenderClasses())}"
        href=${this.href || E$1}
        target=${target}
        @focus=${this.onFocus}
      >${content}</${tag}>
    `;
    }
    /**
     * Handles rendering of the ripple element.
     */
    renderRipple() {
        if (this.type === 'text') {
            return E$1;
        }
        return x$1 ` <md-ripple
      part="ripple"
      for="item"
      ?disabled=${this.isDisabled}></md-ripple>`;
    }
    /**
     * Handles rendering of the focus ring.
     */
    renderFocusRing() {
        if (this.type === 'text') {
            return E$1;
        }
        return x$1 ` <md-focus-ring
      @visibility-changed=${this.onFocusRingVisibilityChanged}
      part="focus-ring"
      for="item"
      inward></md-focus-ring>`;
    }
    onFocusRingVisibilityChanged(e) { }
    /**
     * Classes applied to the list item root.
     */
    getRenderClasses() {
        return { 'disabled': this.isDisabled, 'activated': this.activated, };
    }
    /**
     * Handles rendering the headline and supporting text.
     */
    renderBody() {
        return x$1 `
      <slot></slot>
      <slot name="overline" slot="overline"></slot>
      <slot name="headline" slot="headline"></slot>
      <slot name="supporting-text" slot="supporting-text"></slot>
      <slot
        name="trailing-supporting-text"
        slot="trailing-supporting-text"></slot>
    `;
    }
    onFocus() {
        if (this.tabIndex !== -1) {
            return;
        }
        // Handles the case where the user clicks on the element and then tabs.
        this.dispatchEvent(createRequestActivationEvent());
    }
    focus() {
        // TODO(b/300334509): needed for some cases where delegatesFocus doesn't
        // work programmatically like in FF and select-option
        this.listItemRoot?.focus();
    }
}
/** @nocollapse */
ListItemEl.shadowRootOptions = {
    ...r$6.shadowRootOptions,
    delegatesFocus: true,
};
ListItemEl.scopedElements = {
    'md-focus-ring': MdFocusRing,
    'md-item': MdItem,
    'md-ripple': MdRipple,
};
__decorate([
    n$j({ type: Boolean, reflect: true })
], ListItemEl.prototype, "disabled", void 0);
__decorate([
    n$j({ reflect: true })
], ListItemEl.prototype, "type", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'md-list-item', reflect: true })
], ListItemEl.prototype, "isListItem", void 0);
__decorate([
    n$j()
], ListItemEl.prototype, "href", void 0);
__decorate([
    n$j()
], ListItemEl.prototype, "target", void 0);
__decorate([
    n$j({ type: Boolean })
], ListItemEl.prototype, "activated", void 0);
__decorate([
    e$d('.list-item')
], ListItemEl.prototype, "listItemRoot", void 0);

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$b = i$c `:host{display:flex;-webkit-tap-highlight-color:rgba(0,0,0,0);--md-ripple-hover-color: var(--md-list-item-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-list-item-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-list-item-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-list-item-pressed-state-layer-opacity, 0.12)}:host(:is([type=button]:not([disabled]),[type=link])){cursor:pointer}md-focus-ring{z-index:1;--md-focus-ring-shape: 8px}a,button,li{background:none;border:none;cursor:inherit;padding:0;margin:0;text-align:unset;text-decoration:none}.list-item{border-radius:inherit;display:flex;flex:1;max-width:inherit;min-width:inherit;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0);width:100%}.list-item.interactive{cursor:pointer}.list-item.disabled{opacity:var(--md-list-item-disabled-opacity, 0.3);pointer-events:none}.list-item.activated:not(.disabled){background-color:var(--md-list-item-activated-background, rgba(98, 0, 238, 0.2196078431))}[slot=container]{pointer-events:none}md-ripple{border-radius:inherit}md-item{border-radius:inherit;flex:1;height:100%;color:var(--md-list-item-label-text-color, var(--md-sys-color-on-surface, #1d1b20));font-family:var(--md-list-item-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-list-item-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));line-height:var(--md-list-item-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));font-weight:var(--md-list-item-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));min-height:var(--md-list-item-one-line-container-height, 56px);padding-top:var(--md-list-item-top-space, 12px);padding-bottom:var(--md-list-item-bottom-space, 12px);padding-inline-start:var(--md-list-item-leading-space, 16px);padding-inline-end:var(--md-list-item-trailing-space, 16px)}md-item[multiline]{min-height:var(--md-list-item-two-line-container-height, 72px)}[slot=supporting-text]{color:var(--md-list-item-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));font-family:var(--md-list-item-supporting-text-font, var(--md-sys-typescale-body-medium-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-list-item-supporting-text-size, var(--md-sys-typescale-body-medium-size, 0.875rem));line-height:var(--md-list-item-supporting-text-line-height, var(--md-sys-typescale-body-medium-line-height, 1.25rem));font-weight:var(--md-list-item-supporting-text-weight, var(--md-sys-typescale-body-medium-weight, var(--md-ref-typeface-weight-regular, 400)))}[slot=trailing-supporting-text]{color:var(--md-list-item-trailing-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));font-family:var(--md-list-item-trailing-supporting-text-font, var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-list-item-trailing-supporting-text-size, var(--md-sys-typescale-label-small-size, 0.6875rem));line-height:var(--md-list-item-trailing-supporting-text-line-height, var(--md-sys-typescale-label-small-line-height, 1rem));font-weight:var(--md-list-item-trailing-supporting-text-weight, var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500)))}:is([slot=start],[slot=end])::slotted(*){fill:currentColor}[slot=start]{color:var(--md-list-item-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f))}[slot=end]{color:var(--md-list-item-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f))}@media(forced-colors: active){.disabled slot{color:GrayText}.list-item.disabled{color:GrayText;opacity:1}}
`;

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @summary
 * Lists are continuous, vertical indexes of text or images. Items are placed
 * inside the list.
 *
 * @description
 * Lists consist of one or more list items, and can contain actions represented
 * by icons and text. List items come in three sizes: one-line, two-line, and
 * three-line.
 *
 * __Takeaways:__
 *
 * - Lists should be sorted in logical ways that make content easy to scan, such
 *   as alphabetical, numerical, chronological, or by user preference.
 * - Lists present content in a way that makes it easy to identify a specific
 *   item in a collection and act on it.
 * - Lists should present icons, text, and actions in a consistent format.
 *
 * Acceptable slot child variants are:
 *
 * - `img[slot=end]`
 * - `img[slot=start]`
 *
 *  @example
 * ```html
 * <md-list-item
 *     headline="User Name"
 *     supportingText="user@name.com">
 *   <md-icon slot="start">account_circle</md-icon>
 *   <md-icon slot="end">check</md-icon>
 * </md-list-item>
 * ```
 *
 * @example
 *
 * @final
 * @suppress {visibility}
 */
class MdListItem extends ListItemEl {
}
MdListItem.styles = [styles$b];

/**
 * @deprecated
 * @param edit
 * @returns a custom event `oscd-edit`
 */
function newEditEventV1(edit) {
    return new CustomEvent('oscd-edit', {
        composed: true,
        bubbles: true,
        detail: edit,
    });
}

function isComplex$1(edit) {
    return edit instanceof Array;
}
function isSetTextContent(edit) {
    return (edit.element !== undefined &&
        edit.textContent !== undefined);
}
function isRemove$1(edit) {
    return (edit.parent === undefined && edit.node !== undefined);
}
function isSetAttributes(edit) {
    return (edit.element !== undefined &&
        edit.attributes !== undefined &&
        edit.attributesNS !== undefined);
}
function isInsert$1(edit) {
    return (edit.parent !== undefined &&
        edit.node !== undefined &&
        edit.reference !== undefined);
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isEditV2(edit) {
    if (isComplex$1(edit))
        return !edit.some((e) => !isEditV2(e));
    return (isSetAttributes(edit) ||
        isSetTextContent(edit) ||
        isInsert$1(edit) ||
        isRemove$1(edit));
}

function isComplex(edit) {
    return edit instanceof Array;
}
function isInsert(edit) {
    return edit.parent !== undefined;
}
function isNamespaced(value) {
    return value !== null && typeof value !== "string";
}
function isUpdate(edit) {
    return (edit.element !== undefined &&
        edit.attributes !== undefined);
}
function isRemove(edit) {
    return (edit.parent === undefined && edit.node !== undefined);
}

function convertUpdate(edit) {
    const attributes = {};
    const attributesNS = {};
    Object.entries(edit.attributes).forEach(([key, value]) => {
        if (isNamespaced(value)) {
            const ns = value.namespaceURI;
            if (!ns)
                return;
            if (!attributesNS[ns]) {
                attributesNS[ns] = {};
            }
            attributesNS[ns][key] = value.value;
        }
        else
            attributes[key] = value;
    });
    return { element: edit.element, attributes, attributesNS };
}
function convertEdit(edit) {
    if (isRemove(edit))
        return edit;
    if (isInsert(edit))
        return edit;
    if (isUpdate(edit))
        return convertUpdate(edit);
    if (isComplex(edit))
        return edit.map(convertEdit);
    return [];
}

class PreconditionFailure extends Error {
    constructor(interruptExecution = false) {
        super();
        this.interruptExecution = interruptExecution;
        this.footprint = PreconditionFailure.SharedFootPrint;
    }
    static isFailure(err) {
        return err != null && err.footprint === PreconditionFailure.SharedFootPrint;
    }
}
PreconditionFailure.SharedFootPrint = Symbol.for('fast-check/PreconditionFailure');

class Nil {
    [Symbol.iterator]() {
        return this;
    }
    next(value) {
        return { value, done: true };
    }
}
Nil.nil = new Nil();
function nilHelper() {
    return Nil.nil;
}
function* mapHelper(g, f) {
    for (const v of g) {
        yield f(v);
    }
}
function* flatMapHelper(g, f) {
    for (const v of g) {
        yield* f(v);
    }
}
function* filterHelper(g, f) {
    for (const v of g) {
        if (f(v)) {
            yield v;
        }
    }
}
function* takeNHelper(g, n) {
    for (let i = 0; i < n; ++i) {
        const cur = g.next();
        if (cur.done) {
            break;
        }
        yield cur.value;
    }
}
function* takeWhileHelper(g, f) {
    let cur = g.next();
    while (!cur.done && f(cur.value)) {
        yield cur.value;
        cur = g.next();
    }
}
function* joinHelper(g, others) {
    for (let cur = g.next(); !cur.done; cur = g.next()) {
        yield cur.value;
    }
    for (const s of others) {
        for (let cur = s.next(); !cur.done; cur = s.next()) {
            yield cur.value;
        }
    }
}

const safeSymbolIterator = Symbol.iterator;
class Stream {
    static nil() {
        return new Stream(nilHelper());
    }
    static of(...elements) {
        return new Stream(elements[safeSymbolIterator]());
    }
    constructor(g) {
        this.g = g;
    }
    next() {
        return this.g.next();
    }
    [Symbol.iterator]() {
        return this.g;
    }
    map(f) {
        return new Stream(mapHelper(this.g, f));
    }
    flatMap(f) {
        return new Stream(flatMapHelper(this.g, f));
    }
    dropWhile(f) {
        let foundEligible = false;
        function* helper(v) {
            if (foundEligible || !f(v)) {
                foundEligible = true;
                yield v;
            }
        }
        return this.flatMap(helper);
    }
    drop(n) {
        if (n <= 0) {
            return this;
        }
        let idx = 0;
        function helper() {
            return idx++ < n;
        }
        return this.dropWhile(helper);
    }
    takeWhile(f) {
        return new Stream(takeWhileHelper(this.g, f));
    }
    take(n) {
        return new Stream(takeNHelper(this.g, n));
    }
    filter(f) {
        return new Stream(filterHelper(this.g, f));
    }
    every(f) {
        for (const v of this.g) {
            if (!f(v)) {
                return false;
            }
        }
        return true;
    }
    has(f) {
        for (const v of this.g) {
            if (f(v)) {
                return [true, v];
            }
        }
        return [false, null];
    }
    join(...others) {
        return new Stream(joinHelper(this.g, others));
    }
    getNthOrLast(nth) {
        let remaining = nth;
        let last = null;
        for (const v of this.g) {
            if (remaining-- === 0)
                return v;
            last = v;
        }
        return last;
    }
}
function stream(g) {
    return new Stream(g);
}

const cloneMethod = Symbol.for('fast-check/cloneMethod');
function hasCloneMethod(instance) {
    return (instance !== null &&
        (typeof instance === 'object' || typeof instance === 'function') &&
        cloneMethod in instance &&
        typeof instance[cloneMethod] === 'function');
}
function cloneIfNeeded(instance) {
    return hasCloneMethod(instance) ? instance[cloneMethod]() : instance;
}

const safeObjectDefineProperty$1 = Object.defineProperty;
class Value {
    constructor(value_, context, customGetValue = undefined) {
        this.value_ = value_;
        this.context = context;
        this.hasToBeCloned = customGetValue !== undefined || hasCloneMethod(value_);
        this.readOnce = false;
        if (this.hasToBeCloned) {
            safeObjectDefineProperty$1(this, 'value', { get: customGetValue !== undefined ? customGetValue : this.getValue });
        }
        else {
            this.value = value_;
        }
    }
    getValue() {
        if (this.hasToBeCloned) {
            if (!this.readOnce) {
                this.readOnce = true;
                return this.value_;
            }
            return this.value_[cloneMethod]();
        }
        return this.value_;
    }
}

const safeObjectAssign = Object.assign;
class Arbitrary {
    filter(refinement) {
        return new FilterArbitrary(this, refinement);
    }
    map(mapper, unmapper) {
        return new MapArbitrary(this, mapper, unmapper);
    }
    chain(chainer) {
        return new ChainArbitrary(this, chainer);
    }
    noShrink() {
        return new NoShrinkArbitrary(this);
    }
    noBias() {
        return new NoBiasArbitrary(this);
    }
}
class ChainArbitrary extends Arbitrary {
    constructor(arb, chainer) {
        super();
        this.arb = arb;
        this.chainer = chainer;
    }
    generate(mrng, biasFactor) {
        const clonedMrng = mrng.clone();
        const src = this.arb.generate(mrng, biasFactor);
        return this.valueChainer(src, mrng, clonedMrng, biasFactor);
    }
    canShrinkWithoutContext(value) {
        return false;
    }
    shrink(value, context) {
        if (this.isSafeContext(context)) {
            return (!context.stoppedForOriginal
                ? this.arb
                    .shrink(context.originalValue, context.originalContext)
                    .map((v) => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias))
                : Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map((dst) => {
                const newContext = safeObjectAssign(safeObjectAssign({}, context), {
                    chainedContext: dst.context,
                    stoppedForOriginal: true,
                });
                return new Value(dst.value_, newContext);
            }));
        }
        return Stream.nil();
    }
    valueChainer(v, generateMrng, clonedMrng, biasFactor) {
        const chainedArbitrary = this.chainer(v.value_);
        const dst = chainedArbitrary.generate(generateMrng, biasFactor);
        const context = {
            originalBias: biasFactor,
            originalValue: v.value_,
            originalContext: v.context,
            stoppedForOriginal: false,
            chainedArbitrary,
            chainedContext: dst.context,
            clonedMrng,
        };
        return new Value(dst.value_, context);
    }
    isSafeContext(context) {
        return (context != null &&
            typeof context === 'object' &&
            'originalBias' in context &&
            'originalValue' in context &&
            'originalContext' in context &&
            'stoppedForOriginal' in context &&
            'chainedArbitrary' in context &&
            'chainedContext' in context &&
            'clonedMrng' in context);
    }
}
class MapArbitrary extends Arbitrary {
    constructor(arb, mapper, unmapper) {
        super();
        this.arb = arb;
        this.mapper = mapper;
        this.unmapper = unmapper;
        this.bindValueMapper = (v) => this.valueMapper(v);
    }
    generate(mrng, biasFactor) {
        const g = this.arb.generate(mrng, biasFactor);
        return this.valueMapper(g);
    }
    canShrinkWithoutContext(value) {
        if (this.unmapper !== undefined) {
            try {
                const unmapped = this.unmapper(value);
                return this.arb.canShrinkWithoutContext(unmapped);
            }
            catch (_err) {
                return false;
            }
        }
        return false;
    }
    shrink(value, context) {
        if (this.isSafeContext(context)) {
            return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);
        }
        if (this.unmapper !== undefined) {
            const unmapped = this.unmapper(value);
            return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);
        }
        return Stream.nil();
    }
    mapperWithCloneIfNeeded(v) {
        const sourceValue = v.value;
        const mappedValue = this.mapper(sourceValue);
        if (v.hasToBeCloned &&
            ((typeof mappedValue === 'object' && mappedValue !== null) || typeof mappedValue === 'function') &&
            Object.isExtensible(mappedValue) &&
            !hasCloneMethod(mappedValue)) {
            Object.defineProperty(mappedValue, cloneMethod, { get: () => () => this.mapperWithCloneIfNeeded(v)[0] });
        }
        return [mappedValue, sourceValue];
    }
    valueMapper(v) {
        const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);
        const context = { originalValue: sourceValue, originalContext: v.context };
        return new Value(mappedValue, context);
    }
    isSafeContext(context) {
        return (context != null &&
            typeof context === 'object' &&
            'originalValue' in context &&
            'originalContext' in context);
    }
}
class FilterArbitrary extends Arbitrary {
    constructor(arb, refinement) {
        super();
        this.arb = arb;
        this.refinement = refinement;
        this.bindRefinementOnValue = (v) => this.refinementOnValue(v);
    }
    generate(mrng, biasFactor) {
        while (true) {
            const g = this.arb.generate(mrng, biasFactor);
            if (this.refinementOnValue(g)) {
                return g;
            }
        }
    }
    canShrinkWithoutContext(value) {
        return this.arb.canShrinkWithoutContext(value) && this.refinement(value);
    }
    shrink(value, context) {
        return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);
    }
    refinementOnValue(v) {
        return this.refinement(v.value);
    }
}
class NoShrinkArbitrary extends Arbitrary {
    constructor(arb) {
        super();
        this.arb = arb;
    }
    generate(mrng, biasFactor) {
        return this.arb.generate(mrng, biasFactor);
    }
    canShrinkWithoutContext(value) {
        return this.arb.canShrinkWithoutContext(value);
    }
    shrink(_value, _context) {
        return Stream.nil();
    }
    noShrink() {
        return this;
    }
}
class NoBiasArbitrary extends Arbitrary {
    constructor(arb) {
        super();
        this.arb = arb;
    }
    generate(mrng, _biasFactor) {
        return this.arb.generate(mrng, undefined);
    }
    canShrinkWithoutContext(value) {
        return this.arb.canShrinkWithoutContext(value);
    }
    shrink(value, context) {
        return this.arb.shrink(value, context);
    }
    noBias() {
        return this;
    }
}

const untouchedApply = Function.prototype.apply;
const ApplySymbol = Symbol('apply');
function safeExtractApply(f) {
    try {
        return f.apply;
    }
    catch (err) {
        return undefined;
    }
}
function safeApplyHacky(f, instance, args) {
    const ff = f;
    ff[ApplySymbol] = untouchedApply;
    const out = ff[ApplySymbol](instance, args);
    delete ff[ApplySymbol];
    return out;
}
function safeApply(f, instance, args) {
    if (safeExtractApply(f) === untouchedApply) {
        return f.apply(instance, args);
    }
    return safeApplyHacky(f, instance, args);
}

const SArray = typeof Array !== 'undefined' ? Array : undefined;
const SSet = typeof Set !== 'undefined' ? Set : undefined;
const SencodeURIComponent = typeof encodeURIComponent !== 'undefined' ? encodeURIComponent : undefined;
const untouchedMap = Array.prototype.map;
const untouchedPush = Array.prototype.push;
const untouchedSlice = Array.prototype.slice;
function extractMap(instance) {
    try {
        return instance.map;
    }
    catch (err) {
        return undefined;
    }
}
function extractPush(instance) {
    try {
        return instance.push;
    }
    catch (err) {
        return undefined;
    }
}
function extractSlice(instance) {
    try {
        return instance.slice;
    }
    catch (err) {
        return undefined;
    }
}
function safeMap(instance, fn) {
    if (extractMap(instance) === untouchedMap) {
        return instance.map(fn);
    }
    return safeApply(untouchedMap, instance, [fn]);
}
function safePush(instance, ...args) {
    if (extractPush(instance) === untouchedPush) {
        return instance.push(...args);
    }
    return safeApply(untouchedPush, instance, args);
}
function safeSlice(instance, ...args) {
    if (extractSlice(instance) === untouchedSlice) {
        return instance.slice(...args);
    }
    return safeApply(untouchedSlice, instance, args);
}
const untouchedHas = Set.prototype.has;
function extractHas(instance) {
    try {
        return instance.has;
    }
    catch (err) {
        return undefined;
    }
}
function safeHas(instance, value) {
    if (extractHas(instance) === untouchedHas) {
        return instance.has(value);
    }
    return safeApply(untouchedHas, instance, [value]);
}
const untouchedCharCodeAt = String.prototype.charCodeAt;
function extractCharCodeAt(instance) {
    try {
        return instance.charCodeAt;
    }
    catch (err) {
        return undefined;
    }
}
function safeCharCodeAt(instance, index) {
    if (extractCharCodeAt(instance) === untouchedCharCodeAt) {
        return instance.charCodeAt(index);
    }
    return safeApply(untouchedCharCodeAt, instance, [index]);
}
const untouchedNumberToString = Number.prototype.toString;
function extractNumberToString(instance) {
    try {
        return instance.toString;
    }
    catch (err) {
        return undefined;
    }
}
function safeNumberToString(instance, ...args) {
    if (extractNumberToString(instance) === untouchedNumberToString) {
        return instance.toString(...args);
    }
    return safeApply(untouchedNumberToString, instance, args);
}

class LazyIterableIterator {
    constructor(producer) {
        this.producer = producer;
    }
    [Symbol.iterator]() {
        if (this.it === undefined) {
            this.it = this.producer();
        }
        return this.it;
    }
    next() {
        if (this.it === undefined) {
            this.it = this.producer();
        }
        return this.it.next();
    }
}
function makeLazy(producer) {
    return new LazyIterableIterator(producer);
}

const safeArrayIsArray = Array.isArray;
const safeObjectDefineProperty = Object.defineProperty;
function tupleMakeItCloneable(vs, values) {
    return safeObjectDefineProperty(vs, cloneMethod, {
        value: () => {
            const cloned = [];
            for (let idx = 0; idx !== values.length; ++idx) {
                safePush(cloned, values[idx].value);
            }
            tupleMakeItCloneable(cloned, values);
            return cloned;
        },
    });
}
function tupleWrapper(values) {
    let cloneable = false;
    const vs = [];
    const ctxs = [];
    for (let idx = 0; idx !== values.length; ++idx) {
        const v = values[idx];
        cloneable = cloneable || v.hasToBeCloned;
        safePush(vs, v.value);
        safePush(ctxs, v.context);
    }
    if (cloneable) {
        tupleMakeItCloneable(vs, values);
    }
    return new Value(vs, ctxs);
}
function tupleShrink(arbs, value, context) {
    const shrinks = [];
    const safeContext = safeArrayIsArray(context) ? context : [];
    for (let idx = 0; idx !== arbs.length; ++idx) {
        safePush(shrinks, makeLazy(() => arbs[idx]
            .shrink(value[idx], safeContext[idx])
            .map((v) => {
            const nextValues = safeMap(value, (v, idx) => new Value(cloneIfNeeded(v), safeContext[idx]));
            return [...safeSlice(nextValues, 0, idx), v, ...safeSlice(nextValues, idx + 1)];
        })
            .map(tupleWrapper)));
    }
    return Stream.nil().join(...shrinks);
}
class TupleArbitrary extends Arbitrary {
    constructor(arbs) {
        super();
        this.arbs = arbs;
        for (let idx = 0; idx !== arbs.length; ++idx) {
            const arb = arbs[idx];
            if (arb == null || arb.generate == null)
                throw new Error(`Invalid parameter encountered at index ${idx}: expecting an Arbitrary`);
        }
    }
    generate(mrng, biasFactor) {
        const mapped = [];
        for (let idx = 0; idx !== this.arbs.length; ++idx) {
            safePush(mapped, this.arbs[idx].generate(mrng, biasFactor));
        }
        return tupleWrapper(mapped);
    }
    canShrinkWithoutContext(value) {
        if (!safeArrayIsArray(value) || value.length !== this.arbs.length) {
            return false;
        }
        for (let index = 0; index !== this.arbs.length; ++index) {
            if (!this.arbs[index].canShrinkWithoutContext(value[index])) {
                return false;
            }
        }
        return true;
    }
    shrink(value, context) {
        return tupleShrink(this.arbs, value, context);
    }
}

function tuple(...arbs) {
    return new TupleArbitrary(arbs);
}

var VerbosityLevel;
(function (VerbosityLevel) {
    VerbosityLevel[VerbosityLevel["None"] = 0] = "None";
    VerbosityLevel[VerbosityLevel["Verbose"] = 1] = "Verbose";
    VerbosityLevel[VerbosityLevel["VeryVerbose"] = 2] = "VeryVerbose";
})(VerbosityLevel || (VerbosityLevel = {}));

typeof Buffer !== 'undefined' ? Buffer.isBuffer : undefined;

var ExecutionStatus;
(function (ExecutionStatus) {
    ExecutionStatus[ExecutionStatus["Success"] = 0] = "Success";
    ExecutionStatus[ExecutionStatus["Skipped"] = -1] = "Skipped";
    ExecutionStatus[ExecutionStatus["Failure"] = 1] = "Failure";
})(ExecutionStatus || (ExecutionStatus = {}));

const safeMathFloor$1 = Math.floor;
const safeMathLog = Math.log;
function integerLogLike(v) {
    return safeMathFloor$1(safeMathLog(v) / safeMathLog(2));
}
function biasNumericRange(min, max, logLike) {
    if (min === max) {
        return [{ min: min, max: max }];
    }
    if (min < 0 && max > 0) {
        const logMin = logLike(-min);
        const logMax = logLike(max);
        return [
            { min: -logMin, max: logMax },
            { min: (max - logMax), max: max },
            { min: min, max: min + logMin },
        ];
    }
    const logGap = logLike((max - min));
    const arbCloseToMin = { min: min, max: min + logGap };
    const arbCloseToMax = { min: (max - logGap), max: max };
    return min < 0
        ? [arbCloseToMax, arbCloseToMin]
        : [arbCloseToMin, arbCloseToMax];
}

const safeMathCeil = Math.ceil;
const safeMathFloor = Math.floor;
function halvePosInteger(n) {
    return safeMathFloor(n / 2);
}
function halveNegInteger(n) {
    return safeMathCeil(n / 2);
}
function shrinkInteger(current, target, tryTargetAsap) {
    const realGap = current - target;
    function* shrinkDecr() {
        let previous = tryTargetAsap ? undefined : target;
        const gap = tryTargetAsap ? realGap : halvePosInteger(realGap);
        for (let toremove = gap; toremove > 0; toremove = halvePosInteger(toremove)) {
            const next = toremove === realGap ? target : current - toremove;
            yield new Value(next, previous);
            previous = next;
        }
    }
    function* shrinkIncr() {
        let previous = tryTargetAsap ? undefined : target;
        const gap = tryTargetAsap ? realGap : halveNegInteger(realGap);
        for (let toremove = gap; toremove < 0; toremove = halveNegInteger(toremove)) {
            const next = toremove === realGap ? target : current - toremove;
            yield new Value(next, previous);
            previous = next;
        }
    }
    return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());
}

const safeMathSign = Math.sign;
const safeNumberIsInteger$1 = Number.isInteger;
const safeObjectIs$1 = Object.is;
class IntegerArbitrary extends Arbitrary {
    constructor(min, max) {
        super();
        this.min = min;
        this.max = max;
    }
    generate(mrng, biasFactor) {
        const range = this.computeGenerateRange(mrng, biasFactor);
        return new Value(mrng.nextInt(range.min, range.max), undefined);
    }
    canShrinkWithoutContext(value) {
        return (typeof value === 'number' &&
            safeNumberIsInteger$1(value) &&
            !safeObjectIs$1(value, -0) &&
            this.min <= value &&
            value <= this.max);
    }
    shrink(current, context) {
        if (!IntegerArbitrary.isValidContext(current, context)) {
            const target = this.defaultTarget();
            return shrinkInteger(current, target, true);
        }
        if (this.isLastChanceTry(current, context)) {
            return Stream.of(new Value(context, undefined));
        }
        return shrinkInteger(current, context, false);
    }
    defaultTarget() {
        if (this.min <= 0 && this.max >= 0) {
            return 0;
        }
        return this.min < 0 ? this.max : this.min;
    }
    computeGenerateRange(mrng, biasFactor) {
        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {
            return { min: this.min, max: this.max };
        }
        const ranges = biasNumericRange(this.min, this.max, integerLogLike);
        if (ranges.length === 1) {
            return ranges[0];
        }
        const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);
        return id < 0 ? ranges[0] : ranges[id + 1];
    }
    isLastChanceTry(current, context) {
        if (current > 0)
            return current === context + 1 && current > this.min;
        if (current < 0)
            return current === context - 1 && current < this.max;
        return false;
    }
    static isValidContext(current, context) {
        if (context === undefined) {
            return false;
        }
        if (typeof context !== 'number') {
            throw new Error(`Invalid context type passed to IntegerArbitrary (#1)`);
        }
        if (context !== 0 && safeMathSign(current) !== safeMathSign(context)) {
            throw new Error(`Invalid context value passed to IntegerArbitrary (#2)`);
        }
        return true;
    }
}

const safeNumberIsInteger = Number.isInteger;
function buildCompleteIntegerConstraints(constraints) {
    const min = constraints.min !== undefined ? constraints.min : -0x80000000;
    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;
    return { min, max };
}
function integer(constraints = {}) {
    const fullConstraints = buildCompleteIntegerConstraints(constraints);
    if (fullConstraints.min > fullConstraints.max) {
        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');
    }
    if (!safeNumberIsInteger(fullConstraints.min)) {
        throw new Error('fc.integer minimum value should be an integer');
    }
    if (!safeNumberIsInteger(fullConstraints.max)) {
        throw new Error('fc.integer maximum value should be an integer');
    }
    return new IntegerArbitrary(fullConstraints.min, fullConstraints.max);
}

const safeObjectIs = Object.is;
class ConstantArbitrary extends Arbitrary {
    constructor(values) {
        super();
        this.values = values;
    }
    generate(mrng, _biasFactor) {
        const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);
        const value = this.values[idx];
        if (!hasCloneMethod(value)) {
            return new Value(value, idx);
        }
        return new Value(value, idx, () => value[cloneMethod]());
    }
    canShrinkWithoutContext(value) {
        if (this.values.length === 1) {
            return safeObjectIs(this.values[0], value);
        }
        if (this.fastValues === undefined) {
            this.fastValues = new FastConstantValuesLookup(this.values);
        }
        return this.fastValues.has(value);
    }
    shrink(value, context) {
        if (context === 0 || safeObjectIs(value, this.values[0])) {
            return Stream.nil();
        }
        return Stream.of(new Value(this.values[0], 0));
    }
}
class FastConstantValuesLookup {
    constructor(values) {
        this.values = values;
        this.fastValues = new SSet(this.values);
        let hasMinusZero = false;
        let hasPlusZero = false;
        if (safeHas(this.fastValues, 0)) {
            for (let idx = 0; idx !== this.values.length; ++idx) {
                const value = this.values[idx];
                hasMinusZero = hasMinusZero || safeObjectIs(value, -0);
                hasPlusZero = hasPlusZero || safeObjectIs(value, 0);
            }
        }
        this.hasMinusZero = hasMinusZero;
        this.hasPlusZero = hasPlusZero;
    }
    has(value) {
        if (value === 0) {
            if (safeObjectIs(value, 0)) {
                return this.hasPlusZero;
            }
            return this.hasMinusZero;
        }
        return safeHas(this.fastValues, value);
    }
}

function constantFrom(...values) {
    if (values.length === 0) {
        throw new Error('fc.constantFrom expects at least one parameter');
    }
    return new ConstantArbitrary(values);
}

const indexToCharStringMapper = String.fromCodePoint;
function indexToCharStringUnmapper(c) {
    if (typeof c !== 'string') {
        throw new Error('Cannot unmap non-string');
    }
    if (c.length === 0 || c.length > 2) {
        throw new Error('Cannot unmap string with more or less than one character');
    }
    const c1 = safeCharCodeAt(c, 0);
    if (c.length === 1) {
        return c1;
    }
    const c2 = safeCharCodeAt(c, 1);
    if (c1 < 0xd800 || c1 > 0xdbff || c2 < 0xdc00 || c2 > 0xdfff) {
        throw new Error('Cannot unmap invalid surrogate pairs');
    }
    return c.codePointAt(0);
}

function buildCharacterArbitrary(min, max, mapToCode, unmapFromCode) {
    return integer({ min, max }).map((n) => indexToCharStringMapper(mapToCode(n)), (c) => unmapFromCode(indexToCharStringUnmapper(c)));
}

function indexToPrintableIndexMapper(v) {
    if (v < 95)
        return v + 0x20;
    if (v <= 0x7e)
        return v - 95;
    return v;
}
function indexToPrintableIndexUnmapper(v) {
    if (v >= 0x20 && v <= 0x7e)
        return v - 0x20;
    if (v >= 0 && v <= 0x1f)
        return v + 95;
    return v;
}

function identity$1(v) {
    return v;
}
function char() {
    return buildCharacterArbitrary(0x20, 0x7e, identity$1, identity$1);
}

const gapSize = 0xdfff + 1 - 0xd800;
function unicodeMapper(v) {
    if (v < 0xd800)
        return indexToPrintableIndexMapper(v);
    return v + gapSize;
}
function unicodeUnmapper(v) {
    if (v < 0xd800)
        return indexToPrintableIndexUnmapper(v);
    if (v <= 0xdfff)
        return -1;
    return v - gapSize;
}
function fullUnicode() {
    return buildCharacterArbitrary(0x0000, 0x10ffff - gapSize, unicodeMapper, unicodeUnmapper);
}

function percentCharArbMapper(c) {
    const encoded = SencodeURIComponent(c);
    return c !== encoded ? encoded : `%${safeNumberToString(safeCharCodeAt(c, 0), 16)}`;
}
function percentCharArbUnmapper(value) {
    if (typeof value !== 'string') {
        throw new Error('Unsupported');
    }
    const decoded = decodeURIComponent(value);
    return decoded;
}
fullUnicode().map(percentCharArbMapper, percentCharArbUnmapper);

const f64 = new Float64Array(1);
new Uint32Array(f64.buffer, f64.byteOffset);

const f32 = new Float32Array(1);
new Uint32Array(f32.buffer, f32.byteOffset);

(undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

SArray.isArray;

var TokenizerBlockMode;
(function (TokenizerBlockMode) {
    TokenizerBlockMode[TokenizerBlockMode["Full"] = 0] = "Full";
    TokenizerBlockMode[TokenizerBlockMode["Character"] = 1] = "Character";
})(TokenizerBlockMode || (TokenizerBlockMode = {}));

char();

function descendants(parent) {
    return Array.from(parent.childNodes).concat(...Array.from(parent.children).map((child) => descendants(child)));
}
const sclDocString = `<?xml version="1.0" encoding="UTF-8"?>
    <SCL version="2007" revision="B" xmlns="http://www.iec.ch/61850/2003/SCL" xmlns:ens1="http://example.org/somePreexistingExtensionNamespace">
    <Substation name="A1" desc="test substation"></Substation>
  </SCL>`;
const testDocStrings = [
    sclDocString,
    `<?xml version="1.0" encoding="UTF-8"?>
    <testDoc1>
  <element1 property1="value1" property2="value2">SomeText</element1>
  <element2 property2="value2" property3="value3"><!--AComment--></element2>
  <element3 property3="value3" property1="value1">
    <subelement1 property1="value1" property2="value2">SomeMoreText</subelement1>
    <subelement2 property2="value2" property3="value3"><!----></subelement2>
    <subelement3 property3="value3" property1="value1"></subelement3>
  </element3>
  </testDoc1>`,
    `<?xml version="1.0" encoding="UTF-8"?>
    <testDoc2>
  <element1 property1="value1" property2="value2">SomeText</element1>
  <element2 property2="value2" property3="value3"><!--AComment--></element2>
  <element3 property3="value3" property1="value1">
    <subelement1 property1="value1" property2="value2">SomeMoreText</subelement1>
    <subelement2 property2="value2" property3="value3"><!----></subelement2>
    <subelement3 property3="value3" property1="value1"></subelement3>
  </element3>
  </testDoc2>`,
];
tuple(constantFrom(...testDocStrings), constantFrom(...testDocStrings))
    .map((strs) => strs.map((str) => new DOMParser().parseFromString(str, "application/xml")))
    .map((docs) => docs.map((doc) => ({ doc, nodes: descendants(doc).concat([doc]) })));

function newEditEventV2(edit, options) {
    return new CustomEvent('oscd-edit-v2', {
        composed: true,
        bubbles: true,
        detail: { ...options, edit },
    });
}

function newEditEvent(edit, options) {
    if (isEditV2(edit))
        return newEditEventV2(edit, options);
    if (options)
        return newEditEventV2(convertEdit(edit), options);
    return newEditEventV1(edit);
}

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A component for elevation.
 */
class Elevation extends r$6 {
    connectedCallback() {
        super.connectedCallback();
        // Needed for VoiceOver, which will create a "group" if the element is a
        // sibling to other content.
        this.setAttribute('aria-hidden', 'true');
    }
    render() {
        return x$1 `<span class="shadow"></span>`;
    }
}

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$a = i$c `:host,.shadow,.shadow::before,.shadow::after{border-radius:inherit;inset:0;position:absolute;transition-duration:inherit;transition-property:inherit;transition-timing-function:inherit}:host{display:flex;pointer-events:none;transition-property:box-shadow,opacity}.shadow::before,.shadow::after{content:"";transition-property:box-shadow,opacity;--_level: var(--md-elevation-level, 0);--_shadow-color: var(--md-elevation-shadow-color, var(--md-sys-color-shadow, #000))}.shadow::before{box-shadow:0px calc(1px*(clamp(0,var(--_level),1) + clamp(0,var(--_level) - 3,1) + 2*clamp(0,var(--_level) - 4,1))) calc(1px*(2*clamp(0,var(--_level),1) + clamp(0,var(--_level) - 2,1) + clamp(0,var(--_level) - 4,1))) 0px var(--_shadow-color);opacity:.3}.shadow::after{box-shadow:0px calc(1px*(clamp(0,var(--_level),1) + clamp(0,var(--_level) - 1,1) + 2*clamp(0,var(--_level) - 2,3))) calc(1px*(3*clamp(0,var(--_level),2) + 2*clamp(0,var(--_level) - 2,3))) calc(1px*(clamp(0,var(--_level),4) + 2*clamp(0,var(--_level) - 4,1))) var(--_shadow-color);opacity:.15}
`;

class MdElevation extends Elevation {
}
MdElevation.styles = [styles$a];

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const n$5="important",i=" !"+n$5,o$5=e$2(class extends i$2{constructor(t$1){if(super(t$1),t$1.type!==t.ATTRIBUTE||"style"!==t$1.name||t$1.strings?.length>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,r)=>{const s=t[r];return null==s?e:e+`${r=r.includes("-")?r:r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(e,[r]){const{style:s}=e.element;if(void 0===this.ft)return this.ft=new Set(Object.keys(r)),this.render(r);for(const t of this.ft)null==r[t]&&(this.ft.delete(t),t.includes("-")?s.removeProperty(t):s[t]=null);for(const t in r){const e=r[t];if(null!=e){this.ft.add(t);const r="string"==typeof e&&e.endsWith(i);t.includes("-")||r?s.setProperty(t,r?e.slice(0,-11):e,r?n$5:""):s[t]=e;}}return T$2}});

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Creates an event that closes any parent menus.
 */
function createCloseMenuEvent(initiator, reason) {
    return new CustomEvent('close-menu', {
        bubbles: true,
        composed: true,
        detail: { initiator, reason, itemPath: [initiator] },
    });
}
/**
 * Creates a default close menu event used by md-menu.
 */
const createDefaultCloseMenuEvent = (createCloseMenuEvent);
/**
 * Keys that are used for selection in menus.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const SelectionKey = {
    SPACE: 'Space',
    ENTER: 'Enter',
};
/**
 * Default close `Reason` kind values.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const CloseReason = {
    CLICK_SELECTION: 'click-selection',
    KEYDOWN: 'keydown',
};
/**
 * Keys that can close menus.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const KeydownCloseKey = {
    ESCAPE: 'Escape',
    SPACE: SelectionKey.SPACE,
    ENTER: SelectionKey.ENTER,
};
/**
 * Determines whether the given key code is a key code that should close the
 * menu.
 *
 * @param code The KeyboardEvent code to check.
 * @return Whether or not the key code is in the predetermined list to close the
 * menu.
 */
function isClosableKey(code) {
    return Object.values(KeydownCloseKey).some((value) => value === code);
}
/**
 * Determines whether a target element is contained inside another element's
 * composed tree.
 *
 * @param target The potential contained element.
 * @param container The potential containing element of the target.
 * @returns Whether the target element is contained inside the container's
 * composed subtree
 */
function isElementInSubtree(target, container) {
    // Dispatch a composed, bubbling event to check its path to see if the
    // newly-focused element is contained in container's subtree
    const focusEv = new Event('md-contains', { bubbles: true, composed: true });
    let composedPath = [];
    const listener = (ev) => {
        composedPath = ev.composedPath();
    };
    container.addEventListener('md-contains', listener);
    target.dispatchEvent(focusEv);
    container.removeEventListener('md-contains', listener);
    const isContained = composedPath.length > 0;
    return isContained;
}
/**
 * Element to focus on when menu is first opened.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const FocusState = {
    NONE: 'none',
    LIST_ROOT: 'list-root',
    FIRST_ITEM: 'first-item',
    LAST_ITEM: 'last-item',
};

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * An enum of supported Menu corners
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const Corner = {
    END_START: 'end-start',
    END_END: 'end-end',
    START_START: 'start-start',
    START_END: 'start-end',
};
/**
 * Given a surface, an anchor, corners, and some options, this surface will
 * calculate the position of a surface to align the two given corners and keep
 * the surface inside the window viewport. It also provides a StyleInfo map that
 * can be applied to the surface to handle visiblility and position.
 */
class SurfacePositionController {
    /**
     * @param host The host to connect the controller to.
     * @param getProperties A function that returns the properties for the
     * controller.
     */
    constructor(host, getProperties) {
        this.host = host;
        this.getProperties = getProperties;
        // The current styles to apply to the surface.
        this.surfaceStylesInternal = {
            'display': 'none',
        };
        // Previous values stored for change detection. Open change detection is
        // calculated separately so initialize it here.
        this.lastValues = {
            isOpen: false,
        };
        this.host.addController(this);
    }
    /**
     * The StyleInfo map to apply to the surface via Lit's stylemap
     */
    get surfaceStyles() {
        return this.surfaceStylesInternal;
    }
    /**
     * Calculates the surface's new position required so that the surface's
     * `surfaceCorner` aligns to the anchor's `anchorCorner` while keeping the
     * surface inside the window viewport. This positioning also respects RTL by
     * checking `getComputedStyle()` on the surface element.
     */
    async position() {
        const { surfaceEl, anchorEl, anchorCorner: anchorCornerRaw, surfaceCorner: surfaceCornerRaw, positioning, xOffset, yOffset, disableBlockFlip, disableInlineFlip, repositionStrategy, } = this.getProperties();
        const anchorCorner = anchorCornerRaw.toLowerCase().trim();
        const surfaceCorner = surfaceCornerRaw.toLowerCase().trim();
        if (!surfaceEl || !anchorEl) {
            return;
        }
        // Store these before we potentially resize the window with the next set of
        // lines
        const windowInnerWidth = window.innerWidth;
        const windowInnerHeight = window.innerHeight;
        const div = document.createElement('div');
        div.style.opacity = '0';
        div.style.position = 'fixed';
        div.style.display = 'block';
        div.style.inset = '0';
        document.body.appendChild(div);
        const scrollbarTestRect = div.getBoundingClientRect();
        div.remove();
        // Calculate the widths of the scrollbars in the inline and block directions
        // to account for window-relative calculations.
        const blockScrollbarHeight = window.innerHeight - scrollbarTestRect.bottom;
        const inlineScrollbarWidth = window.innerWidth - scrollbarTestRect.right;
        // Paint the surface transparently so that we can get the position and the
        // rect info of the surface.
        this.surfaceStylesInternal = {
            'display': 'block',
            'opacity': '0',
        };
        // Wait for it to be visible.
        this.host.requestUpdate();
        await this.host.updateComplete;
        // Safari has a bug that makes popovers render incorrectly if the node is
        // made visible + Animation Frame before calling showPopover().
        // https://bugs.webkit.org/show_bug.cgi?id=264069
        // also the cast is required due to differing TS types in Google and OSS.
        if (surfaceEl.popover &&
            surfaceEl.isConnected) {
            surfaceEl.showPopover();
        }
        const surfaceRect = surfaceEl.getSurfacePositionClientRect
            ? surfaceEl.getSurfacePositionClientRect()
            : surfaceEl.getBoundingClientRect();
        const anchorRect = anchorEl.getSurfacePositionClientRect
            ? anchorEl.getSurfacePositionClientRect()
            : anchorEl.getBoundingClientRect();
        const [surfaceBlock, surfaceInline] = surfaceCorner.split('-');
        const [anchorBlock, anchorInline] = anchorCorner.split('-');
        // LTR depends on the direction of the SURFACE not the anchor.
        const isLTR = getComputedStyle(surfaceEl).direction === 'ltr';
        /*
         * For more on inline and block dimensions, see MDN article:
         * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values
         *
         * ┌───── inline/blockDocumentOffset  inlineScrollbarWidth
         * │       │                                    │
         * │     ┌─▼─────┐                              │Document
         * │    ┌┼───────┴──────────────────────────────┼────────┐
         * │    ││                                      │        │
         * └──► ││ ┌───── inline/blockWindowOffset      │        │
         *      ││ │       │                            ▼        │
         *      ││ │     ┌─▼───┐                 Window┌┐        │
         *      └┤ │    ┌┼─────┴───────────────────────┼│        │
         *       │ │    ││                             ││        │
         *       │ └──► ││  ┌──inline/blockAnchorOffset││        │
         *       │      ││  │     │                    ││        │
         *       │      └┤  │  ┌──▼───┐                ││        │
         *       │       │  │ ┌┼──────┤                ││        │
         *       │       │  └─►│Anchor│                ││        │
         *       │       │    └┴──────┘                ││        │
         *       │       │                             ││        │
         *       │       │     ┌───────────────────────┼┼────┐   │
         *       │       │     │ Surface               ││    │   │
         *       │       │     │                       ││    │   │
         *       │       │     │                       ││    │   │
         *       │       │     │                       ││    │   │
         *       │       │     │                       ││    │   │
         *       │      ┌┼─────┼───────────────────────┼│    │   │
         *       │   ┌─►┴──────┼────────────────────────┘    ├┐  │
         *       │   │         │ inline/blockOOBCorrection   ││  │
         *       │   │         │                         │   ││  │
         *       │   │         │                         ├──►├│  │
         *       │   │         │                         │   ││  │
         *       │   │         └────────────────────────┐▼───┼┘  │
         *       │  blockScrollbarHeight                └────┘   │
         *       │                                               │
         *       └───────────────────────────────────────────────┘
         */
        // Calculate the block positioning properties
        let { blockInset, blockOutOfBoundsCorrection, surfaceBlockProperty } = this.calculateBlock({
            surfaceRect,
            anchorRect,
            anchorBlock,
            surfaceBlock,
            yOffset,
            positioning,
            windowInnerHeight,
            blockScrollbarHeight,
        });
        // If the surface should be out of bounds in the block direction, flip the
        // surface and anchor corner block values and recalculate
        if (blockOutOfBoundsCorrection && !disableBlockFlip) {
            const flippedSurfaceBlock = surfaceBlock === 'start' ? 'end' : 'start';
            const flippedAnchorBlock = anchorBlock === 'start' ? 'end' : 'start';
            const flippedBlock = this.calculateBlock({
                surfaceRect,
                anchorRect,
                anchorBlock: flippedAnchorBlock,
                surfaceBlock: flippedSurfaceBlock,
                yOffset,
                positioning,
                windowInnerHeight,
                blockScrollbarHeight,
            });
            // In the case that the flipped verion would require less out of bounds
            // correcting, use the flipped corner block values
            if (blockOutOfBoundsCorrection > flippedBlock.blockOutOfBoundsCorrection) {
                blockInset = flippedBlock.blockInset;
                blockOutOfBoundsCorrection = flippedBlock.blockOutOfBoundsCorrection;
                surfaceBlockProperty = flippedBlock.surfaceBlockProperty;
            }
        }
        // Calculate the inline positioning properties
        let { inlineInset, inlineOutOfBoundsCorrection, surfaceInlineProperty } = this.calculateInline({
            surfaceRect,
            anchorRect,
            anchorInline,
            surfaceInline,
            xOffset,
            positioning,
            isLTR,
            windowInnerWidth,
            inlineScrollbarWidth,
        });
        // If the surface should be out of bounds in the inline direction, flip the
        // surface and anchor corner inline values and recalculate
        if (inlineOutOfBoundsCorrection && !disableInlineFlip) {
            const flippedSurfaceInline = surfaceInline === 'start' ? 'end' : 'start';
            const flippedAnchorInline = anchorInline === 'start' ? 'end' : 'start';
            const flippedInline = this.calculateInline({
                surfaceRect,
                anchorRect,
                anchorInline: flippedAnchorInline,
                surfaceInline: flippedSurfaceInline,
                xOffset,
                positioning,
                isLTR,
                windowInnerWidth,
                inlineScrollbarWidth,
            });
            // In the case that the flipped verion would require less out of bounds
            // correcting, use the flipped corner inline values
            if (Math.abs(inlineOutOfBoundsCorrection) >
                Math.abs(flippedInline.inlineOutOfBoundsCorrection)) {
                inlineInset = flippedInline.inlineInset;
                inlineOutOfBoundsCorrection = flippedInline.inlineOutOfBoundsCorrection;
                surfaceInlineProperty = flippedInline.surfaceInlineProperty;
            }
        }
        // If we are simply repositioning the surface back inside the viewport,
        // subtract the out of bounds correction values from the positioning.
        if (repositionStrategy === 'move') {
            blockInset = blockInset - blockOutOfBoundsCorrection;
            inlineInset = inlineInset - inlineOutOfBoundsCorrection;
        }
        this.surfaceStylesInternal = {
            'display': 'block',
            'opacity': '1',
            [surfaceBlockProperty]: `${blockInset}px`,
            [surfaceInlineProperty]: `${inlineInset}px`,
        };
        // In the case that we are resizing the surface to stay inside the viewport
        // we need to set height and width on the surface.
        if (repositionStrategy === 'resize') {
            // Add a height property to the styles if there is block height correction
            if (blockOutOfBoundsCorrection) {
                this.surfaceStylesInternal['height'] = `${surfaceRect.height - blockOutOfBoundsCorrection}px`;
            }
            // Add a width property to the styles if there is block height correction
            if (inlineOutOfBoundsCorrection) {
                this.surfaceStylesInternal['width'] = `${surfaceRect.width - inlineOutOfBoundsCorrection}px`;
            }
        }
        this.host.requestUpdate();
    }
    /**
     * Calculates the css property, the inset, and the out of bounds correction
     * for the surface in the block direction.
     */
    calculateBlock(config) {
        const { surfaceRect, anchorRect, anchorBlock, surfaceBlock, yOffset, positioning, windowInnerHeight, blockScrollbarHeight, } = config;
        // We use number booleans to multiply values rather than `if` / ternary
        // statements because it _heavily_ cuts down on nesting and readability
        const relativeToWindow = positioning === 'fixed' || positioning === 'document' ? 1 : 0;
        const relativeToDocument = positioning === 'document' ? 1 : 0;
        const isSurfaceBlockStart = surfaceBlock === 'start' ? 1 : 0;
        const isSurfaceBlockEnd = surfaceBlock === 'end' ? 1 : 0;
        const isOneBlockEnd = anchorBlock !== surfaceBlock ? 1 : 0;
        // Whether or not to apply the height of the anchor
        const blockAnchorOffset = isOneBlockEnd * anchorRect.height + yOffset;
        // The absolute block position of the anchor relative to window
        const blockTopLayerOffset = isSurfaceBlockStart * anchorRect.top +
            isSurfaceBlockEnd *
                (windowInnerHeight - anchorRect.bottom - blockScrollbarHeight);
        const blockDocumentOffset = isSurfaceBlockStart * window.scrollY - isSurfaceBlockEnd * window.scrollY;
        // If the surface's block would be out of bounds of the window, move it back
        // in
        const blockOutOfBoundsCorrection = Math.abs(Math.min(0, windowInnerHeight -
            blockTopLayerOffset -
            blockAnchorOffset -
            surfaceRect.height));
        // The block logical value of the surface
        const blockInset = relativeToWindow * blockTopLayerOffset +
            relativeToDocument * blockDocumentOffset +
            blockAnchorOffset;
        const surfaceBlockProperty = surfaceBlock === 'start' ? 'inset-block-start' : 'inset-block-end';
        return { blockInset, blockOutOfBoundsCorrection, surfaceBlockProperty };
    }
    /**
     * Calculates the css property, the inset, and the out of bounds correction
     * for the surface in the inline direction.
     */
    calculateInline(config) {
        const { isLTR: isLTRBool, surfaceInline, anchorInline, anchorRect, surfaceRect, xOffset, positioning, windowInnerWidth, inlineScrollbarWidth, } = config;
        // We use number booleans to multiply values rather than `if` / ternary
        // statements because it _heavily_ cuts down on nesting and readability
        const relativeToWindow = positioning === 'fixed' || positioning === 'document' ? 1 : 0;
        const relativeToDocument = positioning === 'document' ? 1 : 0;
        const isLTR = isLTRBool ? 1 : 0;
        const isRTL = isLTRBool ? 0 : 1;
        const isSurfaceInlineStart = surfaceInline === 'start' ? 1 : 0;
        const isSurfaceInlineEnd = surfaceInline === 'end' ? 1 : 0;
        const isOneInlineEnd = anchorInline !== surfaceInline ? 1 : 0;
        // Whether or not to apply the width of the anchor
        const inlineAnchorOffset = isOneInlineEnd * anchorRect.width + xOffset;
        // The inline position of the anchor relative to window in LTR
        const inlineTopLayerOffsetLTR = isSurfaceInlineStart * anchorRect.left +
            isSurfaceInlineEnd *
                (windowInnerWidth - anchorRect.right - inlineScrollbarWidth);
        // The inline position of the anchor relative to window in RTL
        const inlineTopLayerOffsetRTL = isSurfaceInlineStart *
            (windowInnerWidth - anchorRect.right - inlineScrollbarWidth) +
            isSurfaceInlineEnd * anchorRect.left;
        // The inline position of the anchor relative to window
        const inlineTopLayerOffset = isLTR * inlineTopLayerOffsetLTR + isRTL * inlineTopLayerOffsetRTL;
        // The inline position of the anchor relative to window in LTR
        const inlineDocumentOffsetLTR = isSurfaceInlineStart * window.scrollX -
            isSurfaceInlineEnd * window.scrollX;
        // The inline position of the anchor relative to window in RTL
        const inlineDocumentOffsetRTL = isSurfaceInlineEnd * window.scrollX -
            isSurfaceInlineStart * window.scrollX;
        // The inline position of the anchor relative to window
        const inlineDocumentOffset = isLTR * inlineDocumentOffsetLTR + isRTL * inlineDocumentOffsetRTL;
        // If the surface's inline would be out of bounds of the window, move it
        // back in
        const inlineOutOfBoundsCorrection = Math.abs(Math.min(0, windowInnerWidth -
            inlineTopLayerOffset -
            inlineAnchorOffset -
            surfaceRect.width));
        // The inline logical value of the surface
        const inlineInset = relativeToWindow * inlineTopLayerOffset +
            inlineAnchorOffset +
            relativeToDocument * inlineDocumentOffset;
        let surfaceInlineProperty = surfaceInline === 'start' ? 'inset-inline-start' : 'inset-inline-end';
        // There are cases where the element is RTL but the root of the page is not.
        // In these cases we want to not use logical properties.
        if (positioning === 'document' || positioning === 'fixed') {
            if ((surfaceInline === 'start' && isLTRBool) ||
                (surfaceInline === 'end' && !isLTRBool)) {
                surfaceInlineProperty = 'left';
            }
            else {
                surfaceInlineProperty = 'right';
            }
        }
        return {
            inlineInset,
            inlineOutOfBoundsCorrection,
            surfaceInlineProperty,
        };
    }
    hostUpdate() {
        this.onUpdate();
    }
    hostUpdated() {
        this.onUpdate();
    }
    /**
     * Checks whether the properties passed into the controller have changed since
     * the last positioning. If so, it will reposition if the surface is open or
     * close it if the surface should close.
     */
    async onUpdate() {
        const props = this.getProperties();
        let hasChanged = false;
        for (const [key, value] of Object.entries(props)) {
            // tslint:disable-next-line
            hasChanged = hasChanged || value !== this.lastValues[key];
            if (hasChanged)
                break;
        }
        const openChanged = this.lastValues.isOpen !== props.isOpen;
        const hasAnchor = !!props.anchorEl;
        const hasSurface = !!props.surfaceEl;
        if (hasChanged && hasAnchor && hasSurface) {
            // Only update isOpen, because if it's closed, we do not want to waste
            // time on a useless reposition calculation. So save the other "dirty"
            // values until next time it opens.
            this.lastValues.isOpen = props.isOpen;
            if (props.isOpen) {
                // We are going to do a reposition, so save the prop values for future
                // dirty checking.
                this.lastValues = props;
                await this.position();
                props.onOpen();
            }
            else if (openChanged) {
                await props.beforeClose();
                this.close();
                props.onClose();
            }
        }
    }
    /**
     * Hides the surface.
     */
    close() {
        this.surfaceStylesInternal = {
            'display': 'none',
        };
        this.host.requestUpdate();
        const surfaceEl = this.getProperties().surfaceEl;
        // The following type casts are required due to differing TS types in Google
        // and open source.
        if (surfaceEl?.popover &&
            surfaceEl?.isConnected) {
            surfaceEl.hidePopover();
        }
    }
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Indicies to access the TypeaheadRecord tuple type.
 */
const TYPEAHEAD_RECORD = {
    INDEX: 0,
    ITEM: 1,
    TEXT: 2,
};
/**
 * This controller listens to `keydown` events and searches the header text of
 * an array of `MenuItem`s with the corresponding entered keys within the buffer
 * time and activates the item.
 *
 * @example
 * ```ts
 * const typeaheadController = new TypeaheadController(() => ({
 *   typeaheadBufferTime: 50,
 *   getItems: () => Array.from(document.querySelectorAll('md-menu-item'))
 * }));
 * html`
 *   <div
 *       @keydown=${typeaheadController.onKeydown}
 *       tabindex="0"
 *       class="activeItemText">
 *     <!-- focusable element that will receive keydown events -->
 *     Apple
 *   </div>
 *   <div>
 *     <md-menu-item active header="Apple"></md-menu-item>
 *     <md-menu-item header="Apricot"></md-menu-item>
 *     <md-menu-item header="Banana"></md-menu-item>
 *     <md-menu-item header="Olive"></md-menu-item>
 *     <md-menu-item header="Orange"></md-menu-item>
 *   </div>
 * `;
 * ```
 */
class TypeaheadController {
    /**
     * @param getProperties A function that returns the options of the typeahead
     * controller:
     *
     * {
     *   getItems: A function that returns an array of menu items to be searched.
     *   typeaheadBufferTime: The maximum time between each keystroke to keep the
     *       current type buffer alive.
     * }
     */
    constructor(getProperties) {
        this.getProperties = getProperties;
        /**
         * Array of tuples that helps with indexing.
         */
        this.typeaheadRecords = [];
        /**
         * Currently-typed text since last buffer timeout
         */
        this.typaheadBuffer = '';
        /**
         * The timeout id from the current buffer's setTimeout
         */
        this.cancelTypeaheadTimeout = 0;
        /**
         * If we are currently "typing"
         */
        this.isTypingAhead = false;
        /**
         * The record of the last active item.
         */
        this.lastActiveRecord = null;
        /**
         * Apply this listener to the element that will receive `keydown` events that
         * should trigger this controller.
         *
         * @param event The native browser `KeyboardEvent` from the `keydown` event.
         */
        this.onKeydown = (event) => {
            if (this.isTypingAhead) {
                this.typeahead(event);
            }
            else {
                this.beginTypeahead(event);
            }
        };
        /**
         * Ends the current typeahead and clears the buffer.
         */
        this.endTypeahead = () => {
            this.isTypingAhead = false;
            this.typaheadBuffer = '';
            this.typeaheadRecords = [];
        };
    }
    get items() {
        return this.getProperties().getItems();
    }
    get active() {
        return this.getProperties().active;
    }
    /**
     * Sets up typingahead
     */
    beginTypeahead(event) {
        if (!this.active) {
            return;
        }
        // We don't want to typeahead if the _beginning_ of the typeahead is a menu
        // navigation, or a selection. We will handle "Space" only if it's in the
        // middle of a typeahead
        if (event.code === 'Space' ||
            event.code === 'Enter' ||
            event.code.startsWith('Arrow') ||
            event.code === 'Escape') {
            return;
        }
        this.isTypingAhead = true;
        // Generates the record array data structure which is the index, the element
        // and a normalized header.
        this.typeaheadRecords = this.items.map((el, index) => [
            index,
            el,
            el.typeaheadText.trim().toLowerCase(),
        ]);
        this.lastActiveRecord =
            this.typeaheadRecords.find((record) => record[TYPEAHEAD_RECORD.ITEM].tabIndex === 0) ?? null;
        if (this.lastActiveRecord) {
            this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
        }
        this.typeahead(event);
    }
    /**
     * Performs the typeahead. Based on the normalized items and the current text
     * buffer, finds the _next_ item with matching text and activates it.
     *
     * @example
     *
     * items: Apple, Banana, Olive, Orange, Cucumber
     * buffer: ''
     * user types: o
     *
     * activates Olive
     *
     * @example
     *
     * items: Apple, Banana, Olive (active), Orange, Cucumber
     * buffer: 'o'
     * user types: l
     *
     * activates Olive
     *
     * @example
     *
     * items: Apple, Banana, Olive (active), Orange, Cucumber
     * buffer: ''
     * user types: o
     *
     * activates Orange
     *
     * @example
     *
     * items: Apple, Banana, Olive, Orange (active), Cucumber
     * buffer: ''
     * user types: o
     *
     * activates Olive
     */
    typeahead(event) {
        if (event.defaultPrevented)
            return;
        clearTimeout(this.cancelTypeaheadTimeout);
        // Stop typingahead if one of the navigation or selection keys (except for
        // Space) are pressed
        if (event.code === 'Enter' ||
            event.code.startsWith('Arrow') ||
            event.code === 'Escape') {
            this.endTypeahead();
            if (this.lastActiveRecord) {
                this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
            }
            return;
        }
        // If Space is pressed, prevent it from selecting and closing the menu
        if (event.code === 'Space') {
            event.preventDefault();
        }
        // Start up a new keystroke buffer timeout
        this.cancelTypeaheadTimeout = window.setTimeout(this.endTypeahead, this.getProperties().typeaheadBufferTime);
        this.typaheadBuffer += event.key.toLowerCase();
        const lastActiveIndex = this.lastActiveRecord
            ? this.lastActiveRecord[TYPEAHEAD_RECORD.INDEX]
            : -1;
        const numRecords = this.typeaheadRecords.length;
        /**
         * Sorting function that will resort the items starting with the given index
         *
         * @example
         *
         * this.typeaheadRecords =
         * 0: [0, <reference>, 'apple']
         * 1: [1, <reference>, 'apricot']
         * 2: [2, <reference>, 'banana']
         * 3: [3, <reference>, 'olive'] <-- lastActiveIndex
         * 4: [4, <reference>, 'orange']
         * 5: [5, <reference>, 'strawberry']
         *
         * this.typeaheadRecords.sort((a,b) => rebaseIndexOnActive(a)
         *                                       - rebaseIndexOnActive(b)) ===
         * 0: [3, <reference>, 'olive'] <-- lastActiveIndex
         * 1: [4, <reference>, 'orange']
         * 2: [5, <reference>, 'strawberry']
         * 3: [0, <reference>, 'apple']
         * 4: [1, <reference>, 'apricot']
         * 5: [2, <reference>, 'banana']
         */
        const rebaseIndexOnActive = (record) => {
            return ((record[TYPEAHEAD_RECORD.INDEX] + numRecords - lastActiveIndex) %
                numRecords);
        };
        // records filtered and sorted / rebased around the last active index
        const matchingRecords = this.typeaheadRecords
            .filter((record) => !record[TYPEAHEAD_RECORD.ITEM].disabled &&
            record[TYPEAHEAD_RECORD.TEXT].startsWith(this.typaheadBuffer))
            .sort((a, b) => rebaseIndexOnActive(a) - rebaseIndexOnActive(b));
        // Just leave if there's nothing that matches. Native select will just
        // choose the first thing that starts with the next letter in the alphabet
        // but that's out of scope and hard to localize
        if (matchingRecords.length === 0) {
            clearTimeout(this.cancelTypeaheadTimeout);
            if (this.lastActiveRecord) {
                this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
            }
            this.endTypeahead();
            return;
        }
        const isNewQuery = this.typaheadBuffer.length === 1;
        let nextRecord;
        // This is likely the case that someone is trying to "tab" through different
        // entries that start with the same letter
        if (this.lastActiveRecord === matchingRecords[0] && isNewQuery) {
            nextRecord = matchingRecords[1] ?? matchingRecords[0];
        }
        else {
            nextRecord = matchingRecords[0];
        }
        if (this.lastActiveRecord) {
            this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
        }
        this.lastActiveRecord = nextRecord;
        nextRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = 0;
        nextRecord[TYPEAHEAD_RECORD.ITEM].focus();
        return;
    }
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * The default value for the typeahead buffer time in Milliseconds.
 */
const DEFAULT_TYPEAHEAD_BUFFER_TIME = 200;
const submenuNavKeys = new Set([
    NavigableKeys.ArrowDown,
    NavigableKeys.ArrowUp,
    NavigableKeys.Home,
    NavigableKeys.End,
]);
const menuNavKeys = new Set([
    NavigableKeys.ArrowLeft,
    NavigableKeys.ArrowRight,
    ...submenuNavKeys,
]);
/**
 * Gets the currently focused element on the page.
 *
 * @param activeDoc The document or shadowroot from which to start the search.
 *    Defaults to `window.document`
 * @return Returns the currently deeply focused element or `null` if none.
 */
function getFocusedElement(activeDoc = document) {
    let activeEl = activeDoc.activeElement;
    // Check for activeElement in the case that an element with a shadow root host
    // is currently focused.
    while (activeEl && activeEl?.shadowRoot?.activeElement) {
        activeEl = activeEl.shadowRoot.activeElement;
    }
    return activeEl;
}
/**
 * @fires opening {Event} Fired before the opening animation begins
 * @fires opened {Event} Fired once the menu is open, after any animations
 * @fires closing {Event} Fired before the closing animation begins
 * @fires closed {Event} Fired once the menu is closed, after any animations
 */
class Menu extends ScopedElementsMixin(r$6) {
    /**
     * Whether the menu is animating upwards or downwards when opening. This is
     * helpful for calculating some animation calculations.
     */
    get openDirection() {
        const menuCornerBlock = this.menuCorner.split('-')[0];
        return menuCornerBlock === 'start' ? 'DOWN' : 'UP';
    }
    /**
     * The element which the menu should align to. If `anchor` is set to a
     * non-empty idref string, then `anchorEl` will resolve to the element with
     * the given id in the same root node. Otherwise, `null`.
     */
    get anchorElement() {
        if (this.anchor) {
            return this.getRootNode().querySelector(`#${this.anchor}`);
        }
        return this.currentAnchorElement;
    }
    set anchorElement(element) {
        this.currentAnchorElement = element;
        this.requestUpdate('anchorElement');
    }
    constructor() {
        super();
        /**
         * The ID of the element in the same root node in which the menu should align
         * to. Overrides setting `anchorElement = elementReference`.
         *
         * __NOTE__: anchor or anchorElement must either be an HTMLElement or resolve
         * to an HTMLElement in order for menu to open.
         */
        this.anchor = '';
        /**
         * Whether the positioning algorithm should calculate relative to the parent
         * of the anchor element (`absolute`), relative to the window (`fixed`), or
         * relative to the document (`document`). `popover` will use the popover API
         * to render the menu in the top-layer. If your browser does not support the
         * popover API, it will fall back to `fixed`.
         *
         * __Examples for `position = 'fixed'`:__
         *
         * - If there is no `position:relative` in the given parent tree and the
         *   surface is `position:absolute`
         * - If the surface is `position:fixed`
         * - If the surface is in the "top layer"
         * - The anchor and the surface do not share a common `position:relative`
         *   ancestor
         *
         * When using `positioning=fixed`, in most cases, the menu should position
         * itself above most other `position:absolute` or `position:fixed` elements
         * when placed inside of them. e.g. using a menu inside of an `md-dialog`.
         *
         * __NOTE__: Fixed menus will not scroll with the page and will be fixed to
         * the window instead.
         *
         * __Examples for `position = 'document'`:__
         *
         * - There is no parent that creates a relative positioning context e.g.
         *   `position: relative`, `position: absolute`, `transform: translate(x, y)`,
         *   etc.
         * - You put the effort into hoisting the menu to the top of the DOM like the
         *   end of the `<body>` to render over everything or in a top-layer.
         * - You are reusing a single `md-menu` element that dynamically renders
         *   content.
         *
         * __Examples for `position = 'popover'`:__
         *
         * - Your browser supports `popover`.
         * - Most cases. Once popover is in browsers, this will become the default.
         */
        this.positioning = 'absolute';
        /**
         * Skips the opening and closing animations.
         */
        this.quick = false;
        /**
         * Displays overflow content like a submenu. Not required in most cases when
         * using `positioning="popover"`.
         *
         * __NOTE__: This may cause adverse effects if you set
         * `md-menu {max-height:...}`
         * and have items overflowing items in the "y" direction.
         */
        this.hasOverflow = false;
        /**
         * Opens the menu and makes it visible. Alternative to the `.show()` and
         * `.close()` methods
         */
        this.open = false;
        /**
         * Offsets the menu's inline alignment from the anchor by the given number in
         * pixels. This value is direction aware and will follow the LTR / RTL
         * direction.
         *
         * e.g. LTR: positive -> right, negative -> left
         *      RTL: positive -> left, negative -> right
         */
        this.xOffset = 0;
        /**
         * Offsets the menu's block alignment from the anchor by the given number in
         * pixels.
         *
         * e.g. positive -> down, negative -> up
         */
        this.yOffset = 0;
        /**
         * Disable the `flip` behavior that usually happens on the horizontal axis
         * when the surface would render outside the viewport.
         */
        this.noHorizontalFlip = false;
        /**
         * Disable the `flip` behavior that usually happens on the vertical axis when
         * the surface would render outside the viewport.
         */
        this.noVerticalFlip = false;
        /**
         * The max time between the keystrokes of the typeahead menu behavior before
         * it clears the typeahead buffer.
         */
        this.typeaheadDelay = DEFAULT_TYPEAHEAD_BUFFER_TIME;
        /**
         * The corner of the anchor which to align the menu in the standard logical
         * property style of <block>-<inline> e.g. `'end-start'`.
         *
         * NOTE: This value may not be respected by the menu positioning algorithm
         * if the menu would render outisde the viewport.
         * Use `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value
         */
        this.anchorCorner = Corner.END_START;
        /**
         * The corner of the menu which to align the anchor in the standard logical
         * property style of <block>-<inline> e.g. `'start-start'`.
         *
         * NOTE: This value may not be respected by the menu positioning algorithm
         * if the menu would render outisde the viewport.
         * Use `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value
         */
        this.menuCorner = Corner.START_START;
        /**
         * Keeps the user clicks outside the menu.
         *
         * NOTE: clicking outside may still cause focusout to close the menu so see
         * `stayOpenOnFocusout`.
         */
        this.stayOpenOnOutsideClick = false;
        /**
         * Keeps the menu open when focus leaves the menu's composed subtree.
         *
         * NOTE: Focusout behavior will stop propagation of the focusout event. Set
         * this property to true to opt-out of menu's focusout handling altogether.
         */
        this.stayOpenOnFocusout = false;
        /**
         * After closing, does not restore focus to the last focused element before
         * the menu was opened.
         */
        this.skipRestoreFocus = false;
        /**
         * The element that should be focused by default once opened.
         *
         * NOTE: When setting default focus to 'LIST_ROOT', remember to change
         * `tabindex` to `0` and change md-menu's display to something other than
         * `display: contents` when necessary.
         */
        this.defaultFocus = FocusState.FIRST_ITEM;
        /**
         * Turns off navigation wrapping. By default, navigating past the end of the
         * menu items will wrap focus back to the beginning and vice versa. Use this
         * for ARIA patterns that do not wrap focus, like combobox.
         */
        this.noNavigationWrap = false;
        this.typeaheadActive = true;
        /**
         * Whether or not the current menu is a submenu and should not handle specific
         * navigation keys.
         *
         * @export
         */
        this.isSubmenu = false;
        /**
         * The event path of the last window pointerdown event.
         */
        this.pointerPath = [];
        /**
         * Whether or not the menu is repositoining due to window / document resize
         */
        this.isRepositioning = false;
        this.openCloseAnimationSignal = createAnimationSignal();
        this.listController = new ListController({
            isItem: (maybeItem) => {
                return maybeItem.hasAttribute('md-menu-item');
            },
            getPossibleItems: () => this.slotItems,
            isRtl: () => getComputedStyle(this).direction === 'rtl',
            deactivateItem: (item) => {
                item.selected = false;
                item.tabIndex = -1;
            },
            activateItem: (item) => {
                item.selected = true;
                item.tabIndex = 0;
            },
            isNavigableKey: (key) => {
                if (!this.isSubmenu) {
                    return menuNavKeys.has(key);
                }
                const isRtl = getComputedStyle(this).direction === 'rtl';
                // we want md-submenu to handle the submenu's left/right arrow exit
                // key so it can close the menu instead of navigate the list.
                // Therefore we need to include all keys but left/right arrow close
                // key
                const arrowOpen = isRtl
                    ? NavigableKeys.ArrowLeft
                    : NavigableKeys.ArrowRight;
                if (key === arrowOpen) {
                    return true;
                }
                return submenuNavKeys.has(key);
            },
            wrapNavigation: () => !this.noNavigationWrap,
        });
        /**
         * The element that was focused before the menu opened.
         */
        this.lastFocusedElement = null;
        /**
         * Handles typeahead navigation through the menu.
         */
        this.typeaheadController = new TypeaheadController(() => {
            return {
                getItems: () => this.items,
                typeaheadBufferTime: this.typeaheadDelay,
                active: this.typeaheadActive,
            };
        });
        this.currentAnchorElement = null;
        this.internals = 
        // Cast needed for closure
        this.attachInternals();
        /**
         * Handles positioning the surface and aligning it to the anchor as well as
         * keeping it in the viewport.
         */
        this.menuPositionController = new SurfacePositionController(this, () => {
            return {
                anchorCorner: this.anchorCorner,
                surfaceCorner: this.menuCorner,
                surfaceEl: this.surfaceEl,
                anchorEl: this.anchorElement,
                positioning: this.positioning === 'popover' ? 'document' : this.positioning,
                isOpen: this.open,
                xOffset: this.xOffset,
                yOffset: this.yOffset,
                disableBlockFlip: this.noVerticalFlip,
                disableInlineFlip: this.noHorizontalFlip,
                onOpen: this.onOpened,
                beforeClose: this.beforeClose,
                onClose: this.onClosed,
                // We can't resize components that have overflow like menus with
                // submenus because the overflow-y will show menu items / content
                // outside the bounds of the menu. Popover API fixes this because each
                // submenu is hoisted to the top-layer and are not considered overflow
                // content.
                repositionStrategy: this.hasOverflow && this.positioning !== 'popover'
                    ? 'move'
                    : 'resize',
            };
        });
        this.onWindowResize = () => {
            if (this.isRepositioning ||
                (this.positioning !== 'document' &&
                    this.positioning !== 'fixed' &&
                    this.positioning !== 'popover')) {
                return;
            }
            this.isRepositioning = true;
            this.reposition();
            this.isRepositioning = false;
        };
        this.handleFocusout = async (event) => {
            const anchorEl = this.anchorElement;
            // Do not close if we focused out by clicking on the anchor element. We
            // can't assume anchor buttons can be the related target because of iOS does
            // not focus buttons.
            if (this.stayOpenOnFocusout ||
                !this.open ||
                this.pointerPath.includes(anchorEl)) {
                return;
            }
            if (event.relatedTarget) {
                // Don't close the menu if we are switching focus between menu,
                // md-menu-item, and md-list or if the anchor was click focused, but check
                // if length of pointerPath is 0 because that means something was at least
                // clicked (shift+tab case).
                if (isElementInSubtree(event.relatedTarget, this) ||
                    (this.pointerPath.length !== 0 &&
                        isElementInSubtree(event.relatedTarget, anchorEl))) {
                    return;
                }
            }
            else if (this.pointerPath.includes(this)) {
                // If menu tabindex == -1 and the user clicks on the menu or a divider, we
                // want to keep the menu open.
                return;
            }
            const oldRestoreFocus = this.skipRestoreFocus;
            // allow focus to continue to the next focused object rather than returning
            this.skipRestoreFocus = true;
            this.close();
            // await for close
            await this.updateComplete;
            // return to previous behavior
            this.skipRestoreFocus = oldRestoreFocus;
        };
        /**
         * Saves the last focused element focuses the new element based on
         * `defaultFocus`, and animates open.
         */
        this.onOpened = async () => {
            this.lastFocusedElement = getFocusedElement();
            const items = this.items;
            const activeItemRecord = getActiveItem(items);
            if (activeItemRecord && this.defaultFocus !== FocusState.NONE) {
                activeItemRecord.item.tabIndex = -1;
            }
            let animationAborted = !this.quick;
            if (this.quick) {
                this.dispatchEvent(new Event('opening'));
            }
            else {
                animationAborted = !!(await this.animateOpen());
            }
            // This must come after the opening animation or else it may focus one of
            // the items before the animation has begun and causes the list to slide
            // (block-padding-of-the-menu)px at the end of the animation
            switch (this.defaultFocus) {
                case FocusState.FIRST_ITEM:
                    const first = getFirstActivatableItem(items);
                    if (first) {
                        first.tabIndex = 0;
                        first.focus();
                        await first.updateComplete;
                    }
                    break;
                case FocusState.LAST_ITEM:
                    const last = getLastActivatableItem(items);
                    if (last) {
                        last.tabIndex = 0;
                        last.focus();
                        await last.updateComplete;
                    }
                    break;
                case FocusState.LIST_ROOT:
                    this.focus();
                    break;
                default:
                case FocusState.NONE:
                    // Do nothing.
                    break;
            }
            if (!animationAborted) {
                this.dispatchEvent(new Event('opened'));
            }
        };
        /**
         * Animates closed.
         */
        this.beforeClose = async () => {
            this.open = false;
            if (!this.skipRestoreFocus) {
                this.lastFocusedElement?.focus?.();
            }
            if (!this.quick) {
                await this.animateClose();
            }
        };
        /**
         * Focuses the last focused element.
         */
        this.onClosed = () => {
            if (this.quick) {
                this.dispatchEvent(new Event('closing'));
                this.dispatchEvent(new Event('closed'));
            }
        };
        this.onWindowPointerdown = (event) => {
            this.pointerPath = event.composedPath();
        };
        /**
         * We cannot listen to window click because Safari on iOS will not bubble a
         * click event on window if the item clicked is not a "clickable" item such as
         * <body>
         */
        this.onDocumentClick = (event) => {
            if (!this.open) {
                return;
            }
            const path = event.composedPath();
            if (!this.stayOpenOnOutsideClick &&
                !path.includes(this) &&
                !path.includes(this.anchorElement)) {
                this.open = false;
            }
        };
        {
            this.internals.role = 'menu';
            this.addEventListener('keydown', this.handleKeydown);
            // Capture so that we can grab the event before it reaches the menu item
            // istelf. Specifically useful for the case where typeahead encounters a
            // space and we don't want the menu item to close the menu.
            this.addEventListener('keydown', this.captureKeydown, { capture: true });
            this.addEventListener('focusout', this.handleFocusout);
        }
    }
    /**
     * The menu items associated with this menu. The items must be `MenuItem`s and
     * have both the `md-menu-item` and `md-list-item` attributes.
     */
    get items() {
        return this.listController.items;
    }
    willUpdate(changed) {
        if (!changed.has('open')) {
            return;
        }
        if (this.open) {
            this.removeAttribute('aria-hidden');
            return;
        }
        this.setAttribute('aria-hidden', 'true');
    }
    update(changed) {
        if (changed.has('open')) {
            if (this.open) {
                this.setUpGlobalEventListeners();
            }
            else {
                this.cleanUpGlobalEventListeners();
            }
        }
        // Firefox does not support popover. Fall-back to using fixed.
        if (changed.has('positioning') &&
            this.positioning === 'popover' &&
            // type required for Google JS conformance
            !this.showPopover) {
            this.positioning = 'fixed';
        }
        super.update(changed);
    }
    connectedCallback() {
        super.connectedCallback();
        if (this.open) {
            this.setUpGlobalEventListeners();
        }
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.cleanUpGlobalEventListeners();
    }
    getBoundingClientRect() {
        if (!this.surfaceEl) {
            return super.getBoundingClientRect();
        }
        return this.surfaceEl.getBoundingClientRect();
    }
    getClientRects() {
        if (!this.surfaceEl) {
            return super.getClientRects();
        }
        return this.surfaceEl.getClientRects();
    }
    render() {
        return this.renderSurface();
    }
    /**
     * Renders the positionable surface element and its contents.
     */
    renderSurface() {
        return x$1 `
      <div
        class="menu ${e$1(this.getSurfaceClasses())}"
        style=${o$5(this.menuPositionController.surfaceStyles)}
        popover=${this.positioning === 'popover' ? 'manual' : E$1}>
        ${this.renderElevation()}
        <div class="items">
          <div class="item-padding"> ${this.renderMenuItems()} </div>
        </div>
      </div>
    `;
    }
    /**
     * Renders the menu items' slot
     */
    renderMenuItems() {
        return x$1 `<slot
      @close-menu=${this.onCloseMenu}
      @deactivate-items=${this.onDeactivateItems}
      @request-activation=${this.onRequestActivation}
      @deactivate-typeahead=${this.handleDeactivateTypeahead}
      @activate-typeahead=${this.handleActivateTypeahead}
      @stay-open-on-focusout=${this.handleStayOpenOnFocusout}
      @close-on-focusout=${this.handleCloseOnFocusout}
      @slotchange=${this.listController.onSlotchange}></slot>`;
    }
    /**
     * Renders the elevation component.
     */
    renderElevation() {
        return x$1 `<md-elevation part="elevation"></md-elevation>`;
    }
    getSurfaceClasses() {
        return {
            open: this.open,
            fixed: this.positioning === 'fixed',
            'has-overflow': this.hasOverflow,
        };
    }
    captureKeydown(event) {
        if (event.target === this &&
            !event.defaultPrevented &&
            isClosableKey(event.code)) {
            event.preventDefault();
            this.close();
        }
        this.typeaheadController.onKeydown(event);
    }
    /**
     * Performs the opening animation:
     *
     * https://direct.googleplex.com/#/spec/295000003+271060003
     *
     * @return A promise that resolve to `true` if the animation was aborted,
     *     `false` if it was not aborted.
     */
    async animateOpen() {
        const surfaceEl = this.surfaceEl;
        const slotEl = this.slotEl;
        if (!surfaceEl || !slotEl)
            return true;
        const openDirection = this.openDirection;
        this.dispatchEvent(new Event('opening'));
        // needs to be imperative because we don't want to mix animation and Lit
        // render timing
        surfaceEl.classList.toggle('animating', true);
        const signal = this.openCloseAnimationSignal.start();
        const height = surfaceEl.offsetHeight;
        const openingUpwards = openDirection === 'UP';
        const children = this.items;
        const FULL_DURATION = 500;
        const SURFACE_OPACITY_DURATION = 50;
        const ITEM_OPACITY_DURATION = 250;
        // We want to fit every child fade-in animation within the full duration of
        // the animation.
        const DELAY_BETWEEN_ITEMS = (FULL_DURATION - ITEM_OPACITY_DURATION) / children.length;
        const surfaceHeightAnimation = surfaceEl.animate([{ height: '0px' }, { height: `${height}px` }], {
            duration: FULL_DURATION,
            easing: EASING.EMPHASIZED,
        });
        // When we are opening upwards, we want to make sure the last item is always
        // in view, so we need to translate it upwards the opposite direction of the
        // height animation
        const upPositionCorrectionAnimation = slotEl.animate([
            { transform: openingUpwards ? `translateY(-${height}px)` : '' },
            { transform: '' },
        ], { duration: FULL_DURATION, easing: EASING.EMPHASIZED });
        const surfaceOpacityAnimation = surfaceEl.animate([{ opacity: 0 }, { opacity: 1 }], SURFACE_OPACITY_DURATION);
        const childrenAnimations = [];
        for (let i = 0; i < children.length; i++) {
            // If we are animating upwards, then reverse the children list.
            const directionalIndex = openingUpwards ? children.length - 1 - i : i;
            const child = children[directionalIndex];
            const animation = child.animate([{ opacity: 0 }, { opacity: 1 }], {
                duration: ITEM_OPACITY_DURATION,
                delay: DELAY_BETWEEN_ITEMS * i,
            });
            // Make them all initially hidden and then clean up at the end of each
            // animation.
            child.classList.toggle('md-menu-hidden', true);
            animation.addEventListener('finish', () => {
                child.classList.toggle('md-menu-hidden', false);
            });
            childrenAnimations.push([child, animation]);
        }
        let resolveAnimation = (value) => { };
        const animationFinished = new Promise((resolve) => {
            resolveAnimation = resolve;
        });
        signal.addEventListener('abort', () => {
            surfaceHeightAnimation.cancel();
            upPositionCorrectionAnimation.cancel();
            surfaceOpacityAnimation.cancel();
            childrenAnimations.forEach(([child, animation]) => {
                child.classList.toggle('md-menu-hidden', false);
                animation.cancel();
            });
            resolveAnimation(true);
        });
        surfaceHeightAnimation.addEventListener('finish', () => {
            surfaceEl.classList.toggle('animating', false);
            this.openCloseAnimationSignal.finish();
            resolveAnimation(false);
        });
        return await animationFinished;
    }
    /**
     * Performs the closing animation:
     *
     * https://direct.googleplex.com/#/spec/295000003+271060003
     */
    animateClose() {
        let resolve;
        // This promise blocks the surface position controller from setting
        // display: none on the surface which will interfere with this animation.
        const animationEnded = new Promise((res) => {
            resolve = res;
        });
        const surfaceEl = this.surfaceEl;
        const slotEl = this.slotEl;
        if (!surfaceEl || !slotEl) {
            resolve(false);
            return animationEnded;
        }
        const openDirection = this.openDirection;
        const closingDownwards = openDirection === 'UP';
        this.dispatchEvent(new Event('closing'));
        // needs to be imperative because we don't want to mix animation and Lit
        // render timing
        surfaceEl.classList.toggle('animating', true);
        const signal = this.openCloseAnimationSignal.start();
        const height = surfaceEl.offsetHeight;
        const children = this.items;
        const FULL_DURATION = 150;
        const SURFACE_OPACITY_DURATION = 50;
        // The surface fades away at the very end
        const SURFACE_OPACITY_DELAY = FULL_DURATION - SURFACE_OPACITY_DURATION;
        const ITEM_OPACITY_DURATION = 50;
        const ITEM_OPACITY_INITIAL_DELAY = 50;
        const END_HEIGHT_PERCENTAGE = 0.35;
        // We want to fit every child fade-out animation within the full duration of
        // the animation.
        const DELAY_BETWEEN_ITEMS = (FULL_DURATION - ITEM_OPACITY_INITIAL_DELAY - ITEM_OPACITY_DURATION) /
            children.length;
        // The mock has the animation shrink to 35%
        const surfaceHeightAnimation = surfaceEl.animate([
            { height: `${height}px` },
            { height: `${height * END_HEIGHT_PERCENTAGE}px` },
        ], {
            duration: FULL_DURATION,
            easing: EASING.EMPHASIZED_ACCELERATE,
        });
        // When we are closing downwards, we want to make sure the last item is
        // always in view, so we need to translate it upwards the opposite direction
        // of the height animation
        const downPositionCorrectionAnimation = slotEl.animate([
            { transform: '' },
            {
                transform: closingDownwards
                    ? `translateY(-${height * (1 - END_HEIGHT_PERCENTAGE)}px)`
                    : '',
            },
        ], { duration: FULL_DURATION, easing: EASING.EMPHASIZED_ACCELERATE });
        const surfaceOpacityAnimation = surfaceEl.animate([{ opacity: 1 }, { opacity: 0 }], { duration: SURFACE_OPACITY_DURATION, delay: SURFACE_OPACITY_DELAY });
        const childrenAnimations = [];
        for (let i = 0; i < children.length; i++) {
            // If the animation is closing upwards, then reverse the list of
            // children so that we animate in the opposite direction.
            const directionalIndex = closingDownwards ? i : children.length - 1 - i;
            const child = children[directionalIndex];
            const animation = child.animate([{ opacity: 1 }, { opacity: 0 }], {
                duration: ITEM_OPACITY_DURATION,
                delay: ITEM_OPACITY_INITIAL_DELAY + DELAY_BETWEEN_ITEMS * i,
            });
            // Make sure the items stay hidden at the end of each child animation.
            // We clean this up at the end of the overall animation.
            animation.addEventListener('finish', () => {
                child.classList.toggle('md-menu-hidden', true);
            });
            childrenAnimations.push([child, animation]);
        }
        signal.addEventListener('abort', () => {
            surfaceHeightAnimation.cancel();
            downPositionCorrectionAnimation.cancel();
            surfaceOpacityAnimation.cancel();
            childrenAnimations.forEach(([child, animation]) => {
                animation.cancel();
                child.classList.toggle('md-menu-hidden', false);
            });
            resolve(false);
        });
        surfaceHeightAnimation.addEventListener('finish', () => {
            surfaceEl.classList.toggle('animating', false);
            childrenAnimations.forEach(([child]) => {
                child.classList.toggle('md-menu-hidden', false);
            });
            this.openCloseAnimationSignal.finish();
            this.dispatchEvent(new Event('closed'));
            resolve(true);
        });
        return animationEnded;
    }
    handleKeydown(event) {
        // At any key event, the pointer interaction is done so we need to clear our
        // cached pointerpath. This handles the case where the user clicks on the
        // anchor, and then hits shift+tab
        this.pointerPath = [];
        this.listController.handleKeydown(event);
    }
    setUpGlobalEventListeners() {
        document.addEventListener('click', this.onDocumentClick, { capture: true });
        window.addEventListener('pointerdown', this.onWindowPointerdown);
        document.addEventListener('resize', this.onWindowResize, { passive: true });
        window.addEventListener('resize', this.onWindowResize, { passive: true });
    }
    cleanUpGlobalEventListeners() {
        document.removeEventListener('click', this.onDocumentClick, {
            capture: true,
        });
        window.removeEventListener('pointerdown', this.onWindowPointerdown);
        document.removeEventListener('resize', this.onWindowResize);
        window.removeEventListener('resize', this.onWindowResize);
    }
    onCloseMenu() {
        this.close();
    }
    onDeactivateItems(event) {
        event.stopPropagation();
        this.listController.onDeactivateItems();
    }
    onRequestActivation(event) {
        event.stopPropagation();
        this.listController.onRequestActivation(event);
    }
    handleDeactivateTypeahead(event) {
        // stopPropagation so that this does not deactivate any typeaheads in menus
        // nested above it e.g. md-sub-menu
        event.stopPropagation();
        this.typeaheadActive = false;
    }
    handleActivateTypeahead(event) {
        // stopPropagation so that this does not activate any typeaheads in menus
        // nested above it e.g. md-sub-menu
        event.stopPropagation();
        this.typeaheadActive = true;
    }
    handleStayOpenOnFocusout(event) {
        event.stopPropagation();
        this.stayOpenOnFocusout = true;
    }
    handleCloseOnFocusout(event) {
        event.stopPropagation();
        this.stayOpenOnFocusout = false;
    }
    close() {
        this.open = false;
        const maybeSubmenu = this.slotItems;
        maybeSubmenu.forEach((item) => {
            item.close?.();
        });
    }
    show() {
        this.open = true;
    }
    /**
     * Activates the next item in the menu. If at the end of the menu, the first
     * item will be activated.
     *
     * @return The activated menu item or `null` if there are no items.
     */
    activateNextItem() {
        return this.listController.activateNextItem() ?? null;
    }
    /**
     * Activates the previous item in the menu. If at the start of the menu, the
     * last item will be activated.
     *
     * @return The activated menu item or `null` if there are no items.
     */
    activatePreviousItem() {
        return this.listController.activatePreviousItem() ?? null;
    }
    /**
     * Repositions the menu if it is open.
     *
     * Useful for the case where document or window-positioned menus have their
     * anchors moved while open.
     */
    reposition() {
        if (this.open) {
            this.menuPositionController.position();
        }
    }
}
Menu.scopedElements = {
    'md-focus-ring': MdFocusRing,
    'md-elevation': MdElevation,
};
__decorate([
    e$d('.menu')
], Menu.prototype, "surfaceEl", void 0);
__decorate([
    e$d('slot')
], Menu.prototype, "slotEl", void 0);
__decorate([
    n$j()
], Menu.prototype, "anchor", void 0);
__decorate([
    n$j()
], Menu.prototype, "positioning", void 0);
__decorate([
    n$j({ type: Boolean })
], Menu.prototype, "quick", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'has-overflow' })
], Menu.prototype, "hasOverflow", void 0);
__decorate([
    n$j({ type: Boolean, reflect: true })
], Menu.prototype, "open", void 0);
__decorate([
    n$j({ type: Number, attribute: 'x-offset' })
], Menu.prototype, "xOffset", void 0);
__decorate([
    n$j({ type: Number, attribute: 'y-offset' })
], Menu.prototype, "yOffset", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'no-horizontal-flip' })
], Menu.prototype, "noHorizontalFlip", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'no-vertical-flip' })
], Menu.prototype, "noVerticalFlip", void 0);
__decorate([
    n$j({ type: Number, attribute: 'typeahead-delay' })
], Menu.prototype, "typeaheadDelay", void 0);
__decorate([
    n$j({ attribute: 'anchor-corner' })
], Menu.prototype, "anchorCorner", void 0);
__decorate([
    n$j({ attribute: 'menu-corner' })
], Menu.prototype, "menuCorner", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'stay-open-on-outside-click' })
], Menu.prototype, "stayOpenOnOutsideClick", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'stay-open-on-focusout' })
], Menu.prototype, "stayOpenOnFocusout", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'skip-restore-focus' })
], Menu.prototype, "skipRestoreFocus", void 0);
__decorate([
    n$j({ attribute: 'default-focus' })
], Menu.prototype, "defaultFocus", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'no-navigation-wrap' })
], Menu.prototype, "noNavigationWrap", void 0);
__decorate([
    o$j({ flatten: true })
], Menu.prototype, "slotItems", void 0);
__decorate([
    r$4()
], Menu.prototype, "typeaheadActive", void 0);

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$9 = i$c `:host{--md-elevation-level: var(--md-menu-container-elevation, 2);--md-elevation-shadow-color: var(--md-menu-container-shadow-color, var(--md-sys-color-shadow, #000));min-width:112px;color:unset;display:contents}md-focus-ring{--md-focus-ring-shape: var(--md-menu-container-shape, var(--md-sys-shape-corner-extra-small, 4px))}.menu{border-radius:var(--md-menu-container-shape, var(--md-sys-shape-corner-extra-small, 4px));display:none;inset:auto;border:none;padding:0px;overflow:visible;background-color:rgba(0,0,0,0);color:inherit;opacity:0;z-index:20;position:absolute;user-select:none;max-height:inherit;height:inherit;min-width:inherit;max-width:inherit;scrollbar-width:inherit}.menu::backdrop{display:none}.fixed{position:fixed}.items{display:block;list-style-type:none;margin:0;outline:none;box-sizing:border-box;background-color:var(--md-menu-container-color, var(--md-sys-color-surface-container, #f3edf7));height:inherit;max-height:inherit;overflow:auto;min-width:inherit;max-width:inherit;border-radius:inherit;scrollbar-width:inherit}.item-padding{padding-block:8px}.has-overflow:not([popover]) .items{overflow:visible}.has-overflow.animating .items,.animating .items{overflow:hidden}.has-overflow.animating .items{pointer-events:none}.animating ::slotted(.md-menu-hidden){opacity:0}slot{display:block;height:inherit;max-height:inherit}::slotted(:is(md-divider,[role=separator])){margin:8px 0}@media(forced-colors: active){.menu{border-style:solid;border-color:CanvasText;border-width:1px}}
`;

class MdMenu extends Menu {
}
MdMenu.styles = [styles$9];

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A controller that provides most functionality of an element that implements
 * the MenuItem interface.
 */
class MenuItemController {
    /**
     * @param host The MenuItem in which to attach this controller to.
     * @param config The object that configures this controller's behavior.
     */
    constructor(host, config) {
        this.host = host;
        this.internalTypeaheadText = null;
        /**
         * Bind this click listener to the interactive element. Handles closing the
         * menu.
         */
        this.onClick = () => {
            if (this.host.keepOpen)
                return;
            this.host.dispatchEvent(createDefaultCloseMenuEvent(this.host, {
                kind: CloseReason.CLICK_SELECTION,
            }));
        };
        /**
         * Bind this click listener to the interactive element. Handles closing the
         * menu.
         */
        this.onKeydown = (event) => {
            // Check if the interactive element is an anchor tag. If so, click it.
            if (this.host.href && event.code === 'Enter') {
                const interactiveElement = this.getInteractiveElement();
                if (interactiveElement instanceof HTMLAnchorElement) {
                    interactiveElement.click();
                }
            }
            if (event.defaultPrevented)
                return;
            // If the host has keepOpen = true we should ignore clicks & Space/Enter,
            // however we always maintain the ability to close a menu with a explicit
            // `escape` keypress.
            const keyCode = event.code;
            if (this.host.keepOpen && keyCode !== 'Escape')
                return;
            if (isClosableKey(keyCode)) {
                event.preventDefault();
                this.host.dispatchEvent(createDefaultCloseMenuEvent(this.host, {
                    kind: CloseReason.KEYDOWN,
                    key: keyCode,
                }));
            }
        };
        this.getHeadlineElements = config.getHeadlineElements;
        this.getSupportingTextElements = config.getSupportingTextElements;
        this.getDefaultElements = config.getDefaultElements;
        this.getInteractiveElement = config.getInteractiveElement;
        this.host.addController(this);
    }
    /**
     * The text that is selectable via typeahead. If not set, defaults to the
     * innerText of the item slotted into the `"headline"` slot, and if there are
     * no slotted elements into headline, then it checks the _default_ slot, and
     * then the `"supporting-text"` slot if nothing is in _default_.
     */
    get typeaheadText() {
        if (this.internalTypeaheadText !== null) {
            return this.internalTypeaheadText;
        }
        const headlineElements = this.getHeadlineElements();
        const textParts = [];
        headlineElements.forEach((headlineElement) => {
            if (headlineElement.textContent && headlineElement.textContent.trim()) {
                textParts.push(headlineElement.textContent.trim());
            }
        });
        // If there are no headline elements, check the default slot's text content
        if (textParts.length === 0) {
            this.getDefaultElements().forEach((defaultElement) => {
                if (defaultElement.textContent && defaultElement.textContent.trim()) {
                    textParts.push(defaultElement.textContent.trim());
                }
            });
        }
        // If there are no headline nor default slot elements, check the
        //supporting-text slot's text content
        if (textParts.length === 0) {
            this.getSupportingTextElements().forEach((supportingTextElement) => {
                if (supportingTextElement.textContent &&
                    supportingTextElement.textContent.trim()) {
                    textParts.push(supportingTextElement.textContent.trim());
                }
            });
        }
        return textParts.join(' ');
    }
    /**
     * The recommended tag name to render as the list item.
     */
    get tagName() {
        const type = this.host.type;
        switch (type) {
            case 'link':
                return 'a';
            case 'button':
                return 'button';
            default:
            case 'menuitem':
            case 'option':
                return 'li';
        }
    }
    /**
     * The recommended role of the menu item.
     */
    get role() {
        return this.host.type === 'option' ? 'option' : 'menuitem';
    }
    hostConnected() {
        this.host.toggleAttribute('md-menu-item', true);
    }
    hostUpdate() {
        if (this.host.href) {
            this.host.type = 'link';
        }
    }
    /**
     * Use to set the typeaheadText when it changes.
     */
    setTypeaheadText(text) {
        this.internalTypeaheadText = text;
    }
}

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Separate variable needed for closure.
const menuItemBaseClass = mixinDelegatesAria(ScopedElementsMixin(r$6));
/**
 * @fires close-menu {CustomEvent<{initiator: SelectOption, reason: Reason, itemPath: SelectOption[]}>}
 * Closes the encapsulating menu on closable interaction. --bubbles --composed
 */
class MenuItemEl extends menuItemBaseClass {
    constructor() {
        super(...arguments);
        /**
         * Disables the item and makes it non-selectable and non-interactive.
         */
        this.disabled = false;
        /**
         * Sets the behavior and role of the menu item, defaults to "menuitem".
         */
        this.type = 'menuitem';
        /**
         * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.
         */
        this.href = '';
        /**
         * Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is
         * set.
         */
        this.target = '';
        /**
         * Keeps the menu open if clicked or keyboard selected.
         */
        this.keepOpen = false;
        /**
         * Sets the item in the selected visual state when a submenu is opened.
         */
        this.selected = false;
        this.menuItemController = new MenuItemController(this, {
            getHeadlineElements: () => {
                return this.headlineElements;
            },
            getSupportingTextElements: () => {
                return this.supportingTextElements;
            },
            getDefaultElements: () => {
                return this.defaultElements;
            },
            getInteractiveElement: () => this.listItemRoot,
        });
    }
    /**
     * The text that is selectable via typeahead. If not set, defaults to the
     * innerText of the item slotted into the `"headline"` slot.
     */
    get typeaheadText() {
        return this.menuItemController.typeaheadText;
    }
    set typeaheadText(text) {
        this.menuItemController.setTypeaheadText(text);
    }
    render() {
        return this.renderListItem(x$1 `
      <md-item>
        <div slot="container">
          ${this.renderRipple()} ${this.renderFocusRing()}
        </div>
        <slot name="start" slot="start"></slot>
        <slot name="end" slot="end"></slot>
        ${this.renderBody()}
      </md-item>
    `);
    }
    /**
     * Renders the root list item.
     *
     * @param content the child content of the list item.
     */
    renderListItem(content) {
        const isAnchor = this.type === 'link';
        let tag;
        switch (this.menuItemController.tagName) {
            case 'a':
                tag = i$1 `a`;
                break;
            case 'button':
                tag = i$1 `button`;
                break;
            default:
            case 'li':
                tag = i$1 `li`;
                break;
        }
        // TODO(b/265339866): announce "button"/"link" inside of a list item. Until
        // then all are "menuitem" roles for correct announcement.
        const target = isAnchor && !!this.target ? this.target : E$1;
        return u$1 `
      <${tag}
        id="item"
        tabindex=${this.disabled && !isAnchor ? -1 : 0}
        role=${this.menuItemController.role}
        aria-label=${this.ariaLabel || E$1}
        aria-selected=${this.ariaSelected || E$1}
        aria-checked=${this.ariaChecked || E$1}
        aria-expanded=${this.ariaExpanded || E$1}
        aria-haspopup=${this.ariaHasPopup || E$1}
        class="list-item ${e$1(this.getRenderClasses())}"
        href=${this.href || E$1}
        target=${target}
        @click=${this.menuItemController.onClick}
        @keydown=${this.menuItemController.onKeydown}
      >${content}</${tag}>
    `;
    }
    /**
     * Handles rendering of the ripple element.
     */
    renderRipple() {
        return x$1 ` <md-ripple
      part="ripple"
      for="item"
      ?disabled=${this.disabled}></md-ripple>`;
    }
    /**
     * Handles rendering of the focus ring.
     */
    renderFocusRing() {
        return x$1 ` <md-focus-ring
      part="focus-ring"
      for="item"
      inward></md-focus-ring>`;
    }
    /**
     * Classes applied to the list item root.
     */
    getRenderClasses() {
        return {
            'disabled': this.disabled,
            'selected': this.selected,
        };
    }
    /**
     * Handles rendering the headline and supporting text.
     */
    renderBody() {
        return x$1 `
      <slot></slot>
      <slot name="overline" slot="overline"></slot>
      <slot name="headline" slot="headline"></slot>
      <slot name="supporting-text" slot="supporting-text"></slot>
      <slot
        name="trailing-supporting-text"
        slot="trailing-supporting-text"></slot>
    `;
    }
    focus() {
        // TODO(b/300334509): needed for some cases where delegatesFocus doesn't
        // work programmatically like in FF and select-option
        this.listItemRoot?.focus();
    }
}
/** @nocollapse */
MenuItemEl.shadowRootOptions = {
    ...r$6.shadowRootOptions,
    delegatesFocus: true,
};
MenuItemEl.scopedElements = {
    'md-focus-ring': MdFocusRing,
    'md-item': MdItem,
    'md-ripple': MdRipple,
};
__decorate([
    n$j({ type: Boolean, reflect: true })
], MenuItemEl.prototype, "disabled", void 0);
__decorate([
    n$j()
], MenuItemEl.prototype, "type", void 0);
__decorate([
    n$j()
], MenuItemEl.prototype, "href", void 0);
__decorate([
    n$j()
], MenuItemEl.prototype, "target", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'keep-open' })
], MenuItemEl.prototype, "keepOpen", void 0);
__decorate([
    n$j({ type: Boolean })
], MenuItemEl.prototype, "selected", void 0);
__decorate([
    e$d('.list-item')
], MenuItemEl.prototype, "listItemRoot", void 0);
__decorate([
    o$j({ slot: 'headline' })
], MenuItemEl.prototype, "headlineElements", void 0);
__decorate([
    o$j({ slot: 'supporting-text' })
], MenuItemEl.prototype, "supportingTextElements", void 0);
__decorate([
    n$i({ slot: '' })
], MenuItemEl.prototype, "defaultElements", void 0);
__decorate([
    n$j({ attribute: 'typeahead-text' })
], MenuItemEl.prototype, "typeaheadText", null);

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$8 = i$c `:host{display:flex;--md-ripple-hover-color: var(--md-menu-item-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-menu-item-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-menu-item-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-menu-item-pressed-state-layer-opacity, 0.12)}:host([disabled]){opacity:var(--md-menu-item-disabled-opacity, 0.3);pointer-events:none}md-focus-ring{z-index:1;--md-focus-ring-shape: 8px}a,button,li{background:none;border:none;padding:0;margin:0;text-align:unset;text-decoration:none}.list-item{border-radius:inherit;display:flex;flex:1;max-width:inherit;min-width:inherit;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.list-item:not(.disabled){cursor:pointer}[slot=container]{pointer-events:none}md-ripple{border-radius:inherit}md-item{border-radius:inherit;flex:1;color:var(--md-menu-item-label-text-color, var(--md-sys-color-on-surface, #1d1b20));font-family:var(--md-menu-item-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-menu-item-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));line-height:var(--md-menu-item-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));font-weight:var(--md-menu-item-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));min-height:var(--md-menu-item-one-line-container-height, 56px);padding-top:var(--md-menu-item-top-space, 12px);padding-bottom:var(--md-menu-item-bottom-space, 12px);padding-inline-start:var(--md-menu-item-leading-space, 16px);padding-inline-end:var(--md-menu-item-trailing-space, 16px)}md-item[multiline]{min-height:var(--md-menu-item-two-line-container-height, 72px)}[slot=supporting-text]{color:var(--md-menu-item-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));font-family:var(--md-menu-item-supporting-text-font, var(--md-sys-typescale-body-medium-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-menu-item-supporting-text-size, var(--md-sys-typescale-body-medium-size, 0.875rem));line-height:var(--md-menu-item-supporting-text-line-height, var(--md-sys-typescale-body-medium-line-height, 1.25rem));font-weight:var(--md-menu-item-supporting-text-weight, var(--md-sys-typescale-body-medium-weight, var(--md-ref-typeface-weight-regular, 400)))}[slot=trailing-supporting-text]{color:var(--md-menu-item-trailing-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));font-family:var(--md-menu-item-trailing-supporting-text-font, var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-menu-item-trailing-supporting-text-size, var(--md-sys-typescale-label-small-size, 0.6875rem));line-height:var(--md-menu-item-trailing-supporting-text-line-height, var(--md-sys-typescale-label-small-line-height, 1rem));font-weight:var(--md-menu-item-trailing-supporting-text-weight, var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500)))}:is([slot=start],[slot=end])::slotted(*){fill:currentColor}[slot=start]{color:var(--md-menu-item-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f))}[slot=end]{color:var(--md-menu-item-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f))}.list-item{background-color:var(--md-menu-item-container-color, transparent)}.list-item.selected{background-color:var(--md-menu-item-selected-container-color, var(--md-sys-color-secondary-container, #e8def8))}.selected:not(.disabled) ::slotted(*){color:var(--md-menu-item-selected-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b))}@media(forced-colors: active){:host([disabled]),:host([disabled]) slot{color:GrayText;opacity:1}.list-item{position:relative}.list-item.selected::before{content:"";position:absolute;inset:0;box-sizing:border-box;border-radius:inherit;pointer-events:none;border:3px double CanvasText}}
`;

class MdMenuItem extends MenuItemEl {
}
MdMenuItem.styles = [styles$8];

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const f=o=>void 0===o.strings,u={},m=(o,t=u)=>o._$AH=t;

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const l$6=e$2(class extends i$2{constructor(r){if(super(r),r.type!==t.PROPERTY&&r.type!==t.ATTRIBUTE&&r.type!==t.BOOLEAN_ATTRIBUTE)throw Error("The `live` directive is not allowed on child or event bindings");if(!f(r))throw Error("`live` bindings can only contain a single expression")}render(r){return r}update(i,[t$1]){if(t$1===T$2||t$1===E$2)return t$1;const o=i.element,l=i.name;if(i.type===t.PROPERTY){if(t$1===o[l])return T$2}else if(i.type===t.BOOLEAN_ATTRIBUTE){if(!!t$1===o.hasAttribute(l))return T$2}else if(i.type===t.ATTRIBUTE&&o.getAttribute(l)===t$1+"")return T$2;return m(i),t$1}});

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const stringConverter = {
    fromAttribute(value) {
        return value ?? '';
    },
    toAttribute(value) {
        return value || null;
    },
};

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A symbol property used to create a constraint validation `Validator`.
 * Required for all `mixinConstraintValidation()` elements.
 */
const createValidator = Symbol('createValidator');
/**
 * A symbol property used to return an anchor for constraint validation popups.
 * Required for all `mixinConstraintValidation()` elements.
 */
const getValidityAnchor = Symbol('getValidityAnchor');
// Private symbol members, used to avoid name clashing.
const privateValidator = Symbol('privateValidator');
const privateSyncValidity = Symbol('privateSyncValidity');
const privateCustomValidationMessage = Symbol('privateCustomValidationMessage');
/**
 * Mixes in constraint validation APIs for an element.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation
 * for more details.
 *
 * Implementations must provide a validator to cache and compute its validity,
 * along with a shadow root element to anchor validation popups to.
 *
 * @example
 * ```ts
 * const baseClass = mixinConstraintValidation(
 *   mixinFormAssociated(mixinElementInternals(LitElement))
 * );
 *
 * class MyCheckbox extends baseClass {
 *   \@property({type: Boolean}) checked = false;
 *   \@property({type: Boolean}) required = false;
 *
 *   [createValidator]() {
 *     return new CheckboxValidator(() => this);
 *   }
 *
 *   [getValidityAnchor]() {
 *     return this.renderRoot.querySelector('.root');
 *   }
 * }
 * ```
 *
 * @param base The class to mix functionality into.
 * @return The provided class with `ConstraintValidation` mixed in.
 */
function mixinConstraintValidation(base) {
    var _a;
    class ConstraintValidationElement extends base {
        constructor() {
            super(...arguments);
            /**
             * Needed for Safari, see https://bugs.webkit.org/show_bug.cgi?id=261432
             * Replace with this[internals].validity.customError when resolved.
             */
            this[_a] = '';
        }
        get validity() {
            this[privateSyncValidity]();
            return this[internals].validity;
        }
        get validationMessage() {
            this[privateSyncValidity]();
            return this[internals].validationMessage;
        }
        get willValidate() {
            this[privateSyncValidity]();
            return this[internals].willValidate;
        }
        checkValidity() {
            this[privateSyncValidity]();
            return this[internals].checkValidity();
        }
        reportValidity() {
            this[privateSyncValidity]();
            return this[internals].reportValidity();
        }
        setCustomValidity(error) {
            this[privateCustomValidationMessage] = error;
            this[privateSyncValidity]();
        }
        requestUpdate(name, oldValue, options) {
            super.requestUpdate(name, oldValue, options);
            this[privateSyncValidity]();
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            // Sync the validity again when the element first renders, since the
            // validity anchor is now available.
            //
            // Elements that `delegatesFocus: true` to an `<input>` will throw an
            // error in Chrome and Safari when a form tries to submit or call
            // `form.reportValidity()`:
            // "An invalid form control with name='' is not focusable"
            //
            // The validity anchor MUST be provided in `internals.setValidity()` and
            // MUST be the `<input>` element rendered.
            //
            // See https://lit.dev/playground/#gist=6c26e418e0010f7a5aac15005cde8bde
            // for a reproduction.
            this[privateSyncValidity]();
        }
        [(_a = privateCustomValidationMessage, privateSyncValidity)]() {
            if (!this[privateValidator]) {
                this[privateValidator] = this[createValidator]();
            }
            const { validity, validationMessage: nonCustomValidationMessage } = this[privateValidator].getValidity();
            const customError = !!this[privateCustomValidationMessage];
            const validationMessage = this[privateCustomValidationMessage] || nonCustomValidationMessage;
            this[internals].setValidity({ ...validity, customError }, validationMessage, this[getValidityAnchor]() ?? undefined);
        }
        [createValidator]() {
            throw new Error('Implement [createValidator]');
        }
        [getValidityAnchor]() {
            throw new Error('Implement [getValidityAnchor]');
        }
    }
    return ConstraintValidationElement;
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A symbol property to retrieve the form value for an element.
 */
const getFormValue = Symbol('getFormValue');
/**
 * A symbol property to retrieve the form state for an element.
 */
const getFormState = Symbol('getFormState');
/**
 * Mixes in form-associated behavior for a class. This allows an element to add
 * values to `<form>` elements.
 *
 * Implementing classes should provide a `[formValue]` to return the current
 * value of the element, as well as reset and restore callbacks.
 *
 * @example
 * ```ts
 * const base = mixinFormAssociated(mixinElementInternals(LitElement));
 *
 * class MyControl extends base {
 *   \@property()
 *   value = '';
 *
 *   override [getFormValue]() {
 *     return this.value;
 *   }
 *
 *   override formResetCallback() {
 *     const defaultValue = this.getAttribute('value');
 *     this.value = defaultValue;
 *   }
 *
 *   override formStateRestoreCallback(state: string) {
 *     this.value = state;
 *   }
 * }
 * ```
 *
 * Elements may optionally provide a `[formState]` if their values do not
 * represent the state of the component.
 *
 * @example
 * ```ts
 * const base = mixinFormAssociated(mixinElementInternals(LitElement));
 *
 * class MyCheckbox extends base {
 *   \@property()
 *   value = 'on';
 *
 *   \@property({type: Boolean})
 *   checked = false;
 *
 *   override [getFormValue]() {
 *     return this.checked ? this.value : null;
 *   }
 *
 *   override [getFormState]() {
 *     return String(this.checked);
 *   }
 *
 *   override formResetCallback() {
 *     const defaultValue = this.hasAttribute('checked');
 *     this.checked = defaultValue;
 *   }
 *
 *   override formStateRestoreCallback(state: string) {
 *     this.checked = Boolean(state);
 *   }
 * }
 * ```
 *
 * IMPORTANT: Requires declares for lit-analyzer
 * @example
 * ```ts
 * const base = mixinFormAssociated(mixinElementInternals(LitElement));
 * class MyControl extends base {
 *   // Writable mixin properties for lit-html binding, needed for lit-analyzer
 *   declare disabled: boolean;
 *   declare name: string;
 * }
 * ```
 *
 * @param base The class to mix functionality into. The base class must use
 *     `mixinElementInternals()`.
 * @return The provided class with `FormAssociated` mixed in.
 */
function mixinFormAssociated(base) {
    class FormAssociatedElement extends base {
        get form() {
            return this[internals].form;
        }
        get labels() {
            return this[internals].labels;
        }
        // Use @property for the `name` and `disabled` properties to add them to the
        // `observedAttributes` array and trigger `attributeChangedCallback()`.
        //
        // We don't use Lit's default getter/setter (`noAccessor: true`) because
        // the attributes need to be updated synchronously to work with synchronous
        // form APIs, and Lit updates attributes async by default.
        get name() {
            return this.getAttribute('name') ?? '';
        }
        set name(name) {
            // Note: setting name to null or empty does not remove the attribute.
            this.setAttribute('name', name);
            // We don't need to call `requestUpdate()` since it's called synchronously
            // in `attributeChangedCallback()`.
        }
        get disabled() {
            return this.hasAttribute('disabled');
        }
        set disabled(disabled) {
            this.toggleAttribute('disabled', disabled);
            // We don't need to call `requestUpdate()` since it's called synchronously
            // in `attributeChangedCallback()`.
        }
        attributeChangedCallback(name, old, value) {
            // Manually `requestUpdate()` for `name` and `disabled` when their
            // attribute or property changes.
            // The properties update their attributes, so this callback is invoked
            // immediately when the properties are set. We call `requestUpdate()` here
            // instead of letting Lit set the properties from the attribute change.
            // That would cause the properties to re-set the attribute and invoke this
            // callback again in a loop. This leads to stale state when Lit tries to
            // determine if a property changed or not.
            if (name === 'name' || name === 'disabled') {
                // Disabled's value is only false if the attribute is missing and null.
                const oldValue = name === 'disabled' ? old !== null : old;
                // Trigger a lit update when the attribute changes.
                this.requestUpdate(name, oldValue);
                return;
            }
            super.attributeChangedCallback(name, old, value);
        }
        requestUpdate(name, oldValue, options) {
            super.requestUpdate(name, oldValue, options);
            // If any properties change, update the form value, which may have changed
            // as well.
            // Update the form value synchronously in `requestUpdate()` rather than
            // `update()` or `updated()`, which are async. This is necessary to ensure
            // that form data is updated in time for synchronous event listeners.
            this[internals].setFormValue(this[getFormValue](), this[getFormState]());
        }
        [getFormValue]() {
            // Closure does not allow abstract symbol members, so a default
            // implementation is needed.
            throw new Error('Implement [getFormValue]');
        }
        [getFormState]() {
            return this[getFormValue]();
        }
        formDisabledCallback(disabled) {
            this.disabled = disabled;
        }
    }
    /** @nocollapse */
    FormAssociatedElement.formAssociated = true;
    __decorate([
        n$j({ noAccessor: true })
    ], FormAssociatedElement.prototype, "name", null);
    __decorate([
        n$j({ type: Boolean, noAccessor: true })
    ], FormAssociatedElement.prototype, "disabled", null);
    return FormAssociatedElement;
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A symbol property used for a callback when validity has been reported.
 */
const onReportValidity = Symbol('onReportValidity');
// Private symbol members, used to avoid name clashing.
const privateCleanupFormListeners = Symbol('privateCleanupFormListeners');
const privateDoNotReportInvalid = Symbol('privateDoNotReportInvalid');
const privateIsSelfReportingValidity = Symbol('privateIsSelfReportingValidity');
const privateCallOnReportValidity = Symbol('privateCallOnReportValidity');
/**
 * Mixes in a callback for constraint validation when validity should be
 * styled and reported to the user.
 *
 * This is commonly used in text-field-like controls that display error styles
 * and error messages.
 *
 * @example
 * ```ts
 * const baseClass = mixinOnReportValidity(
 *   mixinConstraintValidation(
 *     mixinFormAssociated(mixinElementInternals(LitElement)),
 *   ),
 * );
 *
 * class MyField extends baseClass {
 *   \@property({type: Boolean}) error = false;
 *   \@property() errorMessage = '';
 *
 *   [onReportValidity](invalidEvent: Event | null) {
 *     this.error = !!invalidEvent;
 *     this.errorMessage = this.validationMessage;
 *
 *     // Optionally prevent platform popup from displaying
 *     invalidEvent?.preventDefault();
 *   }
 * }
 * ```
 *
 * @param base The class to mix functionality into.
 * @return The provided class with `OnReportValidity` mixed in.
 */
function mixinOnReportValidity(base) {
    var _a, _b, _c;
    class OnReportValidityElement extends base {
        // Mixins must have a constructor with `...args: any[]`
        // tslint:disable-next-line:no-any
        constructor(...args) {
            super(...args);
            /**
             * Used to clean up event listeners when a new form is associated.
             */
            this[_a] = new AbortController();
            /**
             * Used to determine if an invalid event should report validity. Invalid
             * events from `checkValidity()` do not trigger reporting.
             */
            this[_b] = false;
            /**
             * Used to determine if the control is reporting validity from itself, or
             * if a `<form>` is causing the validity report. Forms have different
             * control focusing behavior.
             */
            this[_c] = false;
            this.addEventListener('invalid', (invalidEvent) => {
                // Listen for invalid events dispatched by a `<form>` when it tries to
                // submit and the element is invalid. We ignore events dispatched when
                // calling `checkValidity()` as well as untrusted events, since the
                // `reportValidity()` and `<form>`-dispatched events are always
                // trusted.
                if (this[privateDoNotReportInvalid] || !invalidEvent.isTrusted) {
                    return;
                }
                this.addEventListener('invalid', () => {
                    // A normal bubbling phase event listener. By adding it here, we
                    // ensure it's the last event listener that is called during the
                    // bubbling phase.
                    this[privateCallOnReportValidity](invalidEvent);
                }, { once: true });
            }, {
                // Listen during the capture phase, which will happen before the
                // bubbling phase. That way, we can add a final event listener that
                // will run after other event listeners, and we can check if it was
                // default prevented. This works because invalid does not bubble.
                capture: true,
            });
        }
        checkValidity() {
            this[privateDoNotReportInvalid] = true;
            const valid = super.checkValidity();
            this[privateDoNotReportInvalid] = false;
            return valid;
        }
        reportValidity() {
            this[privateIsSelfReportingValidity] = true;
            const valid = super.reportValidity();
            // Constructor's invalid listener will handle reporting invalid events.
            if (valid) {
                this[privateCallOnReportValidity](null);
            }
            this[privateIsSelfReportingValidity] = false;
            return valid;
        }
        [(_a = privateCleanupFormListeners, _b = privateDoNotReportInvalid, _c = privateIsSelfReportingValidity, privateCallOnReportValidity)](invalidEvent) {
            // Since invalid events do not bubble to parent listeners, and because
            // our invalid listeners are added lazily after other listeners, we can
            // reliably read `defaultPrevented` synchronously without worrying
            // about waiting for another listener that could cancel it.
            const wasCanceled = invalidEvent?.defaultPrevented;
            if (wasCanceled) {
                return;
            }
            this[onReportValidity](invalidEvent);
            // If an implementation calls invalidEvent.preventDefault() to stop the
            // platform popup from displaying, focusing is also prevented, so we need
            // to manually focus.
            const implementationCanceledFocus = !wasCanceled && invalidEvent?.defaultPrevented;
            if (!implementationCanceledFocus) {
                return;
            }
            // The control should be focused when:
            // - `control.reportValidity()` is called (self-reporting).
            // - a form is reporting validity for its controls and this is the first
            //   invalid control.
            if (this[privateIsSelfReportingValidity] ||
                isFirstInvalidControlInForm(this[internals].form, this)) {
                this.focus();
            }
        }
        [onReportValidity](invalidEvent) {
            throw new Error('Implement [onReportValidity]');
        }
        formAssociatedCallback(form) {
            // can't use super.formAssociatedCallback?.() due to closure
            if (super.formAssociatedCallback) {
                super.formAssociatedCallback(form);
            }
            // Clean up previous form listeners.
            this[privateCleanupFormListeners].abort();
            if (!form) {
                return;
            }
            this[privateCleanupFormListeners] = new AbortController();
            // Add a listener that fires when the form runs constraint validation and
            // the control is valid, so that it may remove its error styles.
            //
            // This happens on `form.reportValidity()` and `form.requestSubmit()`
            // (both when the submit fails and passes).
            addFormReportValidListener(this, form, () => {
                this[privateCallOnReportValidity](null);
            }, this[privateCleanupFormListeners].signal);
        }
    }
    return OnReportValidityElement;
}
/**
 * Add a listener that fires when a form runs constraint validation on a control
 * and it is valid. This is needed to clear previously invalid styles.
 *
 * @param control The control of the form to listen for valid events.
 * @param form The control's form that can run constraint validation.
 * @param onControlValid A listener that is called when the form runs constraint
 *     validation and the control is valid.
 * @param cleanup A cleanup signal to remove the listener.
 */
function addFormReportValidListener(control, form, onControlValid, cleanup) {
    const validateHooks = getFormValidateHooks(form);
    // When a form validates its controls, check if an invalid event is dispatched
    // on the control. If it is not, then inform the control to report its valid
    // state.
    let controlFiredInvalid = false;
    let cleanupInvalidListener;
    let isNextSubmitFromHook = false;
    validateHooks.addEventListener('before', () => {
        isNextSubmitFromHook = true;
        cleanupInvalidListener = new AbortController();
        controlFiredInvalid = false;
        control.addEventListener('invalid', () => {
            controlFiredInvalid = true;
        }, {
            signal: cleanupInvalidListener.signal,
        });
    }, { signal: cleanup });
    validateHooks.addEventListener('after', () => {
        isNextSubmitFromHook = false;
        cleanupInvalidListener?.abort();
        if (controlFiredInvalid) {
            return;
        }
        onControlValid();
    }, { signal: cleanup });
    // The above hooks handle imperatively submitting the form, but not
    // declaratively submitting the form. This happens when:
    // 1. A non-custom element `<button type="submit">` is clicked.
    // 2. Enter is pressed on a non-custom element text editable `<input>`.
    form.addEventListener('submit', () => {
        // This submit was from `form.requestSubmit()`, which already calls the
        // listener.
        if (isNextSubmitFromHook) {
            return;
        }
        onControlValid();
    }, {
        signal: cleanup,
    });
    // Note: it is a known limitation that we cannot detect if a form tries to
    // submit declaratively, but fails to do so because an unrelated sibling
    // control failed its constraint validation.
    //
    // Since we cannot detect when that happens, a previously invalid control may
    // not clear its error styling when it becomes valid again.
    //
    // To work around this, call `form.reportValidity()` when submitting a form
    // declaratively. This can be down on the `<button type="submit">`'s click or
    // the text editable `<input>`'s 'Enter' keydown.
}
const FORM_VALIDATE_HOOKS = new WeakMap();
/**
 * Get a hooks `EventTarget` that dispatches 'before' and 'after' events that
 * fire before a form runs constraint validation and immediately after it
 * finishes running constraint validation on its controls.
 *
 * This happens during `form.reportValidity()` and `form.requestSubmit()`.
 *
 * @param form The form to get or set up hooks for.
 * @return A hooks `EventTarget` to add listeners to.
 */
function getFormValidateHooks(form) {
    if (!FORM_VALIDATE_HOOKS.has(form)) {
        // Patch form methods to add event listener hooks. These are needed to react
        // to form behaviors that do not dispatch events, such as a form asking its
        // controls to report their validity.
        //
        // We should only patch the methods once, since multiple controls and other
        // forces may want to patch this method. We cannot reliably clean it up if
        // there are multiple patched and re-patched methods referring holding
        // references to each other.
        //
        // Instead, we never clean up the patch but add and clean up event listeners
        // added to the hooks after the patch.
        const hooks = new EventTarget();
        FORM_VALIDATE_HOOKS.set(form, hooks);
        // Add hooks to support notifying before and after a form has run constraint
        // validation on its controls.
        // Note: `form.submit()` does not run constraint validation per spec.
        for (const methodName of ['reportValidity', 'requestSubmit']) {
            const superMethod = form[methodName];
            form[methodName] = function () {
                hooks.dispatchEvent(new Event('before'));
                const result = Reflect.apply(superMethod, this, arguments);
                hooks.dispatchEvent(new Event('after'));
                return result;
            };
        }
    }
    return FORM_VALIDATE_HOOKS.get(form);
}
/**
 * Checks if a control is the first invalid control in a form.
 *
 * @param form The control's form. When `null`, the control doesn't have a form
 *     and the method returns true.
 * @param control The control to check.
 * @return True if there is no form or if the control is the form's first
 *     invalid control.
 */
function isFirstInvalidControlInForm(form, control) {
    if (!form) {
        return true;
    }
    let firstInvalidControl;
    for (const element of Array.from(form.elements)) {
        if (element.matches(':invalid')) {
            firstInvalidControl = element;
            break;
        }
    }
    return firstInvalidControl === control;
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A class that computes and caches `ValidityStateFlags` for a component with
 * a given `State` interface.
 *
 * Cached performance before computing validity is important since constraint
 * validation must be checked frequently and synchronously when properties
 * change.
 *
 * @template State The expected interface of properties relevant to constraint
 *     validation.
 */
class Validator {
    /**
     * Creates a new validator.
     *
     * @param getCurrentState A callback that returns the current state of
     *     constraint validation-related properties.
     */
    constructor(getCurrentState) {
        this.getCurrentState = getCurrentState;
        /**
         * The current validity state and message. This is cached and returns if
         * constraint validation state does not change.
         */
        this.currentValidity = {
            validity: {},
            validationMessage: '',
        };
    }
    /**
     * Returns the current `ValidityStateFlags` and validation message for the
     * validator.
     *
     * If the constraint validation state has not changed, this will return a
     * cached result. This is important since `getValidity()` can be called
     * frequently in response to synchronous property changes.
     *
     * @return The current validity and validation message.
     */
    getValidity() {
        const state = this.getCurrentState();
        const hasStateChanged = !this.prevState || !this.equals(this.prevState, state);
        if (!hasStateChanged) {
            return this.currentValidity;
        }
        const { validity, validationMessage } = this.computeValidity(state);
        this.prevState = this.copy(state);
        this.currentValidity = {
            validationMessage,
            validity: {
                // Change any `ValidityState` instances into `ValidityStateFlags` since
                // `ValidityState` cannot be easily `{...spread}`.
                badInput: validity.badInput,
                customError: validity.customError,
                patternMismatch: validity.patternMismatch,
                rangeOverflow: validity.rangeOverflow,
                rangeUnderflow: validity.rangeUnderflow,
                stepMismatch: validity.stepMismatch,
                tooLong: validity.tooLong,
                tooShort: validity.tooShort,
                typeMismatch: validity.typeMismatch,
                valueMissing: validity.valueMissing,
            },
        };
        return this.currentValidity;
    }
}

/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A validator that provides constraint validation that emulates `<input>` and
 * `<textarea>` validation.
 */
class TextFieldValidator extends Validator {
    computeValidity({ state, renderedControl }) {
        let inputOrTextArea = renderedControl;
        if (isInputState(state) && !inputOrTextArea) {
            // Get cached <input> or create it.
            inputOrTextArea = this.inputControl || document.createElement('input');
            // Cache the <input> to re-use it next time.
            this.inputControl = inputOrTextArea;
        }
        else if (!inputOrTextArea) {
            // Get cached <textarea> or create it.
            inputOrTextArea =
                this.textAreaControl || document.createElement('textarea');
            // Cache the <textarea> to re-use it next time.
            this.textAreaControl = inputOrTextArea;
        }
        // Set this variable so we can check it for input-specific properties.
        const input = isInputState(state)
            ? inputOrTextArea
            : null;
        // Set input's "type" first, since this can change the other properties
        if (input) {
            input.type = state.type;
        }
        if (inputOrTextArea.value !== state.value) {
            // Only programmatically set the value if there's a difference. When using
            // the rendered control, the value will always be up to date. Setting the
            // property (even if it's the same string) will reset the internal <input>
            // dirty flag, making minlength and maxlength validation reset.
            inputOrTextArea.value = state.value;
        }
        inputOrTextArea.required = state.required;
        // The following IDLAttribute properties will always hydrate an attribute,
        // even if set to a the default value ('' or -1). The presence of the
        // attribute triggers constraint validation, so we must remove the attribute
        // when empty.
        if (input) {
            const inputState = state;
            if (inputState.pattern) {
                input.pattern = inputState.pattern;
            }
            else {
                input.removeAttribute('pattern');
            }
            if (inputState.min) {
                input.min = inputState.min;
            }
            else {
                input.removeAttribute('min');
            }
            if (inputState.max) {
                input.max = inputState.max;
            }
            else {
                input.removeAttribute('max');
            }
            if (inputState.step) {
                input.step = inputState.step;
            }
            else {
                input.removeAttribute('step');
            }
        }
        // Use -1 to represent no minlength and maxlength, which is what the
        // platform input returns. However, it will throw an error if you try to
        // manually set it to -1.
        //
        // While the type is `number`, it may actually be `null` at runtime.
        // `null > -1` is true since `null` coerces to `0`, so we default null and
        // undefined to -1.
        //
        // We set attributes instead of properties since setting a property may
        // throw an out of bounds error in relation to the other property.
        // Attributes will not throw errors while the state is updating.
        if ((state.minLength ?? -1) > -1) {
            inputOrTextArea.setAttribute('minlength', String(state.minLength));
        }
        else {
            inputOrTextArea.removeAttribute('minlength');
        }
        if ((state.maxLength ?? -1) > -1) {
            inputOrTextArea.setAttribute('maxlength', String(state.maxLength));
        }
        else {
            inputOrTextArea.removeAttribute('maxlength');
        }
        return {
            validity: inputOrTextArea.validity,
            validationMessage: inputOrTextArea.validationMessage,
        };
    }
    equals({ state: prev }, { state: next }) {
        // Check shared input and textarea properties
        const inputOrTextAreaEqual = prev.type === next.type &&
            prev.value === next.value &&
            prev.required === next.required &&
            prev.minLength === next.minLength &&
            prev.maxLength === next.maxLength;
        if (!isInputState(prev) || !isInputState(next)) {
            // Both are textareas, all relevant properties are equal.
            return inputOrTextAreaEqual;
        }
        // Check additional input-specific properties.
        return (inputOrTextAreaEqual &&
            prev.pattern === next.pattern &&
            prev.min === next.min &&
            prev.max === next.max &&
            prev.step === next.step);
    }
    copy({ state }) {
        // Don't hold a reference to the rendered control when copying since we
        // don't use it when checking if the state changed.
        return {
            state: isInputState(state)
                ? this.copyInput(state)
                : this.copyTextArea(state),
            renderedControl: null,
        };
    }
    copyInput(state) {
        const { type, pattern, min, max, step } = state;
        return {
            ...this.copySharedState(state),
            type,
            pattern,
            min,
            max,
            step,
        };
    }
    copyTextArea(state) {
        return {
            ...this.copySharedState(state),
            type: state.type,
        };
    }
    copySharedState({ value, required, minLength, maxLength, }) {
        return { value, required, minLength, maxLength };
    }
}
function isInputState(state) {
    return state.type !== 'textarea';
}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Separate variable needed for closure.
const textFieldBaseClass = mixinDelegatesAria(mixinOnReportValidity(mixinConstraintValidation(mixinFormAssociated(mixinElementInternals(ScopedElementsMixin(r$6))))));
/**
 * A text field component.
 *
 * @fires select {Event} The native `select` event on
 * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event)
 * --bubbles
 * @fires change {Event} The native `change` event on
 * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
 * --bubbles
 * @fires input {InputEvent} The native `input` event on
 * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
 * --bubbles --composed
 */
class TextField$1 extends textFieldBaseClass {
    constructor() {
        super(...arguments);
        /**
         * Gets or sets whether or not the text field is in a visually invalid state.
         *
         * This error state overrides the error state controlled by
         * `reportValidity()`.
         */
        this.error = false;
        /**
         * The error message that replaces supporting text when `error` is true. If
         * `errorText` is an empty string, then the supporting text will continue to
         * show.
         *
         * This error message overrides the error message displayed by
         * `reportValidity()`.
         */
        this.errorText = '';
        /**
         * The floating Material label of the textfield component. It informs the user
         * about what information is requested for a text field. It is aligned with
         * the input text, is always visible, and it floats when focused or when text
         * is entered into the textfield. This label also sets accessibilty labels,
         * but the accessible label is overriden by `aria-label`.
         *
         * Learn more about floating labels from the Material Design guidelines:
         * https://m3.material.io/components/text-fields/guidelines
         */
        this.label = '';
        /**
         * Disables the asterisk on the floating label, when the text field is
         * required.
         */
        this.noAsterisk = false;
        /**
         * Indicates that the user must specify a value for the input before the
         * owning form can be submitted and will render an error state when
         * `reportValidity()` is invoked when value is empty. Additionally the
         * floating label will render an asterisk `"*"` when true.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required
         */
        this.required = false;
        /**
         * The current value of the text field. It is always a string.
         */
        this.value = '';
        /**
         * An optional prefix to display before the input value.
         */
        this.prefixText = '';
        /**
         * An optional suffix to display after the input value.
         */
        this.suffixText = '';
        /**
         * Whether or not the text field has a leading icon. Used for SSR.
         */
        this.hasLeadingIcon = false;
        /**
         * Whether or not the text field has a trailing icon. Used for SSR.
         */
        this.hasTrailingIcon = false;
        /**
         * Conveys additional information below the text field, such as how it should
         * be used.
         */
        this.supportingText = '';
        /**
         * Override the input text CSS `direction`. Useful for RTL languages that use
         * LTR notation for fractions.
         */
        this.textDirection = '';
        /**
         * The number of rows to display for a `type="textarea"` text field.
         * Defaults to 2.
         */
        this.rows = 2;
        /**
         * The number of cols to display for a `type="textarea"` text field.
         * Defaults to 20.
         */
        this.cols = 20;
        // <input> properties
        this.inputMode = '';
        /**
         * Defines the greatest value in the range of permitted values.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max
         */
        this.max = '';
        /**
         * The maximum number of characters a user can enter into the text field. Set
         * to -1 for none.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength
         */
        this.maxLength = -1;
        /**
         * Defines the most negative value in the range of permitted values.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min
         */
        this.min = '';
        /**
         * The minimum number of characters a user can enter into the text field. Set
         * to -1 for none.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength
         */
        this.minLength = -1;
        /**
         * When true, hide the spinner for `type="number"` text fields.
         */
        this.noSpinner = false;
        /**
         * A regular expression that the text field's value must match to pass
         * constraint validation.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern
         */
        this.pattern = '';
        /**
         * Defines the text displayed in the textfield when it has no value. Provides
         * a brief hint to the user as to the expected type of data that should be
         * entered into the control. Unlike `label`, the placeholder is not visible
         * and does not float when the textfield has a value.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/placeholder
         */
        this.placeholder = '';
        /**
         * Indicates whether or not a user should be able to edit the text field's
         * value.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly
         */
        this.readOnly = false;
        /**
         * Indicates that input accepts multiple email addresses.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple
         */
        this.multiple = false;
        /**
         * Returns or sets the element's step attribute, which works with min and max
         * to limit the increments at which a numeric or date-time value can be set.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step
         */
        this.step = '';
        /**
         * The `<input>` type to use, defaults to "text". The type greatly changes how
         * the text field behaves.
         *
         * Text fields support a limited number of `<input>` types:
         *
         * - text
         * - textarea
         * - email
         * - number
         * - password
         * - search
         * - tel
         * - url
         *
         * See
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types
         * for more details on each input type.
         */
        this.type = 'text';
        /**
         * Describes what, if any, type of autocomplete functionality the input
         * should provide.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        this.autocomplete = '';
        /**
         * Returns true when the text field has been interacted with. Native
         * validation errors only display in response to user interactions.
         */
        this.dirty = false;
        this.focused = false;
        /**
         * Whether or not a native error has been reported via `reportValidity()`.
         */
        this.nativeError = false;
        /**
         * The validation message displayed from a native error via
         * `reportValidity()`.
         */
        this.nativeErrorText = '';
    }
    /**
     * Gets or sets the direction in which selection occurred.
     */
    get selectionDirection() {
        return this.getInputOrTextarea().selectionDirection;
    }
    set selectionDirection(value) {
        this.getInputOrTextarea().selectionDirection = value;
    }
    /**
     * Gets or sets the end position or offset of a text selection.
     */
    get selectionEnd() {
        return this.getInputOrTextarea().selectionEnd;
    }
    set selectionEnd(value) {
        this.getInputOrTextarea().selectionEnd = value;
    }
    /**
     * Gets or sets the starting position or offset of a text selection.
     */
    get selectionStart() {
        return this.getInputOrTextarea().selectionStart;
    }
    set selectionStart(value) {
        this.getInputOrTextarea().selectionStart = value;
    }
    /**
     * The text field's value as a number.
     */
    get valueAsNumber() {
        const input = this.getInput();
        if (!input) {
            return NaN;
        }
        return input.valueAsNumber;
    }
    set valueAsNumber(value) {
        const input = this.getInput();
        if (!input) {
            return;
        }
        input.valueAsNumber = value;
        this.value = input.value;
    }
    /**
     * The text field's value as a Date.
     */
    get valueAsDate() {
        const input = this.getInput();
        if (!input) {
            return null;
        }
        return input.valueAsDate;
    }
    set valueAsDate(value) {
        const input = this.getInput();
        if (!input) {
            return;
        }
        input.valueAsDate = value;
        this.value = input.value;
    }
    get hasError() {
        return this.error || this.nativeError;
    }
    /**
     * Selects all the text in the text field.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select
     */
    select() {
        this.getInputOrTextarea().select();
    }
    setRangeText(...args) {
        // Calling setRangeText with 1 vs 3-4 arguments has different behavior.
        // Use spread syntax and type casting to ensure correct usage.
        this.getInputOrTextarea().setRangeText(...args);
        this.value = this.getInputOrTextarea().value;
    }
    /**
     * Sets the start and end positions of a selection in the text field.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
     *
     * @param start The offset into the text field for the start of the selection.
     * @param end The offset into the text field for the end of the selection.
     * @param direction The direction in which the selection is performed.
     */
    setSelectionRange(start, end, direction) {
        this.getInputOrTextarea().setSelectionRange(start, end, direction);
    }
    /**
     * Decrements the value of a numeric type text field by `step` or `n` `step`
     * number of times.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown
     *
     * @param stepDecrement The number of steps to decrement, defaults to 1.
     */
    stepDown(stepDecrement) {
        const input = this.getInput();
        if (!input) {
            return;
        }
        input.stepDown(stepDecrement);
        this.value = input.value;
    }
    /**
     * Increments the value of a numeric type text field by `step` or `n` `step`
     * number of times.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp
     *
     * @param stepIncrement The number of steps to increment, defaults to 1.
     */
    stepUp(stepIncrement) {
        const input = this.getInput();
        if (!input) {
            return;
        }
        input.stepUp(stepIncrement);
        this.value = input.value;
    }
    /**
     * Reset the text field to its default value.
     */
    reset() {
        this.dirty = false;
        this.value = this.getAttribute('value') ?? '';
        this.nativeError = false;
        this.nativeErrorText = '';
    }
    attributeChangedCallback(attribute, newValue, oldValue) {
        if (attribute === 'value' && this.dirty) {
            // After user input, changing the value attribute no longer updates the
            // text field's value (until reset). This matches native <input> behavior.
            return;
        }
        super.attributeChangedCallback(attribute, newValue, oldValue);
    }
    render() {
        const classes = {
            'disabled': this.disabled,
            'error': !this.disabled && this.hasError,
            'textarea': this.type === 'textarea',
            'no-spinner': this.noSpinner,
        };
        return x$1 `
      <span class="text-field ${e$1(classes)}">
        ${this.renderField()}
      </span>
    `;
    }
    updated(changedProperties) {
        // Keep changedProperties arg so that subclasses may call it
        // If a property such as `type` changes and causes the internal <input>
        // value to change without dispatching an event, re-sync it.
        const value = this.getInputOrTextarea().value;
        if (this.value !== value) {
            // Note this is typically inefficient in updated() since it schedules
            // another update. However, it is needed for the <input> to fully render
            // before checking its value.
            this.value = value;
        }
    }
    renderField() {
        return u$1 `<${this.fieldTag}
      class="field"
      count=${this.value.length}
      ?disabled=${this.disabled}
      ?error=${this.hasError}
      error-text=${this.getErrorText()}
      ?focused=${this.focused}
      ?has-end=${this.hasTrailingIcon}
      ?has-start=${this.hasLeadingIcon}
      label=${this.label}
      ?no-asterisk=${this.noAsterisk}
      max=${this.maxLength}
      ?populated=${!!this.value}
      ?required=${this.required}
      ?resizable=${this.type === 'textarea'}
      supporting-text=${this.supportingText}
    >
      ${this.renderLeadingIcon()}
      ${this.renderInputOrTextarea()}
      ${this.renderTrailingIcon()}
      <div id="description" slot="aria-describedby"></div>
      <slot name="container" slot="container"></slot>
    </${this.fieldTag}>`;
    }
    renderLeadingIcon() {
        return x$1 `
      <span class="icon leading" slot="start">
        <slot name="leading-icon" @slotchange=${this.handleIconChange}></slot>
      </span>
    `;
    }
    renderTrailingIcon() {
        return x$1 `
      <span class="icon trailing" slot="end">
        <slot name="trailing-icon" @slotchange=${this.handleIconChange}></slot>
      </span>
    `;
    }
    renderInputOrTextarea() {
        const style = { 'direction': this.textDirection };
        const ariaLabel = this.ariaLabel || this.label || E$1;
        // lit-anaylzer `autocomplete` types are too strict
        // tslint:disable-next-line:no-any
        const autocomplete = this.autocomplete;
        // These properties may be set to null if the attribute is removed, and
        // `null > -1` is incorrectly `true`.
        const hasMaxLength = (this.maxLength ?? -1) > -1;
        const hasMinLength = (this.minLength ?? -1) > -1;
        if (this.type === 'textarea') {
            return x$1 `
        <textarea
          class="input"
          style=${o$5(style)}
          aria-describedby="description"
          aria-invalid=${this.hasError}
          aria-label=${ariaLabel}
          autocomplete=${autocomplete || E$1}
          name=${this.name || E$1}
          ?disabled=${this.disabled}
          maxlength=${hasMaxLength ? this.maxLength : E$1}
          minlength=${hasMinLength ? this.minLength : E$1}
          placeholder=${this.placeholder || E$1}
          ?readonly=${this.readOnly}
          ?required=${this.required}
          rows=${this.rows}
          cols=${this.cols}
          .value=${l$6(this.value)}
          @change=${this.redispatchEvent}
          @focus=${this.handleFocusChange}
          @blur=${this.handleFocusChange}
          @input=${this.handleInput}
          @select=${this.redispatchEvent}></textarea>
      `;
        }
        const prefix = this.renderPrefix();
        const suffix = this.renderSuffix();
        // TODO(b/243805848): remove `as unknown as number` and `as any` once lit
        // analyzer is fixed
        // tslint:disable-next-line:no-any
        const inputMode = this.inputMode;
        return x$1 `
      <div class="input-wrapper">
        ${prefix}
        <input
          class="input"
          style=${o$5(style)}
          aria-describedby="description"
          aria-invalid=${this.hasError}
          aria-label=${ariaLabel}
          autocomplete=${autocomplete || E$1}
          name=${this.name || E$1}
          ?disabled=${this.disabled}
          inputmode=${inputMode || E$1}
          max=${(this.max || E$1)}
          maxlength=${hasMaxLength ? this.maxLength : E$1}
          min=${(this.min || E$1)}
          minlength=${hasMinLength ? this.minLength : E$1}
          pattern=${this.pattern || E$1}
          placeholder=${this.placeholder || E$1}
          ?readonly=${this.readOnly}
          ?required=${this.required}
          ?multiple=${this.multiple}
          step=${(this.step || E$1)}
          type=${this.type}
          .value=${l$6(this.value)}
          @change=${this.redispatchEvent}
          @focus=${this.handleFocusChange}
          @blur=${this.handleFocusChange}
          @input=${this.handleInput}
          @select=${this.redispatchEvent} />
        ${suffix}
      </div>
    `;
    }
    renderPrefix() {
        return this.renderAffix(this.prefixText, /* isSuffix */ false);
    }
    renderSuffix() {
        return this.renderAffix(this.suffixText, /* isSuffix */ true);
    }
    renderAffix(text, isSuffix) {
        if (!text) {
            return E$1;
        }
        const classes = {
            'suffix': isSuffix,
            'prefix': !isSuffix,
        };
        return x$1 `<span class="${e$1(classes)}">${text}</span>`;
    }
    getErrorText() {
        return this.error ? this.errorText : this.nativeErrorText;
    }
    handleFocusChange() {
        // When calling focus() or reportValidity() during change, it's possible
        // for blur to be called after the new focus event. Rather than set
        // `this.focused` to true/false on focus/blur, we always set it to whether
        // or not the input itself is focused.
        this.focused = this.inputOrTextarea?.matches(':focus') ?? false;
    }
    handleInput(event) {
        this.dirty = true;
        this.value = event.target.value;
    }
    redispatchEvent(event) {
        redispatchEvent(this, event);
    }
    getInputOrTextarea() {
        if (!this.inputOrTextarea) {
            // If the input is not yet defined, synchronously render.
            // e.g.
            // const textField = document.createElement('md-outlined-text-field');
            // document.body.appendChild(textField);
            // textField.focus(); // synchronously render
            this.connectedCallback();
            this.scheduleUpdate();
        }
        if (this.isUpdatePending) {
            // If there are pending updates, synchronously perform them. This ensures
            // that constraint validation properties (like `required`) are synced
            // before interacting with input APIs that depend on them.
            this.scheduleUpdate();
        }
        return this.inputOrTextarea;
    }
    getInput() {
        if (this.type === 'textarea') {
            return null;
        }
        return this.getInputOrTextarea();
    }
    handleIconChange() {
        this.hasLeadingIcon = this.leadingIcons.length > 0;
        this.hasTrailingIcon = this.trailingIcons.length > 0;
    }
    [getFormValue]() {
        return this.value;
    }
    formResetCallback() {
        this.reset();
    }
    formStateRestoreCallback(state) {
        this.value = state;
    }
    focus() {
        // Required for the case that the user slots a focusable element into the
        // leading icon slot such as an iconbutton due to how delegatesFocus works.
        this.getInputOrTextarea().focus();
    }
    [createValidator]() {
        return new TextFieldValidator(() => ({
            state: this,
            renderedControl: this.inputOrTextarea,
        }));
    }
    [getValidityAnchor]() {
        return this.inputOrTextarea;
    }
    [onReportValidity](invalidEvent) {
        // Prevent default pop-up behavior.
        invalidEvent?.preventDefault();
        const prevMessage = this.getErrorText();
        this.nativeError = !!invalidEvent;
        this.nativeErrorText = this.validationMessage;
        if (prevMessage === this.getErrorText()) {
            this.field?.reannounceError();
        }
    }
}
/** @nocollapse */
TextField$1.shadowRootOptions = {
    ...r$6.shadowRootOptions,
    delegatesFocus: true,
};
__decorate([
    n$j({ type: Boolean, reflect: true })
], TextField$1.prototype, "error", void 0);
__decorate([
    n$j({ attribute: 'error-text' })
], TextField$1.prototype, "errorText", void 0);
__decorate([
    n$j()
], TextField$1.prototype, "label", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'no-asterisk' })
], TextField$1.prototype, "noAsterisk", void 0);
__decorate([
    n$j({ type: Boolean, reflect: true })
], TextField$1.prototype, "required", void 0);
__decorate([
    n$j()
], TextField$1.prototype, "value", void 0);
__decorate([
    n$j({ attribute: 'prefix-text' })
], TextField$1.prototype, "prefixText", void 0);
__decorate([
    n$j({ attribute: 'suffix-text' })
], TextField$1.prototype, "suffixText", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'has-leading-icon' })
], TextField$1.prototype, "hasLeadingIcon", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'has-trailing-icon' })
], TextField$1.prototype, "hasTrailingIcon", void 0);
__decorate([
    n$j({ attribute: 'supporting-text' })
], TextField$1.prototype, "supportingText", void 0);
__decorate([
    n$j({ attribute: 'text-direction' })
], TextField$1.prototype, "textDirection", void 0);
__decorate([
    n$j({ type: Number })
], TextField$1.prototype, "rows", void 0);
__decorate([
    n$j({ type: Number })
], TextField$1.prototype, "cols", void 0);
__decorate([
    n$j({ reflect: true })
], TextField$1.prototype, "inputMode", void 0);
__decorate([
    n$j()
], TextField$1.prototype, "max", void 0);
__decorate([
    n$j({ type: Number })
], TextField$1.prototype, "maxLength", void 0);
__decorate([
    n$j()
], TextField$1.prototype, "min", void 0);
__decorate([
    n$j({ type: Number })
], TextField$1.prototype, "minLength", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'no-spinner' })
], TextField$1.prototype, "noSpinner", void 0);
__decorate([
    n$j()
], TextField$1.prototype, "pattern", void 0);
__decorate([
    n$j({ reflect: true, converter: stringConverter })
], TextField$1.prototype, "placeholder", void 0);
__decorate([
    n$j({ type: Boolean, reflect: true })
], TextField$1.prototype, "readOnly", void 0);
__decorate([
    n$j({ type: Boolean, reflect: true })
], TextField$1.prototype, "multiple", void 0);
__decorate([
    n$j()
], TextField$1.prototype, "step", void 0);
__decorate([
    n$j({ reflect: true })
], TextField$1.prototype, "type", void 0);
__decorate([
    n$j({ reflect: true })
], TextField$1.prototype, "autocomplete", void 0);
__decorate([
    r$4()
], TextField$1.prototype, "dirty", void 0);
__decorate([
    r$4()
], TextField$1.prototype, "focused", void 0);
__decorate([
    r$4()
], TextField$1.prototype, "nativeError", void 0);
__decorate([
    r$4()
], TextField$1.prototype, "nativeErrorText", void 0);
__decorate([
    e$d('.input')
], TextField$1.prototype, "inputOrTextarea", void 0);
__decorate([
    e$d('.field')
], TextField$1.prototype, "field", void 0);
__decorate([
    o$j({ slot: 'leading-icon' })
], TextField$1.prototype, "leadingIcons", void 0);
__decorate([
    o$j({ slot: 'trailing-icon' })
], TextField$1.prototype, "trailingIcons", void 0);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A field component.
 */
class Field extends r$6 {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.error = false;
        this.focused = false;
        this.label = '';
        this.noAsterisk = false;
        this.populated = false;
        this.required = false;
        this.resizable = false;
        this.supportingText = '';
        this.errorText = '';
        this.count = -1;
        this.max = -1;
        /**
         * Whether or not the field has leading content.
         */
        this.hasStart = false;
        /**
         * Whether or not the field has trailing content.
         */
        this.hasEnd = false;
        this.isAnimating = false;
        /**
         * When set to true, the error text's `role="alert"` will be removed, then
         * re-added after an animation frame. This will re-announce an error message
         * to screen readers.
         */
        this.refreshErrorAlert = false;
        this.disableTransitions = false;
    }
    get counterText() {
        // Count and max are typed as number, but can be set to null when Lit removes
        // their attributes. These getters coerce back to a number for calculations.
        const countAsNumber = this.count ?? -1;
        const maxAsNumber = this.max ?? -1;
        // Counter does not show if count is negative, or max is negative or 0.
        if (countAsNumber < 0 || maxAsNumber <= 0) {
            return '';
        }
        return `${countAsNumber} / ${maxAsNumber}`;
    }
    get supportingOrErrorText() {
        return this.error && this.errorText ? this.errorText : this.supportingText;
    }
    /**
     * Re-announces the field's error supporting text to screen readers.
     *
     * Error text announces to screen readers anytime it is visible and changes.
     * Use the method to re-announce the message when the text has not changed,
     * but announcement is still needed (such as for `reportValidity()`).
     */
    reannounceError() {
        this.refreshErrorAlert = true;
    }
    update(props) {
        // Client-side property updates
        const isDisabledChanging = props.has('disabled') && props.get('disabled') !== undefined;
        if (isDisabledChanging) {
            this.disableTransitions = true;
        }
        // When disabling, remove focus styles if focused.
        if (this.disabled && this.focused) {
            props.set('focused', true);
            this.focused = false;
        }
        // Animate if focused or populated change.
        this.animateLabelIfNeeded({
            wasFocused: props.get('focused'),
            wasPopulated: props.get('populated'),
        });
        super.update(props);
    }
    render() {
        const floatingLabel = this.renderLabel(/*isFloating*/ true);
        const restingLabel = this.renderLabel(/*isFloating*/ false);
        const outline = this.renderOutline?.(floatingLabel);
        const classes = {
            'disabled': this.disabled,
            'disable-transitions': this.disableTransitions,
            'error': this.error && !this.disabled,
            'focused': this.focused,
            'with-start': this.hasStart,
            'with-end': this.hasEnd,
            'populated': this.populated,
            'resizable': this.resizable,
            'required': this.required,
            'no-label': !this.label,
        };
        return x$1 `
      <div class="field ${e$1(classes)}">
        <div class="container-overflow">
          ${this.renderBackground?.()}
          <slot name="container"></slot>
          ${this.renderStateLayer?.()} ${this.renderIndicator?.()} ${outline}
          <div class="container">
            <div class="start">
              <slot name="start"></slot>
            </div>
            <div class="middle">
              <div class="label-wrapper">
                ${restingLabel} ${outline ? E$1 : floatingLabel}
              </div>
              <div class="content">
                <slot></slot>
              </div>
            </div>
            <div class="end">
              <slot name="end"></slot>
            </div>
          </div>
        </div>
        ${this.renderSupportingText()}
      </div>
    `;
    }
    updated(changed) {
        if (changed.has('supportingText') ||
            changed.has('errorText') ||
            changed.has('count') ||
            changed.has('max')) {
            this.updateSlottedAriaDescribedBy();
        }
        if (this.refreshErrorAlert) {
            // The past render cycle removed the role="alert" from the error message.
            // Re-add it after an animation frame to re-announce the error.
            requestAnimationFrame(() => {
                this.refreshErrorAlert = false;
            });
        }
        if (this.disableTransitions) {
            requestAnimationFrame(() => {
                this.disableTransitions = false;
            });
        }
    }
    renderSupportingText() {
        const { supportingOrErrorText, counterText } = this;
        if (!supportingOrErrorText && !counterText) {
            return E$1;
        }
        // Always render the supporting text span so that our `space-around`
        // container puts the counter at the end.
        const start = x$1 `<span>${supportingOrErrorText}</span>`;
        // Conditionally render counter so we don't render the extra `gap`.
        // TODO(b/244473435): add aria-label and announcements
        const end = counterText
            ? x$1 `<span class="counter">${counterText}</span>`
            : E$1;
        // Announce if there is an error and error text visible.
        // If refreshErrorAlert is true, do not announce. This will remove the
        // role="alert" attribute. Another render cycle will happen after an
        // animation frame to re-add the role.
        const shouldErrorAnnounce = this.error && this.errorText && !this.refreshErrorAlert;
        const role = shouldErrorAnnounce ? 'alert' : E$1;
        return x$1 `
      <div class="supporting-text" role=${role}>${start}${end}</div>
      <slot
        name="aria-describedby"
        @slotchange=${this.updateSlottedAriaDescribedBy}></slot>
    `;
    }
    updateSlottedAriaDescribedBy() {
        for (const element of this.slottedAriaDescribedBy) {
            B$1(x$1 `${this.supportingOrErrorText} ${this.counterText}`, element);
            element.setAttribute('hidden', '');
        }
    }
    renderLabel(isFloating) {
        if (!this.label) {
            return E$1;
        }
        let visible;
        if (isFloating) {
            // Floating label is visible when focused/populated or when animating.
            visible = this.focused || this.populated || this.isAnimating;
        }
        else {
            // Resting label is visible when unfocused. It is never visible while
            // animating.
            visible = !this.focused && !this.populated && !this.isAnimating;
        }
        const classes = {
            'hidden': !visible,
            'floating': isFloating,
            'resting': !isFloating,
        };
        // Add '*' if a label is present and the field is required
        const labelText = `${this.label}${this.required && !this.noAsterisk ? '*' : ''}`;
        return x$1 `
      <span class="label ${e$1(classes)}" aria-hidden=${!visible}
        >${labelText}</span
      >
    `;
    }
    animateLabelIfNeeded({ wasFocused, wasPopulated, }) {
        if (!this.label) {
            return;
        }
        wasFocused ??= this.focused;
        wasPopulated ??= this.populated;
        const wasFloating = wasFocused || wasPopulated;
        const shouldBeFloating = this.focused || this.populated;
        if (wasFloating === shouldBeFloating) {
            return;
        }
        this.isAnimating = true;
        this.labelAnimation?.cancel();
        // Only one label is visible at a time for clearer text rendering.
        // The floating label is visible and used during animation. At the end of
        // the animation, it will either remain visible (if floating) or hide and
        // the resting label will be shown.
        //
        // We don't use forward filling because if the dimensions of the text field
        // change (leading icon removed, density changes, etc), then the animation
        // will be inaccurate.
        //
        // Re-calculating the animation each time will prevent any visual glitches
        // from appearing.
        // TODO(b/241113345): use animation tokens
        this.labelAnimation = this.floatingLabelEl?.animate(this.getLabelKeyframes(), { duration: 150, easing: EASING.STANDARD });
        this.labelAnimation?.addEventListener('finish', () => {
            // At the end of the animation, update the visible label.
            this.isAnimating = false;
        });
    }
    getLabelKeyframes() {
        const { floatingLabelEl, restingLabelEl } = this;
        if (!floatingLabelEl || !restingLabelEl) {
            return [];
        }
        const { x: floatingX, y: floatingY, height: floatingHeight, } = floatingLabelEl.getBoundingClientRect();
        const { x: restingX, y: restingY, height: restingHeight, } = restingLabelEl.getBoundingClientRect();
        const floatingScrollWidth = floatingLabelEl.scrollWidth;
        const restingScrollWidth = restingLabelEl.scrollWidth;
        // Scale by width ratio instead of font size since letter-spacing will scale
        // incorrectly. Using the width we can better approximate the adjusted
        // scale and compensate for tracking and overflow.
        // (use scrollWidth instead of width to account for clipped labels)
        const scale = restingScrollWidth / floatingScrollWidth;
        const xDelta = restingX - floatingX;
        // The line-height of the resting and floating label are different. When
        // we move the floating label down to the resting label's position, it won't
        // exactly match because of this. We need to adjust by half of what the
        // final scaled floating label's height will be.
        const yDelta = restingY -
            floatingY +
            Math.round((restingHeight - floatingHeight * scale) / 2);
        // Create the two transforms: floating to resting (using the calculations
        // above), and resting to floating (re-setting the transform to initial
        // values).
        const restTransform = `translateX(${xDelta}px) translateY(${yDelta}px) scale(${scale})`;
        const floatTransform = `translateX(0) translateY(0) scale(1)`;
        // Constrain the floating labels width to a scaled percentage of the
        // resting label's width. This will prevent long clipped labels from
        // overflowing the container.
        const restingClientWidth = restingLabelEl.clientWidth;
        const isRestingClipped = restingScrollWidth > restingClientWidth;
        const width = isRestingClipped ? `${restingClientWidth / scale}px` : '';
        if (this.focused || this.populated) {
            return [
                { transform: restTransform, width },
                { transform: floatTransform, width },
            ];
        }
        return [
            { transform: floatTransform, width },
            { transform: restTransform, width },
        ];
    }
    getSurfacePositionClientRect() {
        return this.containerEl.getBoundingClientRect();
    }
}
__decorate([
    n$j({ type: Boolean })
], Field.prototype, "disabled", void 0);
__decorate([
    n$j({ type: Boolean })
], Field.prototype, "error", void 0);
__decorate([
    n$j({ type: Boolean })
], Field.prototype, "focused", void 0);
__decorate([
    n$j()
], Field.prototype, "label", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'no-asterisk' })
], Field.prototype, "noAsterisk", void 0);
__decorate([
    n$j({ type: Boolean })
], Field.prototype, "populated", void 0);
__decorate([
    n$j({ type: Boolean })
], Field.prototype, "required", void 0);
__decorate([
    n$j({ type: Boolean })
], Field.prototype, "resizable", void 0);
__decorate([
    n$j({ attribute: 'supporting-text' })
], Field.prototype, "supportingText", void 0);
__decorate([
    n$j({ attribute: 'error-text' })
], Field.prototype, "errorText", void 0);
__decorate([
    n$j({ type: Number })
], Field.prototype, "count", void 0);
__decorate([
    n$j({ type: Number })
], Field.prototype, "max", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'has-start' })
], Field.prototype, "hasStart", void 0);
__decorate([
    n$j({ type: Boolean, attribute: 'has-end' })
], Field.prototype, "hasEnd", void 0);
__decorate([
    o$j({ slot: 'aria-describedby' })
], Field.prototype, "slottedAriaDescribedBy", void 0);
__decorate([
    r$4()
], Field.prototype, "isAnimating", void 0);
__decorate([
    r$4()
], Field.prototype, "refreshErrorAlert", void 0);
__decorate([
    r$4()
], Field.prototype, "disableTransitions", void 0);
__decorate([
    e$d('.label.floating')
], Field.prototype, "floatingLabelEl", void 0);
__decorate([
    e$d('.label.resting')
], Field.prototype, "restingLabelEl", void 0);
__decorate([
    e$d('.container')
], Field.prototype, "containerEl", void 0);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * An outlined field component.
 */
class OutlinedField extends Field {
    renderOutline(floatingLabel) {
        return x$1 `
      <div class="outline">
        <div class="outline-start"></div>
        <div class="outline-notch">
          <div class="outline-panel-inactive"></div>
          <div class="outline-panel-active"></div>
          <div class="outline-label">${floatingLabel}</div>
        </div>
        <div class="outline-end"></div>
      </div>
    `;
    }
}

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$7 = i$c `@layer styles{:host{--_bottom-space: var(--md-outlined-field-bottom-space, 16px);--_content-color: var(--md-outlined-field-content-color, var(--md-sys-color-on-surface, #1d1b20));--_content-font: var(--md-outlined-field-content-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_content-line-height: var(--md-outlined-field-content-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_content-size: var(--md-outlined-field-content-size, var(--md-sys-typescale-body-large-size, 1rem));--_content-space: var(--md-outlined-field-content-space, 16px);--_content-weight: var(--md-outlined-field-content-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_disabled-content-color: var(--md-outlined-field-disabled-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-content-opacity: var(--md-outlined-field-disabled-content-opacity, 0.38);--_disabled-label-text-color: var(--md-outlined-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-outlined-field-disabled-label-text-opacity, 0.38);--_disabled-leading-content-color: var(--md-outlined-field-disabled-leading-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-leading-content-opacity: var(--md-outlined-field-disabled-leading-content-opacity, 0.38);--_disabled-outline-color: var(--md-outlined-field-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-outline-opacity: var(--md-outlined-field-disabled-outline-opacity, 0.12);--_disabled-outline-width: var(--md-outlined-field-disabled-outline-width, 1px);--_disabled-supporting-text-color: var(--md-outlined-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-supporting-text-opacity: var(--md-outlined-field-disabled-supporting-text-opacity, 0.38);--_disabled-trailing-content-color: var(--md-outlined-field-disabled-trailing-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-trailing-content-opacity: var(--md-outlined-field-disabled-trailing-content-opacity, 0.38);--_error-content-color: var(--md-outlined-field-error-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-content-color: var(--md-outlined-field-error-focus-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-label-text-color: var(--md-outlined-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-leading-content-color: var(--md-outlined-field-error-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-focus-outline-color: var(--md-outlined-field-error-focus-outline-color, var(--md-sys-color-error, #b3261e));--_error-focus-supporting-text-color: var(--md-outlined-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-trailing-content-color: var(--md-outlined-field-error-focus-trailing-content-color, var(--md-sys-color-error, #b3261e));--_error-hover-content-color: var(--md-outlined-field-error-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-hover-label-text-color: var(--md-outlined-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-leading-content-color: var(--md-outlined-field-error-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-hover-outline-color: var(--md-outlined-field-error-hover-outline-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-supporting-text-color: var(--md-outlined-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-hover-trailing-content-color: var(--md-outlined-field-error-hover-trailing-content-color, var(--md-sys-color-on-error-container, #410e0b));--_error-label-text-color: var(--md-outlined-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_error-leading-content-color: var(--md-outlined-field-error-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-outline-color: var(--md-outlined-field-error-outline-color, var(--md-sys-color-error, #b3261e));--_error-supporting-text-color: var(--md-outlined-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-trailing-content-color: var(--md-outlined-field-error-trailing-content-color, var(--md-sys-color-error, #b3261e));--_focus-content-color: var(--md-outlined-field-focus-content-color, var(--md-sys-color-on-surface, #1d1b20));--_focus-label-text-color: var(--md-outlined-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_focus-leading-content-color: var(--md-outlined-field-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-outline-color: var(--md-outlined-field-focus-outline-color, var(--md-sys-color-primary, #6750a4));--_focus-outline-width: var(--md-outlined-field-focus-outline-width, 3px);--_focus-supporting-text-color: var(--md-outlined-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-trailing-content-color: var(--md-outlined-field-focus-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-content-color: var(--md-outlined-field-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-label-text-color: var(--md-outlined-field-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-leading-content-color: var(--md-outlined-field-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-outline-color: var(--md-outlined-field-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-outline-width: var(--md-outlined-field-hover-outline-width, 1px);--_hover-supporting-text-color: var(--md-outlined-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-trailing-content-color: var(--md-outlined-field-hover-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-color: var(--md-outlined-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-font: var(--md-outlined-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-outlined-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_label-text-padding-bottom: var(--md-outlined-field-label-text-padding-bottom, 8px);--_label-text-populated-line-height: var(--md-outlined-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_label-text-populated-size: var(--md-outlined-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_label-text-size: var(--md-outlined-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_label-text-weight: var(--md-outlined-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_leading-content-color: var(--md-outlined-field-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_leading-space: var(--md-outlined-field-leading-space, 16px);--_outline-color: var(--md-outlined-field-outline-color, var(--md-sys-color-outline, #79747e));--_outline-label-padding: var(--md-outlined-field-outline-label-padding, 4px);--_outline-width: var(--md-outlined-field-outline-width, 1px);--_supporting-text-color: var(--md-outlined-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-font: var(--md-outlined-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_supporting-text-leading-space: var(--md-outlined-field-supporting-text-leading-space, 16px);--_supporting-text-line-height: var(--md-outlined-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_supporting-text-size: var(--md-outlined-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_supporting-text-top-space: var(--md-outlined-field-supporting-text-top-space, 4px);--_supporting-text-trailing-space: var(--md-outlined-field-supporting-text-trailing-space, 16px);--_supporting-text-weight: var(--md-outlined-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_top-space: var(--md-outlined-field-top-space, 16px);--_trailing-content-color: var(--md-outlined-field-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_trailing-space: var(--md-outlined-field-trailing-space, 16px);--_with-leading-content-leading-space: var(--md-outlined-field-with-leading-content-leading-space, 12px);--_with-trailing-content-trailing-space: var(--md-outlined-field-with-trailing-content-trailing-space, 12px);--_container-shape-start-start: var(--md-outlined-field-container-shape-start-start, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-start-end: var(--md-outlined-field-container-shape-start-end, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-end: var(--md-outlined-field-container-shape-end-end, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-start: var(--md-outlined-field-container-shape-end-start, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)))}.outline{border-color:var(--_outline-color);border-radius:inherit;display:flex;pointer-events:none;height:100%;position:absolute;width:100%;z-index:1}.outline-start::before,.outline-start::after,.outline-panel-inactive::before,.outline-panel-inactive::after,.outline-panel-active::before,.outline-panel-active::after,.outline-end::before,.outline-end::after{border:inherit;content:"";inset:0;position:absolute}.outline-start,.outline-end{border:inherit;border-radius:inherit;box-sizing:border-box;position:relative}.outline-start::before,.outline-start::after,.outline-end::before,.outline-end::after{border-bottom-style:solid;border-top-style:solid}.outline-start::after,.outline-end::after{opacity:0;transition:opacity 150ms cubic-bezier(0.2, 0, 0, 1)}.focused .outline-start::after,.focused .outline-end::after{opacity:1}.outline-start::before,.outline-start::after{border-inline-start-style:solid;border-inline-end-style:none;border-start-start-radius:inherit;border-start-end-radius:0;border-end-start-radius:inherit;border-end-end-radius:0;margin-inline-end:var(--_outline-label-padding)}.outline-end{flex-grow:1;margin-inline-start:calc(-1*var(--_outline-label-padding))}.outline-end::before,.outline-end::after{border-inline-start-style:none;border-inline-end-style:solid;border-start-start-radius:0;border-start-end-radius:inherit;border-end-start-radius:0;border-end-end-radius:inherit}.outline-notch{align-items:flex-start;border:inherit;display:flex;margin-inline-start:calc(-1*var(--_outline-label-padding));margin-inline-end:var(--_outline-label-padding);max-width:calc(100% - var(--_leading-space) - var(--_trailing-space));padding:0 var(--_outline-label-padding);position:relative}.no-label .outline-notch{display:none}.outline-panel-inactive,.outline-panel-active{border:inherit;border-bottom-style:solid;inset:0;position:absolute}.outline-panel-inactive::before,.outline-panel-inactive::after,.outline-panel-active::before,.outline-panel-active::after{border-top-style:solid;border-bottom:none;bottom:auto;transform:scaleX(1);transition:transform 150ms cubic-bezier(0.2, 0, 0, 1)}.outline-panel-inactive::before,.outline-panel-active::before{right:50%;transform-origin:top left}.outline-panel-inactive::after,.outline-panel-active::after{left:50%;transform-origin:top right}.populated .outline-panel-inactive::before,.populated .outline-panel-inactive::after,.populated .outline-panel-active::before,.populated .outline-panel-active::after,.focused .outline-panel-inactive::before,.focused .outline-panel-inactive::after,.focused .outline-panel-active::before,.focused .outline-panel-active::after{transform:scaleX(0)}.outline-panel-active{opacity:0;transition:opacity 150ms cubic-bezier(0.2, 0, 0, 1)}.focused .outline-panel-active{opacity:1}.outline-label{display:flex;max-width:100%;transform:translateY(calc(-100% + var(--_label-text-padding-bottom)))}.outline-start,.field:not(.with-start) .content ::slotted(*){padding-inline-start:max(var(--_leading-space),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.field:not(.with-start) .label-wrapper{margin-inline-start:max(var(--_leading-space),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.field:not(.with-end) .content ::slotted(*){padding-inline-end:max(var(--_trailing-space),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.field:not(.with-end) .label-wrapper{margin-inline-end:max(var(--_trailing-space),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.outline-start::before,.outline-end::before,.outline-panel-inactive,.outline-panel-inactive::before,.outline-panel-inactive::after{border-width:var(--_outline-width)}:hover .outline{border-color:var(--_hover-outline-color);color:var(--_hover-outline-color)}:hover .outline-start::before,:hover .outline-end::before,:hover .outline-panel-inactive,:hover .outline-panel-inactive::before,:hover .outline-panel-inactive::after{border-width:var(--_hover-outline-width)}.focused .outline{border-color:var(--_focus-outline-color);color:var(--_focus-outline-color)}.outline-start::after,.outline-end::after,.outline-panel-active,.outline-panel-active::before,.outline-panel-active::after{border-width:var(--_focus-outline-width)}.disabled .outline{border-color:var(--_disabled-outline-color);color:var(--_disabled-outline-color)}.disabled .outline-start,.disabled .outline-end,.disabled .outline-panel-inactive{opacity:var(--_disabled-outline-opacity)}.disabled .outline-start::before,.disabled .outline-end::before,.disabled .outline-panel-inactive,.disabled .outline-panel-inactive::before,.disabled .outline-panel-inactive::after{border-width:var(--_disabled-outline-width)}.error .outline{border-color:var(--_error-outline-color);color:var(--_error-outline-color)}.error:hover .outline{border-color:var(--_error-hover-outline-color);color:var(--_error-hover-outline-color)}.error.focused .outline{border-color:var(--_error-focus-outline-color);color:var(--_error-focus-outline-color)}.resizable .container{bottom:var(--_focus-outline-width);inset-inline-end:var(--_focus-outline-width);clip-path:inset(var(--_focus-outline-width) 0 0 var(--_focus-outline-width))}.resizable .container>*{top:var(--_focus-outline-width);inset-inline-start:var(--_focus-outline-width)}.resizable .container:dir(rtl){clip-path:inset(var(--_focus-outline-width) var(--_focus-outline-width) 0 0)}}@layer hcm{@media(forced-colors: active){.disabled .outline{border-color:GrayText;color:GrayText}.disabled :is(.outline-start,.outline-end,.outline-panel-inactive){opacity:1}}}
`;

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$6 = i$c `:host{display:inline-flex;resize:both}.field{display:flex;flex:1;flex-direction:column;writing-mode:horizontal-tb;max-width:100%}.container-overflow{border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);display:flex;height:100%;position:relative}.container{align-items:center;border-radius:inherit;display:flex;flex:1;max-height:100%;min-height:100%;min-width:min-content;position:relative}.field,.container-overflow{resize:inherit}.resizable:not(.disabled) .container{resize:inherit;overflow:hidden}.disabled{pointer-events:none}slot[name=container]{border-radius:inherit}slot[name=container]::slotted(*){border-radius:inherit;inset:0;pointer-events:none;position:absolute}@layer styles{.start,.middle,.end{display:flex;box-sizing:border-box;height:100%;position:relative}.start{color:var(--_leading-content-color)}.end{color:var(--_trailing-content-color)}.start,.end{align-items:center;justify-content:center}.with-start .start{margin-inline:var(--_with-leading-content-leading-space) var(--_content-space)}.with-end .end{margin-inline:var(--_content-space) var(--_with-trailing-content-trailing-space)}.middle{align-items:stretch;align-self:baseline;flex:1}.content{color:var(--_content-color);display:flex;flex:1;opacity:0;transition:opacity 83ms cubic-bezier(0.2, 0, 0, 1)}.no-label .content,.focused .content,.populated .content{opacity:1;transition-delay:67ms}:is(.disabled,.disable-transitions) .content{transition:none}.content ::slotted(*){all:unset;color:currentColor;font-family:var(--_content-font);font-size:var(--_content-size);line-height:var(--_content-line-height);font-weight:var(--_content-weight);width:100%;overflow-wrap:revert;white-space:revert}.content ::slotted(:not(textarea)){padding-top:var(--_top-space);padding-bottom:var(--_bottom-space)}.content ::slotted(textarea){margin-top:var(--_top-space);margin-bottom:var(--_bottom-space)}:hover .content{color:var(--_hover-content-color)}:hover .start{color:var(--_hover-leading-content-color)}:hover .end{color:var(--_hover-trailing-content-color)}.focused .content{color:var(--_focus-content-color)}.focused .start{color:var(--_focus-leading-content-color)}.focused .end{color:var(--_focus-trailing-content-color)}.disabled .content{color:var(--_disabled-content-color)}.disabled.no-label .content,.disabled.focused .content,.disabled.populated .content{opacity:var(--_disabled-content-opacity)}.disabled .start{color:var(--_disabled-leading-content-color);opacity:var(--_disabled-leading-content-opacity)}.disabled .end{color:var(--_disabled-trailing-content-color);opacity:var(--_disabled-trailing-content-opacity)}.error .content{color:var(--_error-content-color)}.error .start{color:var(--_error-leading-content-color)}.error .end{color:var(--_error-trailing-content-color)}.error:hover .content{color:var(--_error-hover-content-color)}.error:hover .start{color:var(--_error-hover-leading-content-color)}.error:hover .end{color:var(--_error-hover-trailing-content-color)}.error.focused .content{color:var(--_error-focus-content-color)}.error.focused .start{color:var(--_error-focus-leading-content-color)}.error.focused .end{color:var(--_error-focus-trailing-content-color)}}@layer hcm{@media(forced-colors: active){.disabled :is(.start,.content,.end){color:GrayText;opacity:1}}}@layer styles{.label{box-sizing:border-box;color:var(--_label-text-color);overflow:hidden;max-width:100%;text-overflow:ellipsis;white-space:nowrap;z-index:1;font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight);width:min-content}.label-wrapper{inset:0;pointer-events:none;position:absolute}.label.resting{position:absolute;top:var(--_top-space)}.label.floating{font-size:var(--_label-text-populated-size);line-height:var(--_label-text-populated-line-height);transform-origin:top left}.label.hidden{opacity:0}.no-label .label{display:none}.label-wrapper{inset:0;position:absolute;text-align:initial}:hover .label{color:var(--_hover-label-text-color)}.focused .label{color:var(--_focus-label-text-color)}.disabled .label{color:var(--_disabled-label-text-color)}.disabled .label:not(.hidden){opacity:var(--_disabled-label-text-opacity)}.error .label{color:var(--_error-label-text-color)}.error:hover .label{color:var(--_error-hover-label-text-color)}.error.focused .label{color:var(--_error-focus-label-text-color)}}@layer hcm{@media(forced-colors: active){.disabled .label:not(.hidden){color:GrayText;opacity:1}}}@layer styles{.supporting-text{color:var(--_supporting-text-color);display:flex;font-family:var(--_supporting-text-font);font-size:var(--_supporting-text-size);line-height:var(--_supporting-text-line-height);font-weight:var(--_supporting-text-weight);gap:16px;justify-content:space-between;padding-inline-start:var(--_supporting-text-leading-space);padding-inline-end:var(--_supporting-text-trailing-space);padding-top:var(--_supporting-text-top-space)}.supporting-text :nth-child(2){flex-shrink:0}:hover .supporting-text{color:var(--_hover-supporting-text-color)}.focus .supporting-text{color:var(--_focus-supporting-text-color)}.disabled .supporting-text{color:var(--_disabled-supporting-text-color);opacity:var(--_disabled-supporting-text-opacity)}.error .supporting-text{color:var(--_error-supporting-text-color)}.error:hover .supporting-text{color:var(--_error-hover-supporting-text-color)}.error.focus .supporting-text{color:var(--_error-focus-supporting-text-color)}}@layer hcm{@media(forced-colors: active){.disabled .supporting-text{color:GrayText;opacity:1}}}
`;

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * TODO(b/228525797): add docs
 * @final
 * @suppress {visibility}
 */
class MdOutlinedField extends OutlinedField {
}
MdOutlinedField.styles = [styles$6, styles$7];

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$5 = i$c `:host{--_caret-color: var(--md-outlined-text-field-caret-color, var(--md-sys-color-primary, #6750a4));--_disabled-input-text-color: var(--md-outlined-text-field-disabled-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-input-text-opacity: var(--md-outlined-text-field-disabled-input-text-opacity, 0.38);--_disabled-label-text-color: var(--md-outlined-text-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-outlined-text-field-disabled-label-text-opacity, 0.38);--_disabled-leading-icon-color: var(--md-outlined-text-field-disabled-leading-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-leading-icon-opacity: var(--md-outlined-text-field-disabled-leading-icon-opacity, 0.38);--_disabled-outline-color: var(--md-outlined-text-field-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-outline-opacity: var(--md-outlined-text-field-disabled-outline-opacity, 0.12);--_disabled-outline-width: var(--md-outlined-text-field-disabled-outline-width, 1px);--_disabled-supporting-text-color: var(--md-outlined-text-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-supporting-text-opacity: var(--md-outlined-text-field-disabled-supporting-text-opacity, 0.38);--_disabled-trailing-icon-color: var(--md-outlined-text-field-disabled-trailing-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-trailing-icon-opacity: var(--md-outlined-text-field-disabled-trailing-icon-opacity, 0.38);--_error-focus-caret-color: var(--md-outlined-text-field-error-focus-caret-color, var(--md-sys-color-error, #b3261e));--_error-focus-input-text-color: var(--md-outlined-text-field-error-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-label-text-color: var(--md-outlined-text-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-leading-icon-color: var(--md-outlined-text-field-error-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-focus-outline-color: var(--md-outlined-text-field-error-focus-outline-color, var(--md-sys-color-error, #b3261e));--_error-focus-supporting-text-color: var(--md-outlined-text-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-trailing-icon-color: var(--md-outlined-text-field-error-focus-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_error-hover-input-text-color: var(--md-outlined-text-field-error-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_error-hover-label-text-color: var(--md-outlined-text-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-leading-icon-color: var(--md-outlined-text-field-error-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-hover-outline-color: var(--md-outlined-text-field-error-hover-outline-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-supporting-text-color: var(--md-outlined-text-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-hover-trailing-icon-color: var(--md-outlined-text-field-error-hover-trailing-icon-color, var(--md-sys-color-on-error-container, #410e0b));--_error-input-text-color: var(--md-outlined-text-field-error-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_error-label-text-color: var(--md-outlined-text-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_error-leading-icon-color: var(--md-outlined-text-field-error-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-outline-color: var(--md-outlined-text-field-error-outline-color, var(--md-sys-color-error, #b3261e));--_error-supporting-text-color: var(--md-outlined-text-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-trailing-icon-color: var(--md-outlined-text-field-error-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_focus-input-text-color: var(--md-outlined-text-field-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_focus-label-text-color: var(--md-outlined-text-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_focus-leading-icon-color: var(--md-outlined-text-field-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-outline-color: var(--md-outlined-text-field-focus-outline-color, var(--md-sys-color-primary, #6750a4));--_focus-outline-width: var(--md-outlined-text-field-focus-outline-width, 3px);--_focus-supporting-text-color: var(--md-outlined-text-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-trailing-icon-color: var(--md-outlined-text-field-focus-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-input-text-color: var(--md-outlined-text-field-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-label-text-color: var(--md-outlined-text-field-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-leading-icon-color: var(--md-outlined-text-field-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-outline-color: var(--md-outlined-text-field-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-outline-width: var(--md-outlined-text-field-hover-outline-width, 1px);--_hover-supporting-text-color: var(--md-outlined-text-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-trailing-icon-color: var(--md-outlined-text-field-hover-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-color: var(--md-outlined-text-field-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_input-text-font: var(--md-outlined-text-field-input-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_input-text-line-height: var(--md-outlined-text-field-input-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_input-text-placeholder-color: var(--md-outlined-text-field-input-text-placeholder-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-prefix-color: var(--md-outlined-text-field-input-text-prefix-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-size: var(--md-outlined-text-field-input-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_input-text-suffix-color: var(--md-outlined-text-field-input-text-suffix-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-weight: var(--md-outlined-text-field-input-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_label-text-color: var(--md-outlined-text-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-font: var(--md-outlined-text-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-outlined-text-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_label-text-populated-line-height: var(--md-outlined-text-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_label-text-populated-size: var(--md-outlined-text-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_label-text-size: var(--md-outlined-text-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_label-text-weight: var(--md-outlined-text-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_leading-icon-color: var(--md-outlined-text-field-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_leading-icon-size: var(--md-outlined-text-field-leading-icon-size, 24px);--_outline-color: var(--md-outlined-text-field-outline-color, var(--md-sys-color-outline, #79747e));--_outline-width: var(--md-outlined-text-field-outline-width, 1px);--_supporting-text-color: var(--md-outlined-text-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-font: var(--md-outlined-text-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_supporting-text-line-height: var(--md-outlined-text-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_supporting-text-size: var(--md-outlined-text-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_supporting-text-weight: var(--md-outlined-text-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_trailing-icon-color: var(--md-outlined-text-field-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_trailing-icon-size: var(--md-outlined-text-field-trailing-icon-size, 24px);--_container-shape-start-start: var(--md-outlined-text-field-container-shape-start-start, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-start-end: var(--md-outlined-text-field-container-shape-start-end, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-end: var(--md-outlined-text-field-container-shape-end-end, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-start: var(--md-outlined-text-field-container-shape-end-start, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_icon-input-space: var(--md-outlined-text-field-icon-input-space, 16px);--_leading-space: var(--md-outlined-text-field-leading-space, 16px);--_trailing-space: var(--md-outlined-text-field-trailing-space, 16px);--_top-space: var(--md-outlined-text-field-top-space, 16px);--_bottom-space: var(--md-outlined-text-field-bottom-space, 16px);--_input-text-prefix-trailing-space: var(--md-outlined-text-field-input-text-prefix-trailing-space, 2px);--_input-text-suffix-leading-space: var(--md-outlined-text-field-input-text-suffix-leading-space, 2px);--_focus-caret-color: var(--md-outlined-text-field-focus-caret-color, var(--md-sys-color-primary, #6750a4));--_with-leading-icon-leading-space: var(--md-outlined-text-field-with-leading-icon-leading-space, 12px);--_with-trailing-icon-trailing-space: var(--md-outlined-text-field-with-trailing-icon-trailing-space, 12px);--md-outlined-field-bottom-space: var(--_bottom-space);--md-outlined-field-container-shape-end-end: var(--_container-shape-end-end);--md-outlined-field-container-shape-end-start: var(--_container-shape-end-start);--md-outlined-field-container-shape-start-end: var(--_container-shape-start-end);--md-outlined-field-container-shape-start-start: var(--_container-shape-start-start);--md-outlined-field-content-color: var(--_input-text-color);--md-outlined-field-content-font: var(--_input-text-font);--md-outlined-field-content-line-height: var(--_input-text-line-height);--md-outlined-field-content-size: var(--_input-text-size);--md-outlined-field-content-space: var(--_icon-input-space);--md-outlined-field-content-weight: var(--_input-text-weight);--md-outlined-field-disabled-content-color: var(--_disabled-input-text-color);--md-outlined-field-disabled-content-opacity: var(--_disabled-input-text-opacity);--md-outlined-field-disabled-label-text-color: var(--_disabled-label-text-color);--md-outlined-field-disabled-label-text-opacity: var(--_disabled-label-text-opacity);--md-outlined-field-disabled-leading-content-color: var(--_disabled-leading-icon-color);--md-outlined-field-disabled-leading-content-opacity: var(--_disabled-leading-icon-opacity);--md-outlined-field-disabled-outline-color: var(--_disabled-outline-color);--md-outlined-field-disabled-outline-opacity: var(--_disabled-outline-opacity);--md-outlined-field-disabled-outline-width: var(--_disabled-outline-width);--md-outlined-field-disabled-supporting-text-color: var(--_disabled-supporting-text-color);--md-outlined-field-disabled-supporting-text-opacity: var(--_disabled-supporting-text-opacity);--md-outlined-field-disabled-trailing-content-color: var(--_disabled-trailing-icon-color);--md-outlined-field-disabled-trailing-content-opacity: var(--_disabled-trailing-icon-opacity);--md-outlined-field-error-content-color: var(--_error-input-text-color);--md-outlined-field-error-focus-content-color: var(--_error-focus-input-text-color);--md-outlined-field-error-focus-label-text-color: var(--_error-focus-label-text-color);--md-outlined-field-error-focus-leading-content-color: var(--_error-focus-leading-icon-color);--md-outlined-field-error-focus-outline-color: var(--_error-focus-outline-color);--md-outlined-field-error-focus-supporting-text-color: var(--_error-focus-supporting-text-color);--md-outlined-field-error-focus-trailing-content-color: var(--_error-focus-trailing-icon-color);--md-outlined-field-error-hover-content-color: var(--_error-hover-input-text-color);--md-outlined-field-error-hover-label-text-color: var(--_error-hover-label-text-color);--md-outlined-field-error-hover-leading-content-color: var(--_error-hover-leading-icon-color);--md-outlined-field-error-hover-outline-color: var(--_error-hover-outline-color);--md-outlined-field-error-hover-supporting-text-color: var(--_error-hover-supporting-text-color);--md-outlined-field-error-hover-trailing-content-color: var(--_error-hover-trailing-icon-color);--md-outlined-field-error-label-text-color: var(--_error-label-text-color);--md-outlined-field-error-leading-content-color: var(--_error-leading-icon-color);--md-outlined-field-error-outline-color: var(--_error-outline-color);--md-outlined-field-error-supporting-text-color: var(--_error-supporting-text-color);--md-outlined-field-error-trailing-content-color: var(--_error-trailing-icon-color);--md-outlined-field-focus-content-color: var(--_focus-input-text-color);--md-outlined-field-focus-label-text-color: var(--_focus-label-text-color);--md-outlined-field-focus-leading-content-color: var(--_focus-leading-icon-color);--md-outlined-field-focus-outline-color: var(--_focus-outline-color);--md-outlined-field-focus-outline-width: var(--_focus-outline-width);--md-outlined-field-focus-supporting-text-color: var(--_focus-supporting-text-color);--md-outlined-field-focus-trailing-content-color: var(--_focus-trailing-icon-color);--md-outlined-field-hover-content-color: var(--_hover-input-text-color);--md-outlined-field-hover-label-text-color: var(--_hover-label-text-color);--md-outlined-field-hover-leading-content-color: var(--_hover-leading-icon-color);--md-outlined-field-hover-outline-color: var(--_hover-outline-color);--md-outlined-field-hover-outline-width: var(--_hover-outline-width);--md-outlined-field-hover-supporting-text-color: var(--_hover-supporting-text-color);--md-outlined-field-hover-trailing-content-color: var(--_hover-trailing-icon-color);--md-outlined-field-label-text-color: var(--_label-text-color);--md-outlined-field-label-text-font: var(--_label-text-font);--md-outlined-field-label-text-line-height: var(--_label-text-line-height);--md-outlined-field-label-text-populated-line-height: var(--_label-text-populated-line-height);--md-outlined-field-label-text-populated-size: var(--_label-text-populated-size);--md-outlined-field-label-text-size: var(--_label-text-size);--md-outlined-field-label-text-weight: var(--_label-text-weight);--md-outlined-field-leading-content-color: var(--_leading-icon-color);--md-outlined-field-leading-space: var(--_leading-space);--md-outlined-field-outline-color: var(--_outline-color);--md-outlined-field-outline-width: var(--_outline-width);--md-outlined-field-supporting-text-color: var(--_supporting-text-color);--md-outlined-field-supporting-text-font: var(--_supporting-text-font);--md-outlined-field-supporting-text-line-height: var(--_supporting-text-line-height);--md-outlined-field-supporting-text-size: var(--_supporting-text-size);--md-outlined-field-supporting-text-weight: var(--_supporting-text-weight);--md-outlined-field-top-space: var(--_top-space);--md-outlined-field-trailing-content-color: var(--_trailing-icon-color);--md-outlined-field-trailing-space: var(--_trailing-space);--md-outlined-field-with-leading-content-leading-space: var(--_with-leading-icon-leading-space);--md-outlined-field-with-trailing-content-trailing-space: var(--_with-trailing-icon-trailing-space)}
`;

/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const styles$4 = i$c `:host{display:inline-flex;outline:none;resize:both;text-align:start;-webkit-tap-highlight-color:rgba(0,0,0,0)}.text-field,.field{width:100%}.text-field{display:inline-flex}.field{cursor:text}.disabled .field{cursor:default}.text-field,.textarea .field{resize:inherit}slot[name=container]{border-radius:inherit}.icon{color:currentColor;display:flex;align-items:center;justify-content:center;fill:currentColor;position:relative}.icon ::slotted(*){display:flex;position:absolute}[has-start] .icon.leading{font-size:var(--_leading-icon-size);height:var(--_leading-icon-size);width:var(--_leading-icon-size)}[has-end] .icon.trailing{font-size:var(--_trailing-icon-size);height:var(--_trailing-icon-size);width:var(--_trailing-icon-size)}.input-wrapper{display:flex}.input-wrapper>*{all:inherit;padding:0}.input{caret-color:var(--_caret-color);overflow-x:hidden;text-align:inherit}.input::placeholder{color:currentColor;opacity:1}.input::-webkit-calendar-picker-indicator{display:none}.input::-webkit-search-decoration,.input::-webkit-search-cancel-button{display:none}@media(forced-colors: active){.input{background:none}}.no-spinner .input::-webkit-inner-spin-button,.no-spinner .input::-webkit-outer-spin-button{display:none}.no-spinner .input[type=number]{-moz-appearance:textfield}:focus-within .input{caret-color:var(--_focus-caret-color)}.error:focus-within .input{caret-color:var(--_error-focus-caret-color)}.text-field:not(.disabled) .prefix{color:var(--_input-text-prefix-color)}.text-field:not(.disabled) .suffix{color:var(--_input-text-suffix-color)}.text-field:not(.disabled) .input::placeholder{color:var(--_input-text-placeholder-color)}.prefix,.suffix{text-wrap:nowrap;width:min-content}.prefix{padding-inline-end:var(--_input-text-prefix-trailing-space)}.suffix{padding-inline-start:var(--_input-text-suffix-leading-space)}
`;

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * TODO(b/228525797): Add docs
 * @final
 * @suppress {visibility}
 */
class MdOutlinedTextField extends TextField$1 {
    constructor() {
        super(...arguments);
        this.fieldTag = i$1 `md-outlined-field`;
    }
}
MdOutlinedTextField.scopedElements = {
    'md-outlined-field': MdOutlinedField,
};
MdOutlinedTextField.styles = [styles$4, styles$5];

function searchRegex(filter) {
    var _a;
    if (!filter)
        return /.*/i;
    const terms = (_a = filter
        .replace(/[.+^${}()|[\]\\]/g, '\\$&')
        .trim()
        .match(/(?:[^\s"']+|['"][^'"]*["'])+/g)) !== null && _a !== void 0 ? _a : [];
    const expandedTerms = terms.map(term => term.replace(/\*/g, '.*').replace(/\?/g, '.{1}').replace(/"|'/g, ''));
    const regexString = expandedTerms.map(term => `(?=.*${term})`);
    return new RegExp(`${regexString.join('')}.*`, 'i');
}
function debounce(callback, delay = 100) {
    let timeout;
    return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            callback(...args);
        }, delay);
    };
}
// Base class for all filterable list components
class FilterListBase extends ScopedElementsMixin(r$6) {
    constructor() {
        super(...arguments);
        /** Whether list items can be filtered on `headline` and `supportingText` */
        this.filterable = false;
        /** Placeholder for search input field */
        this.searchhelper = 'search';
        this.searchRegex = /.*/i;
    }
    onFilter() {
        var _a;
        this.searchRegex = searchRegex((_a = this.searchInput) === null || _a === void 0 ? void 0 : _a.value);
    }
    renderSearchField() {
        return this.filterable
            ? x$1 `<md-outlined-text-field
          placeholder="${this.searchhelper}"
          @input="${debounce(() => this.onFilter())}"
        >
          <md-icon slot="leading-icon">search</md-icon></md-outlined-text-field
        >`
            : x$1 ``;
    }
}
__decorate([
    n$j({ type: Boolean })
], FilterListBase.prototype, "filterable", void 0);
__decorate([
    n$j({ type: String })
], FilterListBase.prototype, "searchhelper", void 0);
__decorate([
    r$4()
], FilterListBase.prototype, "searchRegex", void 0);
__decorate([
    e$d('md-outlined-text-field')
], FilterListBase.prototype, "searchInput", void 0);

function term(item) {
    var _a, _b, _c;
    return `${item.headline} ${(_a = item.supportingText) !== null && _a !== void 0 ? _a : ''}${(_c = (_b = item.filtergroup) === null || _b === void 0 ? void 0 : _b.join(' ')) !== null && _c !== void 0 ? _c : ''}`;
}
/** TextField designed to be used for SCL element */
class ActionList extends FilterListBase {
    constructor() {
        super(...arguments);
        /** ListItems and potential */
        this.items = [];
        /** Height of each list item */
        this.height = 72;
    }
    renderMoreVertItem(item) {
        item.actions.shift();
        const otherActions = item.actions;
        return x$1 `
      <span style="position: relative">
        <md-list-item
          id="more-vert-anchor"
          type="button"
          class="${e$1({
            hidden: !this.searchRegex.test(term(item)),
        })}"
          @click=${(evt) => {
            const menu = evt.target instanceof Icon
                ? evt.target.parentElement
                    .nextElementSibling
                : evt.target.nextElementSibling;
            menu.show();
        }}
        >
          <md-icon slot="start">more_vert</md-icon>
        </md-list-item>
        <md-menu id="more-vert-menu" anchor="more-vert-anchor">
          ${otherActions.map(action => x$1 `<md-menu-item @click=${action.callback}>
              <div slot="headline">${action.label}</div>
              <md-icon slot="start">${action.icon}</md-icon>
            </md-menu-item>`)}
        </md-menu> </span
      >${item.divider
            ? x$1 `<md-divider
            class="${e$1({ hidden: !this.searchRegex.test(term(item)) })}"
          ></md-divider>`
            : x$1 ``}
    `;
    }
    renderActionItem(item, index = 0) {
        const action = item.actions ? item.actions[index] : null;
        if (!action)
            return x$1 `<md-list-item
          class="${e$1({
                hidden: !this.searchRegex.test(term(item)),
            })}"
        ></md-list-item
        >${item.divider
                ? x$1 `<md-divider
              class="${e$1({
                    hidden: !this.searchRegex.test(term(item)),
                })}"
            ></md-divider>`
                : x$1 ``}`;
        return x$1 `<md-list-item
        type="button"
        class="${e$1({
            hidden: !this.searchRegex.test(term(item)),
        })}"
        @click=${action.callback}
      >
        <md-icon slot="start">${action.icon}</md-icon> </md-list-item
      >${item.divider
            ? x$1 `<md-divider
            class="${e$1({ hidden: !this.searchRegex.test(term(item)) })}"
          ></md-divider>`
            : x$1 ``}`;
    }
    renderOtherActions() {
        return x$1 `<md-list>
      ${this.items.map(item => {
            var _a;
            return item.actions && ((_a = item.actions) === null || _a === void 0 ? void 0 : _a.length) > 2
                ? this.renderMoreVertItem(item)
                : this.renderActionItem(item, 1);
        })}</md-list
    >`;
    }
    renderFirstAction() {
        return x$1 `<md-list>
      ${this.items.map(item => this.renderActionItem(item))}</md-list
    >`;
    }
    renderActions() {
        return x$1 `
      ${this.items.some(item => item.actions && item.actions[0])
            ? this.renderFirstAction()
            : x$1 ``}
      ${this.items.some(item => item.actions && item.actions.length > 1)
            ? this.renderOtherActions()
            : x$1 ``}
    `;
    }
    renderActionListItem(item) {
        var _a;
        return x$1 `<md-list-item
        type="${item.primaryAction ? 'link' : 'text'}"
        class="${e$1({
            hidden: !this.searchRegex.test(term(item)),
        })}"
        title="${(_a = item.headline) !== null && _a !== void 0 ? _a : ''}
${item.headline && item.supportingText ? '-' : ''}${item.supportingText}"
        @click="${item.primaryAction}"
      >
        <div slot="headline" class="firstLine">${item.headline}</div>
        ${item.supportingText
            ? x$1 `<div slot="supporting-text">${item.supportingText}</div>`
            : x$1 ``}
        ${item.startingIcon
            ? x$1 `<md-icon slot="start">${item.startingIcon}</md-icon>`
            : x$1 ``}
        ${item.endingIcon
            ? x$1 `<md-icon slot="end">${item.endingIcon}</md-icon>`
            : x$1 ``} </md-list-item
      >${item.divider
            ? x$1 `<md-divider
            class="${e$1({ hidden: !this.searchRegex.test(term(item)) })}"
          ></md-divider>`
            : x$1 ``}`;
    }
    renderListItem(item) {
        return this.renderActionListItem(item);
    }
    render() {
        return x$1 `<style>
        md-list-item {
          height: ${this.height}px;
        }
        [slot='supporting-text'] {
          max-height: ${this.height - 24}px;
        }
      </style>
      <section>
        ${this.renderSearchField()}
        <div style="display: flex;">
          <md-list class="listitems">
            ${this.items.map(item => this.renderListItem(item))}</md-list
          >
          ${this.renderActions()}
        </div>
      </section>`;
    }
}
ActionList.scopedElements = {
    'md-outlined-text-field': MdOutlinedTextField,
    'md-icon': MdIcon,
    'md-list': MdList,
    'md-list-item': MdListItem,
    'md-divider': MdDivider,
    'md-menu': MdMenu,
    'md-menu-item': MdMenuItem,
};
ActionList.styles = i$c `
    section {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    md-outlined-text-field {
      background-color: var(--md-sys-color-surface, #fef7ff);
      --md-outlined-text-field-container-shape: 32px;
      padding: 8px;
    }

    [slot='headline'] {
      white-space: pre;
    }

    [slot='supporting-text'] {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: normal;
    }

    .listitems {
      flex: auto;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .hidden {
      display: none;
    }
  `;
__decorate([
    n$j({ type: Array })
], ActionList.prototype, "items", void 0);
__decorate([
    n$j({ type: Number })
], ActionList.prototype, "height", void 0);

/** @returns the cartesian product of `arrays` */
function crossProduct(...arrays) {
    return arrays.reduce((a, b) => a.flatMap((d) => b.map((e) => [d, e].flat())), [[]]);
}

const tAbstractConductingEquipment = [
    "TransformerWinding",
    "ConductingEquipment",
];
const tEquipment = [
    "GeneralEquipment",
    "PowerTransformer",
    ...tAbstractConductingEquipment,
];
const tEquipmentContainer = ["Substation", "VoltageLevel", "Bay"];
const tGeneralEquipmentContainer = ["Process", "Line"];
const tAbstractEqFuncSubFunc = ["EqSubFunction", "EqFunction"];
const tPowerSystemResource = [
    "SubFunction",
    "Function",
    "TapChanger",
    "SubEquipment",
    ...tEquipment,
    ...tEquipmentContainer,
    ...tGeneralEquipmentContainer,
    ...tAbstractEqFuncSubFunc,
];
const tLNodeContainer = ["ConnectivityNode", ...tPowerSystemResource];
const tCertificate = ["GOOSESecurity", "SMVSecurity"];
const tNaming = ["SubNetwork", ...tCertificate, ...tLNodeContainer];
const tAbstractDataAttribute = ["BDA", "DA"];
const tControlWithIEDName = ["SampledValueControl", "GSEControl"];
const tControlWithTriggerOpt = ["LogControl", "ReportControl"];
const tControl = [...tControlWithIEDName, ...tControlWithTriggerOpt];
const tControlBlock = ["GSE", "SMV"];
const tUnNaming = [
    "ConnectedAP",
    "PhysConn",
    "SDO",
    "DO",
    "DAI",
    "SDI",
    "DOI",
    "Inputs",
    "RptEnabled",
    "Server",
    "ServerAt",
    "SettingControl",
    "Communication",
    "Log",
    "LDevice",
    "DataSet",
    "AccessPoint",
    "IED",
    "NeutralPoint",
    ...tControl,
    ...tControlBlock,
    ...tAbstractDataAttribute,
];
const tAnyLN = ["LN0", "LN"];
const tAnyContentFromOtherNamespace = [
    "Text",
    "Private",
    "Hitem",
    "AccessControl",
];
const tCert = ["Subject", "IssuerName"];
const tDurationInMilliSec = ["MinTime", "MaxTime"];
const tIDNaming = ["LNodeType", "DOType", "DAType", "EnumType"];
const tServiceYesNo = [
    "FileHandling",
    "TimeSyncProt",
    "CommProt",
    "SGEdit",
    "ConfSG",
    "GetDirectory",
    "GetDataObjectDefinition",
    "DataObjectDirectory",
    "GetDataSetValue",
    "SetDataSetValue",
    "DataSetDirectory",
    "ReadWrite",
    "TimerActivatedControl",
    "GetCBValues",
    "GSEDir",
    "ConfLdName",
];
const tServiceWithMaxAndMaxAttributes = ["DynDataSet", "ConfDataSet"];
const tServiceWithMax = [
    "GSSE",
    "GOOSE",
    "ConfReportControl",
    "SMVsc",
    ...tServiceWithMaxAndMaxAttributes,
];
const tServiceWithMaxNonZero = ["ConfLogControl", "ConfSigRef"];
const tServiceSettings = [
    "ReportSettings",
    "LogSettings",
    "GSESettings",
    "SMVSettings",
];
const tBaseElement = ["SCL", ...tNaming, ...tUnNaming, ...tIDNaming];
const sCLTags = [
    ...tBaseElement,
    ...tAnyContentFromOtherNamespace,
    "Header",
    "LNode",
    "Val",
    "Voltage",
    "Services",
    ...tCert,
    ...tDurationInMilliSec,
    "Association",
    "FCDA",
    "ClientLN",
    "IEDName",
    "ExtRef",
    "Protocol",
    ...tAnyLN,
    ...tServiceYesNo,
    "DynAssociation",
    "SettingGroups",
    ...tServiceWithMax,
    ...tServiceWithMaxNonZero,
    ...tServiceSettings,
    "ConfLNs",
    "ClientServices",
    "SupSubscription",
    "ValueHandling",
    "RedProt",
    "McSecurity",
    "KDC",
    "Address",
    "P",
    "ProtNs",
    "EnumVal",
    "Terminal",
    "BitRate",
    "Authentication",
    "DataTypeTemplates",
    "History",
    "OptFields",
    "SmvOpts",
    "TrgOps",
    "SamplesPerSec",
    "SmpRate",
    "SecPerSamples",
];
const tBaseNameSequence = ["Text", "Private"];
const tNamingSequence = [...tBaseNameSequence];
const tUnNamingSequence = [...tBaseNameSequence];
const tIDNamingSequence = [...tBaseNameSequence];
const tAbstractDataAttributeSequence = [...tUnNamingSequence, "Val"];
const tLNodeContainerSequence = [...tNamingSequence, "LNode"];
const tPowerSystemResourceSequence = [...tLNodeContainerSequence];
const tEquipmentSequence = [...tPowerSystemResourceSequence];
const tEquipmentContainerSequence = [
    ...tPowerSystemResourceSequence,
    "PowerTransformer",
    "GeneralEquipment",
];
const tAbstractConductingEquipmentSequence = [
    ...tEquipmentSequence,
    "Terminal",
];
const tControlBlockSequence = [...tUnNamingSequence, "Address"];
const tControlSequence = [...tNamingSequence];
const tControlWithIEDNameSequence = [...tControlSequence, "IEDName"];
const tAnyLNSequence = [
    ...tUnNamingSequence,
    "DataSet",
    "ReportControl",
    "LogControl",
    "DOI",
    "Inputs",
    "Log",
];
const tGeneralEquipmentContainerSequence = [
    ...tPowerSystemResourceSequence,
    "GeneralEquipment",
    "Function",
];
const tControlWithTriggerOptSequence = [...tControlSequence, "TrgOps"];
const tAbstractEqFuncSubFuncSequence = [
    ...tPowerSystemResourceSequence,
    "GeneralEquipment",
    "EqSubFunction",
];
const tags$1 = {
    AccessControl: {
        parents: ["LDevice"],
        children: [],
    },
    AccessPoint: {
        parents: ["IED"],
        children: [
            ...tNamingSequence,
            "Server",
            "LN",
            "ServerAt",
            "Services",
            "GOOSESecurity",
            "SMVSecurity",
        ],
    },
    Address: {
        parents: ["ConnectedAP", "GSE", "SMV"],
        children: ["P"],
    },
    Association: {
        parents: ["Server"],
        children: [],
    },
    Authentication: {
        parents: ["Server"],
        children: [],
    },
    BDA: {
        parents: ["DAType"],
        children: [...tAbstractDataAttributeSequence],
    },
    BitRate: {
        parents: ["SubNetwork"],
        children: [],
    },
    Bay: {
        parents: ["VoltageLevel"],
        children: [
            ...tEquipmentContainerSequence,
            "ConductingEquipment",
            "ConnectivityNode",
            "Function",
        ],
    },
    ClientLN: {
        parents: ["RptEnabled"],
        children: [],
    },
    ClientServices: {
        parents: ["Services"],
        children: ["TimeSyncProt", "McSecurity"],
    },
    CommProt: {
        parents: ["Services"],
        children: [],
    },
    Communication: {
        parents: ["SCL"],
        children: [...tUnNamingSequence, "SubNetwork"],
    },
    ConductingEquipment: {
        parents: ["Process", "Line", "SubFunction", "Function", "Bay"],
        children: [
            ...tAbstractConductingEquipmentSequence,
            "EqFunction",
            "SubEquipment",
        ],
    },
    ConfDataSet: {
        parents: ["Services"],
        children: [],
    },
    ConfLdName: {
        parents: ["Services"],
        children: [],
    },
    ConfLNs: {
        parents: ["Services"],
        children: [],
    },
    ConfLogControl: {
        parents: ["Services"],
        children: [],
    },
    ConfReportControl: {
        parents: ["Services"],
        children: [],
    },
    ConfSG: {
        parents: ["SettingGroups"],
        children: [],
    },
    ConfSigRef: {
        parents: ["Services"],
        children: [],
    },
    ConnectedAP: {
        parents: ["SubNetwork"],
        children: [...tUnNamingSequence, "Address", "GSE", "SMV", "PhysConn"],
    },
    ConnectivityNode: {
        parents: ["Bay", "Line"],
        children: [...tLNodeContainerSequence],
    },
    DA: {
        parents: ["DOType"],
        children: [...tAbstractDataAttributeSequence],
    },
    DAI: {
        parents: ["DOI", "SDI"],
        children: [...tUnNamingSequence, "Val"],
    },
    DAType: {
        parents: ["DataTypeTemplates"],
        children: [...tIDNamingSequence, "BDA", "ProtNs"],
    },
    DO: {
        parents: ["LNodeType"],
        children: [...tUnNamingSequence],
    },
    DOI: {
        parents: [...tAnyLN],
        children: [...tUnNamingSequence, "SDI", "DAI"],
    },
    DOType: {
        parents: ["DataTypeTemplates"],
        children: [...tIDNamingSequence, "SDO", "DA"],
    },
    DataObjectDirectory: {
        parents: ["Services"],
        children: [],
    },
    DataSet: {
        parents: [...tAnyLN],
        children: [...tNamingSequence, "FCDA"],
    },
    DataSetDirectory: {
        parents: ["Services"],
        children: [],
    },
    DataTypeTemplates: {
        parents: ["SCL"],
        children: ["LNodeType", "DOType", "DAType", "EnumType"],
    },
    DynAssociation: {
        parents: ["Services"],
        children: [],
    },
    DynDataSet: {
        parents: ["Services"],
        children: [],
    },
    EnumType: {
        parents: ["DataTypeTemplates"],
        children: [...tIDNamingSequence, "EnumVal"],
    },
    EnumVal: {
        parents: ["EnumType"],
        children: [],
    },
    EqFunction: {
        parents: [
            "GeneralEquipment",
            "TapChanger",
            "TransformerWinding",
            "PowerTransformer",
            "SubEquipment",
            "ConductingEquipment",
        ],
        children: [...tAbstractEqFuncSubFuncSequence],
    },
    EqSubFunction: {
        parents: ["EqSubFunction", "EqFunction"],
        children: [...tAbstractEqFuncSubFuncSequence],
    },
    ExtRef: {
        parents: ["Inputs"],
        children: [],
    },
    FCDA: {
        parents: ["DataSet"],
        children: [],
    },
    FileHandling: {
        parents: ["Services"],
        children: [],
    },
    Function: {
        parents: ["Bay", "VoltageLevel", "Substation", "Process", "Line"],
        children: [
            ...tPowerSystemResourceSequence,
            "SubFunction",
            "GeneralEquipment",
            "ConductingEquipment",
        ],
    },
    GeneralEquipment: {
        parents: [
            "SubFunction",
            "Function",
            ...tGeneralEquipmentContainer,
            ...tAbstractEqFuncSubFunc,
            ...tEquipmentContainer,
        ],
        children: [...tEquipmentSequence, "EqFunction"],
    },
    GetCBValues: {
        parents: ["Services"],
        children: [],
    },
    GetDataObjectDefinition: {
        parents: ["Services"],
        children: [],
    },
    GetDataSetValue: {
        parents: ["Services"],
        children: [],
    },
    GetDirectory: {
        parents: ["Services"],
        children: [],
    },
    GOOSE: {
        parents: ["Services"],
        children: [],
    },
    GOOSESecurity: {
        parents: ["AccessPoint"],
        children: [...tNamingSequence, "Subject", "IssuerName"],
    },
    GSE: {
        parents: ["ConnectedAP"],
        children: [...tControlBlockSequence, "MinTime", "MaxTime"],
    },
    GSEDir: {
        parents: ["Services"],
        children: [],
    },
    GSEControl: {
        parents: ["LN0"],
        children: [...tControlWithIEDNameSequence, "Protocol"],
    },
    GSESettings: {
        parents: ["Services"],
        children: [],
    },
    GSSE: {
        parents: ["Services"],
        children: [],
    },
    Header: {
        parents: ["SCL"],
        children: ["Text", "History"],
    },
    History: {
        parents: ["Header"],
        children: ["Hitem"],
    },
    Hitem: {
        parents: ["History"],
        children: [],
    },
    IED: {
        parents: ["SCL"],
        children: [...tUnNamingSequence, "Services", "AccessPoint", "KDC"],
    },
    IEDName: {
        parents: ["GSEControl", "SampledValueControl"],
        children: [],
    },
    Inputs: {
        parents: [...tAnyLN],
        children: [...tUnNamingSequence, "ExtRef"],
    },
    IssuerName: {
        parents: ["GOOSESecurity", "SMVSecurity"],
        children: [],
    },
    KDC: {
        parents: ["IED"],
        children: [],
    },
    LDevice: {
        parents: ["Server"],
        children: [...tUnNamingSequence, "LN0", "LN", "AccessControl"],
    },
    LN: {
        parents: ["AccessPoint", "LDevice"],
        children: [...tAnyLNSequence],
    },
    LN0: {
        parents: ["LDevice"],
        children: [
            ...tAnyLNSequence,
            "GSEControl",
            "SampledValueControl",
            "SettingControl",
        ],
    },
    LNode: {
        parents: [...tLNodeContainer],
        children: [...tUnNamingSequence],
    },
    LNodeType: {
        parents: ["DataTypeTemplates"],
        children: [...tIDNamingSequence, "DO"],
    },
    Line: {
        parents: ["Process", "SCL"],
        children: [
            ...tGeneralEquipmentContainerSequence,
            "Voltage",
            "ConductingEquipment",
        ],
    },
    Log: {
        parents: [...tAnyLN],
        children: [...tUnNamingSequence],
    },
    LogControl: {
        parents: [...tAnyLN],
        children: [...tControlWithTriggerOptSequence],
    },
    LogSettings: {
        parents: ["Services"],
        children: [],
    },
    MaxTime: {
        parents: ["GSE"],
        children: [],
    },
    McSecurity: {
        parents: ["GSESettings", "SMVSettings", "ClientServices"],
        children: [],
    },
    MinTime: {
        parents: ["GSE"],
        children: [],
    },
    NeutralPoint: {
        parents: ["TransformerWinding"],
        children: [...tUnNamingSequence],
    },
    OptFields: {
        parents: ["ReportControl"],
        children: [],
    },
    P: {
        parents: ["Address", "PhysConn"],
        children: [],
    },
    PhysConn: {
        parents: ["ConnectedAP"],
        children: [...tUnNamingSequence, "P"],
    },
    PowerTransformer: {
        parents: [...tEquipmentContainer],
        children: [
            ...tEquipmentSequence,
            "TransformerWinding",
            "SubEquipment",
            "EqFunction",
        ],
    },
    Private: {
        parents: [],
        children: [],
    },
    Process: {
        parents: ["Process", "SCL"],
        children: [
            ...tGeneralEquipmentContainerSequence,
            "ConductingEquipment",
            "Substation",
            "Line",
            "Process",
        ],
    },
    ProtNs: {
        parents: ["DAType", "DA"],
        children: [],
    },
    Protocol: {
        parents: ["GSEControl", "SampledValueControl"],
        children: [],
    },
    ReadWrite: {
        parents: ["Services"],
        children: [],
    },
    RedProt: {
        parents: ["Services"],
        children: [],
    },
    ReportControl: {
        parents: [...tAnyLN],
        children: [...tControlWithTriggerOptSequence, "OptFields", "RptEnabled"],
    },
    ReportSettings: {
        parents: ["Services"],
        children: [],
    },
    RptEnabled: {
        parents: ["ReportControl"],
        children: [...tUnNamingSequence, "ClientLN"],
    },
    SamplesPerSec: {
        parents: ["SMVSettings"],
        children: [],
    },
    SampledValueControl: {
        parents: ["LN0"],
        children: [...tControlWithIEDNameSequence, "SmvOpts"],
    },
    SecPerSamples: {
        parents: ["SMVSettings"],
        children: [],
    },
    SCL: {
        parents: [],
        children: [
            ...tBaseNameSequence,
            "Header",
            "Substation",
            "Communication",
            "IED",
            "DataTypeTemplates",
            "Line",
            "Process",
        ],
    },
    SDI: {
        parents: ["DOI", "SDI"],
        children: [...tUnNamingSequence, "SDI", "DAI"],
    },
    SDO: {
        parents: ["DOType"],
        children: [...tNamingSequence],
    },
    Server: {
        parents: ["AccessPoint"],
        children: [
            ...tUnNamingSequence,
            "Authentication",
            "LDevice",
            "Association",
        ],
    },
    ServerAt: {
        parents: ["AccessPoint"],
        children: [...tUnNamingSequence],
    },
    Services: {
        parents: ["IED", "AccessPoint"],
        children: [
            "DynAssociation",
            "SettingGroups",
            "GetDirectory",
            "GetDataObjectDefinition",
            "DataObjectDirectory",
            "GetDataSetValue",
            "SetDataSetValue",
            "DataSetDirectory",
            "ConfDataSet",
            "DynDataSet",
            "ReadWrite",
            "TimerActivatedControl",
            "ConfReportControl",
            "GetCBValues",
            "ConfLogControl",
            "ReportSettings",
            "LogSettings",
            "GSESettings",
            "SMVSettings",
            "GSEDir",
            "GOOSE",
            "GSSE",
            "SMVsc",
            "FileHandling",
            "ConfLNs",
            "ClientServices",
            "ConfLdName",
            "SupSubscription",
            "ConfSigRef",
            "ValueHandling",
            "RedProt",
            "TimeSyncProt",
            "CommProt",
        ],
    },
    SetDataSetValue: {
        parents: ["Services"],
        children: [],
    },
    SettingControl: {
        parents: ["LN0"],
        children: [...tUnNamingSequence],
    },
    SettingGroups: {
        parents: ["Services"],
        children: ["SGEdit", "ConfSG"],
    },
    SGEdit: {
        parents: ["SettingGroups"],
        children: [],
    },
    SmpRate: {
        parents: ["SMVSettings"],
        children: [],
    },
    SMV: {
        parents: ["ConnectedAP"],
        children: [...tControlBlockSequence],
    },
    SmvOpts: {
        parents: ["SampledValueControl"],
        children: [],
    },
    SMVsc: {
        parents: ["Services"],
        children: [],
    },
    SMVSecurity: {
        parents: ["AccessPoint"],
        children: [...tNamingSequence, "Subject", "IssuerName"],
    },
    SMVSettings: {
        parents: ["Services"],
        children: ["SmpRate", "SamplesPerSec", "SecPerSamples", "McSecurity"],
    },
    SubEquipment: {
        parents: [
            "TapChanger",
            "PowerTransformer",
            "ConductingEquipment",
            "TransformerWinding",
            ...tAbstractConductingEquipment,
        ],
        children: [...tPowerSystemResourceSequence, "EqFunction"],
    },
    SubFunction: {
        parents: ["SubFunction", "Function"],
        children: [
            ...tPowerSystemResourceSequence,
            "GeneralEquipment",
            "ConductingEquipment",
            "SubFunction",
        ],
    },
    SubNetwork: {
        parents: ["Communication"],
        children: [...tNamingSequence, "BitRate", "ConnectedAP"],
    },
    Subject: {
        parents: ["GOOSESecurity", "SMVSecurity"],
        children: [],
    },
    Substation: {
        parents: ["SCL"],
        children: [...tEquipmentContainerSequence, "VoltageLevel", "Function"],
    },
    SupSubscription: {
        parents: ["Services"],
        children: [],
    },
    TapChanger: {
        parents: ["TransformerWinding"],
        children: [...tPowerSystemResourceSequence, "SubEquipment", "EqFunction"],
    },
    Terminal: {
        parents: [...tEquipment],
        children: [...tUnNamingSequence],
    },
    Text: {
        parents: sCLTags.filter((tag) => tag !== "Text" && tag !== "Private"),
        children: [],
    },
    TimerActivatedControl: {
        parents: ["Services"],
        children: [],
    },
    TimeSyncProt: {
        parents: ["Services", "ClientServices"],
        children: [],
    },
    TransformerWinding: {
        parents: ["PowerTransformer"],
        children: [
            ...tAbstractConductingEquipmentSequence,
            "TapChanger",
            "NeutralPoint",
            "EqFunction",
            "SubEquipment",
        ],
    },
    TrgOps: {
        parents: ["ReportControl"],
        children: [],
    },
    Val: {
        parents: ["DAI", "DA", "BDA"],
        children: [],
    },
    ValueHandling: {
        parents: ["Services"],
        children: [],
    },
    Voltage: {
        parents: ["VoltageLevel"],
        children: [],
    },
    VoltageLevel: {
        parents: ["Substation"],
        children: [...tEquipmentContainerSequence, "Voltage", "Bay", "Function"],
    },
};
const tagSet = new Set(sCLTags);
function isSCLTag(tag) {
    return tagSet.has(tag);
}

/**
 * Helper function for to determine schema valid `reference` for OpenSCD
 * core Insert event.
 * !! only valid with Edition 2.1 projects (2007B4)
 * @param parent - The parent element the new child shall be added to
 * @param tag - The `tagName` of the new child
 * @returns Reference for new [[`tag`]] child within [[`parent`]]  or `null`
 */
function getReference(parent, tag) {
    if (!isSCLTag(tag))
        return null;
    const parentTag = parent.tagName;
    const children = Array.from(parent.children);
    if (parentTag === "Services" ||
        parentTag === "SettingGroups" ||
        !isSCLTag(parentTag))
        return children.find((child) => child.tagName === tag) ?? null;
    const sequence = tags$1[parentTag].children;
    let index = sequence.findIndex((element) => element === tag);
    if (index < 0)
        return null;
    let nextSibling;
    while (index < sequence.length && !nextSibling) {
        // eslint-disable-next-line no-loop-func
        nextSibling = children.find((child) => child.tagName === sequence[index]);
        index += 1;
    }
    return nextSibling ?? null;
}

/** @returns object reference acc. IEC 61850-7-3 for control block elements */
function controlBlockObjRef(ctrlBlock) {
    const iedName = ctrlBlock.closest("IED")?.getAttribute("name");
    const ldInst = ctrlBlock.closest("LDevice")?.getAttribute("inst");
    const parentLn = ctrlBlock.closest("LN,LN0");
    const prefix = parentLn?.getAttribute("prefix") ?? "";
    const lnClass = parentLn?.getAttribute("lnClass");
    const lnInst = parentLn?.getAttribute("inst") ?? "";
    const cbName = ctrlBlock.getAttribute("name");
    if (!iedName || !ldInst || !lnClass || !cbName)
        return null;
    return `${iedName}${ldInst}/${prefix}${lnClass}${lnInst}.${cbName}`;
}

function isInputLeaf(input, allInputs) {
    let sameInputs = 0;
    for (const value of allInputs)
        if (value === input)
            sameInputs++;
    return input.querySelectorAll("ExtRef").length === sameInputs;
}
/**
 * Makes sure to not leave empty `Inputs` element after removing
 * its child `ExtRef` elements using [[`extRefedits`]]
 * @returns edits to remove `Inputs` when empty
 * */
function removeInputs(extRefs) {
    const removeInputs = [];
    const parentInputs = extRefs
        .map((remove) => remove.node.parentElement)
        .filter((input) => input);
    parentInputs.forEach((input, _index, inputs) => {
        const inputNotRemovedYet = !removeInputs.some((removeInput) => removeInput.node === input);
        if (isInputLeaf(input, inputs) && inputNotRemovedYet)
            removeInputs.push({ node: input });
    });
    return extRefs.concat(removeInputs);
}

/**
 * Locates control block from an ExtRef element.
 * NOTE: Only supports > Edition 2 using the srcXXX attributes.
 * @param extRef - SCL ExtRef element.
 * @returns Either ReportControl/GSEControl/SampledValueControl or null
 * if not found.
 */
function sourceControlBlock(extRef) {
    const [iedName, srcPrefix, srcLNInst, srcCBName] = [
        "iedName",
        "srcPrefix",
        "srcLNInst",
        "srcCBName",
    ].map((attr) => extRef.getAttribute(attr));
    const doc = extRef.ownerDocument;
    const srcLDInst = extRef.getAttribute("srcLDInst") ?? extRef.getAttribute("ldInst");
    const srcLNClass = extRef.getAttribute("srcLNClass") ?? "LLN0";
    const serviceType = extRef.getAttribute("serviceType") ?? extRef.getAttribute("pServT");
    if (!iedName || !srcLDInst || !srcCBName || serviceType === "Poll")
        return null;
    const lDevice = `:root > IED[name="${iedName}"] > AccessPoint > Server > LDevice[inst="${srcLDInst}"]`;
    const maybeReport = !serviceType || serviceType === "Report";
    const maybeGSE = !serviceType || serviceType === "GOOSE";
    const maybeSMV = !serviceType || serviceType === "SMV";
    const anyLN = srcLNClass === "LLN0" ? "LN0" : "LN";
    const lnClass = `[lnClass="${srcLNClass}"]`;
    let lnPrefixQualifiers;
    if (anyLN === "LN") {
        lnPrefixQualifiers =
            srcPrefix && srcPrefix !== ""
                ? [`[prefix="${srcPrefix}"]`]
                : [":not([prefix])", '[prefix=""]'];
    }
    else {
        lnPrefixQualifiers = [":not([prefix])"];
    }
    // On LN0 srcLNInst missing on the ExtRef means an inst=""
    // On LN inst must be a non-empty string and so srcLNInst
    // must also be a non-empty string and be present
    const lnInst = anyLN !== "LN0" && srcLNInst ? `[inst="${srcLNInst}"]` : '[inst=""]';
    const cbName = `[name="${srcCBName}"]`;
    const cbTypes = [
        maybeReport ? `ReportControl${cbName}` : null,
        maybeGSE ? `GSEControl${cbName}` : null,
        maybeSMV ? `SampledValueControl${cbName}` : null,
    ].filter((s) => !!s);
    return doc.querySelector(crossProduct([`${lDevice}>${anyLN}${lnClass}${lnInst}`], lnPrefixQualifiers, [">"], cbTypes)
        .map((strings) => strings.join(""))
        .join(","));
}

/** maximum value for `lnInst` attribute */
const maxLnInst = 99;
Array(maxLnInst)
    .fill(1)
    .map((_, i) => `${i + 1}`);

/** @returns Whether child `DA` with name `setSrcRef` can edited by SCL editor */
function isSrcRefEditable(supervisionLn) {
    const lnClass = supervisionLn.getAttribute("lnClass");
    const cbRefType = lnClass === "LGOS" ? "GoCBRef" : "SvCBRef";
    if (supervisionLn.querySelector(`:scope > DOI[name="${cbRefType}"] > 
        DAI[name="setSrcRef"][valImport="true"][valKind="RO"],
       :scope > DOI[name="${cbRefType}"] > 
        DAI[name="setSrcRef"][valImport="true"][valKind="Conf"]`))
        return true;
    const rootNode = supervisionLn.ownerDocument;
    const lnType = supervisionLn.getAttribute("lnType");
    const goOrSvCBRef = rootNode.querySelector(`DataTypeTemplates > 
        LNodeType[id="${lnType}"][lnClass="${lnClass}"] > DO[name="${cbRefType}"]`);
    const cbRefId = goOrSvCBRef?.getAttribute("type");
    const setSrcRef = rootNode.querySelector(`DataTypeTemplates > DOType[id="${cbRefId}"] > DA[name="setSrcRef"]`);
    return ((setSrcRef?.getAttribute("valKind") === "Conf" ||
        setSrcRef?.getAttribute("valKind") === "RO") &&
        setSrcRef.getAttribute("valImport") === "true");
}

/** @returns Element to remove the subscription supervision */
function removableSupervisionElement(ctrlBlock, subscriberIed) {
    const supervisionType = ctrlBlock.tagName === "GSEControl" ? "LGOS" : "LSVS";
    const doiName = ctrlBlock.tagName === "GSEControl" ? "GoCBRef" : "SvCBRef";
    const valElement = Array.from(subscriberIed.querySelectorAll(`LN[lnClass="${supervisionType}"] > DOI[name="${doiName}"] > DAI[name="setSrcRef"] > Val`)).find((val) => val.textContent === controlBlockObjRef(ctrlBlock));
    if (!valElement)
        return null;
    const ln = valElement.closest("LN");
    // do not remove logical nodes `LGOS`, `LSVS` unless privately tagged
    const canRemoveLn = ln.querySelector(':scope > Private[type="OpenSCD.create"]');
    if (canRemoveLn)
        return ln;
    return (Array.from(valElement.childNodes).find((child) => child.nodeType === Node.TEXT_NODE) ?? null);
}
/** @returns Whether `DA` with name `setSrcRef` can edited by SCL editor */
function isSupervisionEditable(ctrlBlock, subscriberIed) {
    const supervisionElement = removableSupervisionElement(ctrlBlock, subscriberIed);
    if (!supervisionElement)
        return false;
    let supervisionLn = null;
    if (supervisionElement.nodeType === Node.TEXT_NODE) {
        supervisionLn = supervisionElement.parentElement?.closest("LN") ?? null;
    }
    else {
        supervisionLn = supervisionElement.closest("LN") ?? null;
    }
    if (!supervisionLn)
        return false;
    return isSrcRefEditable(supervisionLn);
}
/** @returns Whether other subscribed ExtRef of the same control block exist */
function isControlBlockSubscribed(extRefs) {
    const [srcCBName, srcLDInst, srcLNClass, iedName, srcPrefix, srcLNInst, serviceType,] = [
        "srcCBName",
        "srcLDInst",
        "srcLNClass",
        "iedName",
        "srcPrefix",
        "srcLNInst",
        "serviceType",
    ].map((attr) => extRefs[0].getAttribute(attr));
    const parentIed = extRefs[0].closest("IED");
    return Array.from(parentIed.getElementsByTagName("ExtRef")).some((otherExtRef) => !extRefs.includes(otherExtRef) &&
        (otherExtRef.getAttribute("srcPrefix") ?? "") === (srcPrefix ?? "") &&
        (otherExtRef.getAttribute("srcLNInst") ?? "") === (srcLNInst ?? "") &&
        otherExtRef.getAttribute("srcCBName") === srcCBName &&
        otherExtRef.getAttribute("srcLDInst") === srcLDInst &&
        otherExtRef.getAttribute("srcLNClass") === srcLNClass &&
        otherExtRef.getAttribute("iedName") === iedName &&
        otherExtRef.getAttribute("serviceType") === serviceType);
}
function cannotRemoveSupervision(extRefGroup) {
    return (isControlBlockSubscribed(extRefGroup.extRefs) ||
        !isSupervisionEditable(extRefGroup.ctrlBlock, extRefGroup.subscriberIed));
}
function groupPerControlBlock(extRefs) {
    const groupedExtRefs = {};
    extRefs.forEach((extRef) => {
        const ctrlBlock = sourceControlBlock(extRef);
        if (ctrlBlock) {
            const ctrlBlockRef = controlBlockObjRef(ctrlBlock);
            if (groupedExtRefs[ctrlBlockRef])
                groupedExtRefs[ctrlBlockRef].extRefs.push(extRef);
            else
                groupedExtRefs[ctrlBlockRef] = {
                    extRefs: [extRef],
                    ctrlBlock,
                    subscriberIed: extRef.closest("IED"),
                };
        }
    });
    return groupedExtRefs;
}
/** Removes subscription supervision - `LGOS` or `LSVS` - when no other data
 * of a given `GSEControl` or `SampledValueControl`
 * @param extRefs - An array of external reference elements
 * @returns edits to remove subscription supervision `LGOS` or `LSVS`
 */
function removeSubscriptionSupervision(extRefs) {
    if (extRefs.length === 0)
        return [];
    const groupedExtRefs = groupPerControlBlock(extRefs);
    return Object.values(groupedExtRefs)
        .map((extRefGroup) => {
        if (cannotRemoveSupervision(extRefGroup))
            return null;
        return removableSupervisionElement(extRefGroup.ctrlBlock, extRefGroup.subscriberIed);
    })
        .filter((element) => element).map((node) => ({ node }));
}

/**
 * Remove link between sending IED data to receiving IED external
 * references - unsubscribing.
 * ```md
 * 1. Unsubscribes external references itself:
 * -Update `ExtRef` in case later binding is used (existing `intAddr` attribute)
 * -Remove `ExtRef` in case `intAddr` is missing
 *
 * 2. Removes leaf `Input` elements as well
 * 3. Removes subscription supervision (can be disabled through options.ignoreSupervision)
 * - when all external references of one control block are unsubscribed
 * - when `valKind` RO|Conf and `valImport` true
 * ```
 * In case the external reference
 * @param extRefs - Array of external references
 * @returns An array of update and/or remove edit representing changes required
 * to unsubscribe.
 */
function unsubscribe(extRefs, options = { ignoreSupervision: false }) {
    const updateEdits = [];
    const removeEdits = [];
    extRefs.map((extRef) => {
        if (extRef.getAttribute("intAddr"))
            updateEdits.push({
                element: extRef,
                attributes: {
                    iedName: null,
                    ldInst: null,
                    prefix: null,
                    lnClass: null,
                    lnInst: null,
                    doName: null,
                    daName: null,
                    srcLDInst: null,
                    srcPrefix: null,
                    srcLNClass: null,
                    srcLNInst: null,
                    srcCBName: null,
                    ...(extRef.getAttribute("pServT") && { serviceType: null }),
                },
            });
        else
            removeEdits.push({ node: extRef });
    });
    return [
        ...removeInputs(removeEdits),
        ...updateEdits,
        ...(options.ignoreSupervision
            ? []
            : removeSubscriptionSupervision(extRefs)),
    ];
}

/**
 * Looks up Communication section GSE or SMV addresses based on the control block
 * within the IED section (GSEControl or SampledValueControl).
 * @param ctrlBlock - SCL control block element (GSEControl or SampledValueControl)
 * @returns SCL GSE or SMV address element or null if not found.
 */
function controlBlockGseOrSmv(ctrlBlock) {
    const doc = ctrlBlock.ownerDocument;
    const ctrlLdInst = ctrlBlock.closest("LDevice")?.getAttribute("inst");
    const ied = ctrlBlock.closest("IED");
    const addressTag = ctrlBlock.tagName === "GSEControl" ? "GSE" : "SMV";
    const apName = ctrlBlock.closest("AccessPoint")?.getAttribute("name");
    if (!ctrlLdInst || !ied || !apName)
        return null;
    const serverAts = Array.from(ied.querySelectorAll(`AccessPoint > ServerAt[apName="${apName}"`)).map((ap) => ap.closest("AccessPoint").getAttribute("name"));
    const iedName = ied.getAttribute("name");
    const connectedAps = `:root > Communication > SubNetwork > ConnectedAP[iedName="${iedName}"]`;
    const connectedApNames = [apName, ...serverAts].map((ap) => `[apName="${ap}"]`);
    const cbName = ctrlBlock.getAttribute("name");
    const addressElement = `${addressTag}[ldInst="${ctrlLdInst}"][cbName="${cbName}"]`;
    return doc.querySelector(crossProduct([connectedAps], connectedApNames, [">"], [addressElement])
        .map((strings) => strings.join(""))
        .join(","));
}

/** @returns Whether a ExtRef to FCDA reference match */
function matchDataAttributes(extRef, fcda) {
    return (extRef.getAttribute("ldInst") === fcda.getAttribute("ldInst") &&
        (extRef.getAttribute("prefix") ?? "") ===
            (fcda.getAttribute("prefix") ?? "") &&
        extRef.getAttribute("lnClass") === fcda.getAttribute("lnClass") &&
        (extRef.getAttribute("lnInst") ?? "") ===
            (fcda.getAttribute("lnInst") ?? "") &&
        extRef.getAttribute("doName") === fcda.getAttribute("doName") &&
        (extRef.getAttribute("daName") ?? "") ===
            (fcda.getAttribute("daName") ?? ""));
}

const maxGseMacAddress = 0x010ccd0101ff;
const minGseMacAddress = 0x010ccd010000;
const maxSmvMacAddress = 0x010ccd0401ff;
const minSmvMacAddress = 0x010ccd040000;
function convertToMac(mac) {
    const str = 0 + mac.toString(16).toUpperCase();
    const arr = str.match(/.{1,2}/g);
    return arr.join("-");
}
Array(maxGseMacAddress - minGseMacAddress)
    .fill(1)
    .map((_, i) => convertToMac(minGseMacAddress + i));
Array(maxSmvMacAddress - minSmvMacAddress)
    .fill(1)
    .map((_, i) => convertToMac(minSmvMacAddress + i));

const maxGseAppId = 0x3fff;
const minGseAppId = 0x0000;
// APPID range for Type1A(Trip) GOOSE acc. IEC 61850-8-1
const maxGseTripAppId = 0xbfff;
const minGseTripAppId = 0x8000;
const maxSmvAppId = 0x7fff;
const minSmvAppId = 0x4000;
Array(maxGseAppId - minGseAppId)
    .fill(1)
    .map((_, i) => (minGseAppId + i).toString(16).toUpperCase().padStart(4, "0"));
Array(maxGseTripAppId - minGseTripAppId)
    .fill(1)
    .map((_, i) => (minGseTripAppId + i).toString(16).toUpperCase().padStart(4, "0"));
Array(maxSmvAppId - minSmvAppId)
    .fill(1)
    .map((_, i) => (minSmvAppId + i).toString(16).toUpperCase().padStart(4, "0"));

await fetch(new URL(new URL('assets/nsd-0a370a57.json', import.meta.url).href, import.meta.url)).then((res) => res.json());

const nsd72 = `<?xml version="1.0" encoding="UTF-8"?>
<NS xmlns="http://www.iec.ch/61850/2016/NSD"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.iec.ch/61850/2016/NSD NSD.xsd"
    id="IEC 61850-7-2"
    version="2007"
    revision="B"
    release="3"
    umlVersion="WG10built4"
    umlDate="2019-10-02T00:00:00Z"
    publicationStage="IS">
   <Copyright>
         <Notice>
			COPYRIGHT (c) IEC, www.iec.ch/tc57/supportdocuments. This version of this NSD is part of IEC_61850-7-2:2010 Edition 2.1; see the IEC_61850-7-2:2010 Edition 2.1 for full legal notices. In case of any differences between the here-below code and the IEC published content, the here-below definition supersedes the IEC publication; it may contain updates. See history files. The whole document has to be taken into account to have a full description of this code component.
			See www.iec.ch/CCv1 for copyright details.
			</Notice>
         <License uri="www.iec.ch/CCv1" kind="Standard"/>
      </Copyright>
   <Changes version="2007"
            revision="A"
            tissues="728, 730, 778, 780, 783, 786, 813, 820, 850, 852, 858, 860, 861, 869, 875, 876, 943, 970, 1038, 1050, 1061, 1062, 1071, 1091, 1092, 1116, 1122, 1127, 1145, 1154, 1194, 1202, 1232, 1242, 1252, 1276, 1283, 1307, 1308, 1319, 1338, 1341, 1356, 1377, 1386, 1428, 1432, 1433, 1435, 1439, 1455, 1569,  1589, 1622, 1630, 1650, 1652"/>
   <BasicTypes>
         <BasicType name="BOOLEAN" descID="IEC61850_7_2.BasicTypes::P_BOOLEAN.cl.desc"/>
         <BasicType name="INT8" descID="IEC61850_7_2.BasicTypes::P_INT8.cl.desc"/>
         <BasicType name="INT16" descID="IEC61850_7_2.BasicTypes::P_INT16.cl.desc"/>
         <BasicType name="INT32" descID="IEC61850_7_2.BasicTypes::P_INT32.cl.desc"/>
         <BasicType name="INT64" descID="IEC61850_7_2.BasicTypes::P_INT64.cl.desc"/>
         <BasicType name="INT8U" descID="IEC61850_7_2.BasicTypes::P_INT8U.cl.desc"/>
         <BasicType name="INT16U" descID="IEC61850_7_2.BasicTypes::P_INT16U.cl.desc"/>
         
         <BasicType name="INT32U" descID="IEC61850_7_2.BasicTypes::P_INT32U.cl.desc"/>
         <BasicType name="FLOAT32" descID="IEC61850_7_2.BasicTypes::P_FLOAT32.cl.desc"/>
         <BasicType name="Octet64" descID="IEC61850_7_2.BasicTypes::P_Octet64.cl.desc"/>
         <BasicType name="VisString64"
                 descID="IEC61850_7_2.BasicTypes::P_VisString64.cl.desc"/>
         <BasicType name="VisString129"
                 descID="IEC61850_7_2.BasicTypes::P_VisString129.cl.desc"/>
         <BasicType name="VisString255"
                 descID="IEC61850_7_2.BasicTypes::P_VisString255.cl.desc"/>
         <BasicType name="Unicode255"
                 descID="IEC61850_7_2.BasicTypes::P_Unicode255.cl.desc"/>
         <BasicType name="PhyComAddr"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_PhyComAddr.cl.desc"/>
         
         <BasicType name="ObjRef"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_ObjectReference.cl.desc"/>
         <BasicType name="EntryID"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_EntryID.cl.desc"/>
         <BasicType name="Currency"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_Currency.cl.desc"/>
         <BasicType name="Timestamp"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_Timestamp.cl.desc"/>
         
         <BasicType name="Quality"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_Quality.cl.desc"/>
         
         <BasicType name="EntryTime"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_EntryTime.cl.desc"/>
         <BasicType name="TrgOps"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_TriggerConditions.cl.desc"/>
         <BasicType name="OptFlds"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_RCBReportOptions.cl.desc"/>
         
         <BasicType name="SvOptFlds"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_SVMessageOptions.cl.desc"/>
         <BasicType name="Check"
                 descID="IEC61850_7_2.DomainTypesGeneral::P_CheckConditions.cl.desc"/>
         <BasicType name="Tcmd"
                 descID="IEC61850_7_2.DomainTypesCodedEnums::StepControlKind.cl.desc"/>
         <BasicType name="Dbpos"
                 descID="IEC61850_7_2.DomainTypesCodedEnums::DpStatusKind.cl.desc"/>
         
         
      </BasicTypes>
   <FunctionalConstraints>
         <FunctionalConstraint abbreviation="ST"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.ST.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <DataSetMemberOf cb="GoCB"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
               <DataSetMemberOf cb="SVCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="MX"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.MX.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <DataSetMemberOf cb="GoCB"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
               <DataSetMemberOf cb="SVCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="SP"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.SP.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="SetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <DataSetMemberOf cb="GoCB"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="SV"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.SV.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="SetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <Service name="SetDataSetValues"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="CF"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.CF.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="SetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <Service name="SetDataSetValues"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="DC"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.DC.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="SetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <Service name="SetDataSetValues"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="SG"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.SG.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="SE"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.SE.title">
            <ApplicableServices>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetEditSGValue"/>
               <Service name="SetEditSGValue"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="SR"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.SR.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="OR"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.OR.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <DataSetMemberOf cb="GoCB"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="BL"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.BL.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="SetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <Service name="SetDataSetValues"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
         <FunctionalConstraint abbreviation="EX"
                            titleID="IEC61850_7_2.FunctionalConstraints::FcKind.EX.title">
            <ApplicableServices>
               <Service name="GetDataValues"/>
               <Service name="GetDataDefinition"/>
               <Service name="GetDataDirectory"/>
               <Service name="GetDataSetValues"/>
               <DataSetMemberOf cb="RCB"/>
               <DataSetMemberOf cb="LCB"/>
            </ApplicableServices>
         </FunctionalConstraint>
      </FunctionalConstraints>
   <PresenceConditions>
         <PresenceCondition name="M"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.M.desc"/>
         <PresenceCondition name="O"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.O.desc"/>
         <PresenceCondition name="F"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.F.desc"/>
         <PresenceCondition name="na"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.na.desc"/>
         <PresenceCondition name="Mmulti"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.Mmulti.desc"/>
         <PresenceCondition name="Omulti"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.Omulti.desc"/>
         <PresenceCondition name="AtLeastOne"
                         argument="n"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.AtLeastOne(n).desc"/>
         <PresenceCondition name="AtMostOne"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.AtMostOne.desc"/>
         <PresenceCondition name="AllOrNonePerGroup"
                         argument="n"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.AllOrNonePerGroup(n).desc"/>
         <PresenceCondition name="AllOnlyOneGroup"
                         argument="n"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.AllOnlyOneGroup(n).desc"/>
         <PresenceCondition name="AllAtLeastOneGroup"
                         argument="n"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.AllAtLeastOneGroup(n).desc"/>
         <PresenceCondition name="MF"
                         argument="sibling"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MF(sibling).desc"/>
         <PresenceCondition name="MO"
                         argument="sibling"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MO(sibling).desc"/>
         <PresenceCondition name="OM"
                         argument="sibling"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.OM(sibling).desc"/>
         <PresenceCondition name="FM"
                         argument="sibling"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.FM(sibling).desc"/>
         <PresenceCondition name="MOcond"
                         argument="condID"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOcond(condID).desc"/>
         <PresenceCondition name="MFcond"
                         argument="condID"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MFcond(condID).desc"/>
         <PresenceCondition name="OFcond"
                         argument="condID"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.OFcond(condID).desc"/>
         <PresenceCondition name="MmultiRange"
                         argument="min, max"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MmultiRange(min,_max).desc"/>
         <PresenceCondition name="OmultiRange"
                         argument="min, max"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.OmultiRange(min,_max).desc"/>
         <PresenceCondition name="MFsubst"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MFsubst.desc"/>
         <PresenceCondition name="MOln0"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOln0.desc"/>
         <PresenceCondition name="MFln0"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MFln0.desc"/>
         <PresenceCondition name="MOlnNs"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOlnNs.desc"/>
         <PresenceCondition name="MOdataNs"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOdataNs.desc"/>
         <PresenceCondition name="MFscaledAV"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MFscaledAV.desc"/>
         <PresenceCondition name="MFscaledMagV"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MFscaledMagV.desc"/>
         <PresenceCondition name="MFscaledAngV"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MFscaledAngV.desc"/>
         <PresenceCondition name="MOrms"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOrms.desc"/>
         <PresenceCondition name="MOrootLD"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOrootLD.desc"/>
         <PresenceCondition name="MOoperTm"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOoperTm.desc"/>
         <PresenceCondition name="MmultiF"
                         argument="sibling"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MmultiF(sibling).desc"/>
         <PresenceCondition name="MOsbo"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOsbo.desc"/>
         <PresenceCondition name="MOenhanced"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MOenhanced.desc"/>
         <PresenceCondition name="MONamPlt"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MONamPlt.desc"/>
         <PresenceCondition name="OF"
                         argument="sibling"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.OF(sibling).desc"/>
         <PresenceCondition name="MORange"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MORange.desc"/>
         <PresenceCondition name="OMSynPh"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.OMSynPh.desc"/>
         <PresenceCondition name="MAllOrNonePerGroup"
                         argument="n"
                         descID="IEC61850_7_2.PresenceConditions::PresenceCondition.MAllOrNonePerGroup(n).desc"/>
      </PresenceConditions>
   <Enumerations>
         <Enumeration name="ServiceNameKind"
                   titleID="IEC61850_7_2.DomainTypesEnums::ServiceNameKind.cl.title">
            <Literal name="Unknown" literalVal="0"/>
            <Literal name="Associate" literalVal="1"/>
            <Literal name="Abort" literalVal="2"/>
            <Literal name="Release" literalVal="3"/>
            <Literal name="GetServerDirectory" literalVal="4"/>
            <Literal name="GetLogicalDeviceDirectory" literalVal="5"/>
            <Literal name="GetAllDataValues" literalVal="6"/>
            <Literal name="GetDataValues" literalVal="7"/>
            <Literal name="SetDataValues" literalVal="8"/>
            <Literal name="GetDataDirectory" literalVal="9"/>
            <Literal name="GetDataDefinition" literalVal="10"/>
            <Literal name="GetDataSetValues" literalVal="11"/>
            <Literal name="SetDataSetValues" literalVal="12"/>
            <Literal name="CreateDataSet" literalVal="13"/>
            <Literal name="DeleteDataSet" literalVal="14"/>
            <Literal name="GetDataSetDirectory" literalVal="15"/>
            <Literal name="SelectActiveSG" literalVal="16"/>
            <Literal name="SelectEditSG" literalVal="17"/>
            <Literal name="SetEditSGValue" literalVal="18"/>
            <Literal name="ConfirmEditSGValues" literalVal="19"/>
            <Literal name="GetEditSGValue" literalVal="20"/>
            <Literal name="GetSGCBValues" literalVal="21"/>
            <Literal name="Report" literalVal="22"/>
            <Literal name="GetBRCBValues" literalVal="23"/>
            <Literal name="SetBRCBValues" literalVal="24"/>
            <Literal name="GetURCBValues" literalVal="25"/>
            <Literal name="SetURCBValues" literalVal="26"/>
            <Literal name="GetLCBValues" literalVal="27"/>
            <Literal name="SetLCBValues" literalVal="28"/>
            <Literal name="QueryLogByTime" literalVal="29"/>
            <Literal name="QueryLogAfter" literalVal="30"/>
            <Literal name="GetLogStatusValues" literalVal="31"/>
            <Literal name="SendGOOSEMessage" literalVal="32"/>
            <Literal name="GetGoCBValues" literalVal="33"/>
            <Literal name="SetGoCBValues" literalVal="34"/>
            <Literal name="GetGoReference" literalVal="35"/>
            <Literal name="GetGOOSEElementNumber" literalVal="36"/>
            <Literal name="SendMSVMessage" literalVal="37"/>
            <Literal name="GetMSVCBValues" literalVal="38"/>
            <Literal name="SetMSVCBValues" literalVal="39"/>
            <Literal name="SendUSVMessage" literalVal="40" deprecated="true"/>
            <Literal name="GetUSVCBValues" literalVal="41" deprecated="true"/>
            <Literal name="SetUSVCBValues" literalVal="42" deprecated="true"/>
            <Literal name="Select" literalVal="43"/>
            <Literal name="SelectWithValue" literalVal="44"/>
            <Literal name="Cancel" literalVal="45"/>
            <Literal name="Operate" literalVal="46"/>
            <Literal name="CommandTermination" literalVal="47"/>
            <Literal name="TimeActivatedOperate" literalVal="48"/>
            <Literal name="GetFile" literalVal="49"/>
            <Literal name="SetFile" literalVal="50"/>
            <Literal name="DeleteFile" literalVal="51"/>
            <Literal name="GetFileAttributeValues" literalVal="52"/>
            <Literal name="TimeSynchronization" literalVal="53"/>
            <Literal name="InternalChange" literalVal="54"/>
            <Literal name="GetLogicalNodeDirectory" literalVal="55"/>
            <Literal name="GetMsvReference" literalVal="56"/>
            <Literal name="GetMSVElementNumber" literalVal="57"/>
         </Enumeration>
         <Enumeration name="ServiceStatusKind"
                   titleID="IEC61850_7_2.DomainTypesEnums::ServiceStatusKind.cl.title">
            <Literal name="no-error" literalVal="0"/>
            <Literal name="instance-not-available" literalVal="1"/>
            <Literal name="instance-in-use" literalVal="2"/>
            <Literal name="access-violation" literalVal="3"/>
            <Literal name="access-not-allowed-in-current-state" literalVal="4"/>
            <Literal name="parameter-value-inappropriate" literalVal="5"/>
            <Literal name="parameter-value-inconsistent" literalVal="6"/>
            <Literal name="class-not-supported" literalVal="7"/>
            <Literal name="instance-locked-by-other-client" literalVal="8"/>
            <Literal name="control-must-be-selected" literalVal="9" deprecated="true"/>
            <Literal name="type-conflict" literalVal="10"/>
            <Literal name="failed-due-to-communications-constraint" literalVal="11"/>
            <Literal name="failed-due-to-server-constraint" literalVal="12"/>
         </Enumeration>
         <Enumeration name="OriginatorCategoryKind"
                   titleID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.cl.title">
            <Literal name="not-supported"
                  literalVal="0"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.not-supported.desc"/>
            <Literal name="bay-control"
                  literalVal="1"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.bay-control.desc"/>
            <Literal name="station-control"
                  literalVal="2"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.station-control.desc"/>
            <Literal name="remote-control"
                  literalVal="3"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.remote-control.desc"/>
            <Literal name="automatic-bay"
                  literalVal="4"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.automatic-bay.desc"/>
            <Literal name="automatic-station"
                  literalVal="5"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.automatic-station.desc"/>
            <Literal name="automatic-remote"
                  literalVal="6"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.automatic-remote.desc"/>
            <Literal name="maintenance"
                  literalVal="7"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.maintenance.desc"/>
            <Literal name="process"
                  literalVal="8"
                  descID="IEC61850_7_2.DomainTypesEnums::OriginatorCategoryKind.process.desc"/>
         </Enumeration>
         <Enumeration name="ControlServiceStatusKind"
                   titleID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.cl.title">
            <Literal name="Unknown"
                  literalVal="0"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Unknown.desc"/>
            <Literal name="Not-supported"
                  literalVal="1"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Not-supported.desc"/>
            <Literal name="Blocked-by-switching-hierarchy"
                  literalVal="2"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Blocked-by-switching-hierarchy.desc"/>
            <Literal name="Select-failed"
                  literalVal="3"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Select-failed.desc"/>
            <Literal name="Invalid-position"
                  literalVal="4"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Invalid-position.desc"/>
            <Literal name="Position-reached"
                  literalVal="5"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Position-reached.desc"/>
            <Literal name="Parameter-change-in-execution"
                  literalVal="6"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Parameter-change-in-execution.desc"/>
            <Literal name="Step-limit"
                  literalVal="7"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Step-limit.desc"/>
            <Literal name="Blocked-by-Mode"
                  literalVal="8"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Blocked-by-Mode.desc"/>
            <Literal name="Blocked-by-process"
                  literalVal="9"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Blocked-by-process.desc"/>
            <Literal name="Blocked-by-interlocking"
                  literalVal="10"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Blocked-by-interlocking.desc"/>
            <Literal name="Blocked-by-synchrocheck"
                  literalVal="11"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Blocked-by-synchrocheck.desc"/>
            <Literal name="Command-already-in-execution"
                  literalVal="12"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Command-already-in-execution.desc"/>
            <Literal name="Blocked-by-health"
                  literalVal="13"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Blocked-by-health.desc"/>
            <Literal name="1-of-n-control"
                  literalVal="14"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.1-of-n-control.desc"/>
            <Literal name="Abortion-by-cancel"
                  literalVal="15"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Abortion-by-cancel.desc"/>
            <Literal name="Time-limit-over"
                  literalVal="16"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Time-limit-over.desc"/>
            <Literal name="Abortion-by-trip"
                  literalVal="17"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Abortion-by-trip.desc"/>
            <Literal name="Object-not-selected"
                  literalVal="18"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Object-not-selected.desc"/>
            <Literal name="Object-already-selected"
                  literalVal="19"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Object-already-selected.desc"/>
            <Literal name="No-access-authority"
                  literalVal="20"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.No-access-authority.desc"/>
            <Literal name="Ended-with-overshoot"
                  literalVal="21"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Ended-with-overshoot.desc"/>
            <Literal name="Abortion-due-to-deviation"
                  literalVal="22"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Abortion-due-to-deviation.desc"/>
            <Literal name="Abortion-by-communication-loss"
                  literalVal="23"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Abortion-by-communication-loss.desc"/>
            <Literal name="Blocked-by-command"
                  literalVal="24"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Blocked-by-command.desc"/>
            <Literal name="None"
                  literalVal="25"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.None.desc"/>
            <Literal name="Inconsistent-parameters"
                  literalVal="26"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Inconsistent-parameters.desc"/>
            <Literal name="Locked-by-other-client"
                  literalVal="27"
                  descID="IEC61850_7_2.DomainTypesEnums::ControlServiceStatusKind.Locked-by-other-client.desc"/>
         </Enumeration>
         <Enumeration name="SamplingModeKind"
                   titleID="IEC61850_7_2.DomainTypesEnums::SamplingModeKind.cl.title">
            <Literal name="SamplesPerPeriod" literalVal="0"/>
            <Literal name="SamplesPerSecond" literalVal="1"/>
            <Literal name="SecondsPerSample" literalVal="2"/>
         </Enumeration>
      </Enumerations>
   <ConstructedAttributes>
         <ConstructedAttribute name="Originator"
                            titleID="IEC61850_7_2.DomainTypesGeneral::S_Originator.cl.title">
            <SubDataAttribute name="orCat"
                           type="OriginatorCategoryKind"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_2.DomainTypesGeneral::S_Originator.orCat.desc"
                           presCond="M"/>
            <SubDataAttribute name="orIdent"
                           type="Octet64"
                           descID="IEC61850_7_2.DomainTypesGeneral::S_Originator.orIdent.desc"
                           presCond="M"/>
         </ConstructedAttribute>
      </ConstructedAttributes>
</NS>`;
const nsd73 = `<?xml version="1.0" encoding="UTF-8"?>
<NS xmlns="http://www.iec.ch/61850/2016/NSD"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.iec.ch/61850/2016/NSD NSD.xsd"
    id="IEC 61850-7-3"
    version="2007"
    revision="B"
    release="3"
    umlVersion="WG10built3"
    umlDate="2019-10-02T00:00:00Z"
    publicationStage="IS">
   <Copyright>
         <Notice>
			COPYRIGHT (c) IEC, www.iec.ch/tc57/supportdocuments. This version of this NSD is part of IEC_61850-7-3:2010 Edition 2.1; see the IEC_61850-7-3:2010 Edition 2.1 for full legal notices. In case of any differences between the here-below code and the IEC published content, the here-below definition supersedes the IEC publication; it may contain updates. See history files. The whole document has to be taken into account to have a full description of this code component.
			See www.iec.ch/CCv1 for copyright details.
			</Notice>
         <License uri="www.iec.ch/CCv1" kind="Standard"/>
      </Copyright>
   <Changes version="2007"
            revision="A"
            tissues="690, 691, 692, 697, 698, 707, 709, 711, 722, 814, 816, 819, 832, 839, 846, 868, 887, 919, 924, 925, 926, 929, 953, 954, 962, 968, 996, 1078, 1079, 1122, 1127, 1184, 1187, 1189, 1220, 1233, 1240, 1242, 1247, 1253, 1265, 1270, 1311, 1372, 1387, 1388, 1403, 1430, 1438, 1578, 1581, 1598, 1602, 1623"/>
   <DependsOn id="IEC 61850-7-2" version="2007" revision="B"/>
   <Enumerations>
         <Enumeration name="AngleReferenceKind"
                   titleID="IEC61850_7_3.DAEnums::AngleReferenceKind.cl.title">
            <Literal name="V" literalVal="0"/>
            <Literal name="A" literalVal="1"/>
            <Literal name="other" literalVal="2"/>
            <Literal name="Synchrophasor"
                  literalVal="3"
                  descID="IEC61850_7_3.DAEnums::AngleReferenceKind.Synchrophasor.desc"/>
         </Enumeration>
         <Enumeration name="CtlModelKind"
                   titleID="IEC61850_7_3.DAEnums::CtlModelKind.cl.title">
            <Literal name="status-only"
                  literalVal="0"
                  descID="IEC61850_7_3.DAEnums::CtlModelKind.status-only.desc"/>
            <Literal name="direct-with-normal-security"
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::CtlModelKind.direct-with-normal-security.desc"/>
            <Literal name="sbo-with-normal-security"
                  literalVal="2"
                  descID="IEC61850_7_3.DAEnums::CtlModelKind.sbo-with-normal-security.desc"/>
            <Literal name="direct-with-enhanced-security"
                  literalVal="3"
                  descID="IEC61850_7_3.DAEnums::CtlModelKind.direct-with-enhanced-security.desc"/>
            <Literal name="sbo-with-enhanced-security"
                  literalVal="4"
                  descID="IEC61850_7_3.DAEnums::CtlModelKind.sbo-with-enhanced-security.desc"/>
         </Enumeration>
         <Enumeration name="CurveCharKind"
                   titleID="IEC61850_7_3.DAEnums::CurveCharKind.cl.title">
            <Literal name="None"
                  literalVal="0"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.None.desc"/>
            <Literal name="ANSI Extremely Inverse"
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.ANSI_Extremely_Inverse.desc"/>
            <Literal name="ANSI Very Inverse"
                  literalVal="2"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.ANSI_Very_Inverse.desc"/>
            <Literal name="ANSI Normal Inverse" literalVal="3" deprecated="true"/>
            <Literal name="ANSI Moderate Inverse"
                  literalVal="4"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.ANSI_Moderate_Inverse.desc"/>
            <Literal name="ANSI Definite Time"
                  literalVal="5"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.ANSI_Definite_Time.desc"/>
            <Literal name="Long-Time Extremely Inverse" literalVal="6" deprecated="true"/>
            <Literal name="Long-Time Very Inverse" literalVal="7" deprecated="true"/>
            <Literal name="Long-Time Inverse" literalVal="8" deprecated="true"/>
            <Literal name="IEC Normal Inverse" literalVal="9" deprecated="true"/>
            <Literal name="IEC Very Inverse"
                  literalVal="10"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.IEC_Very_Inverse.desc"/>
            <Literal name="IEC Inverse"
                  literalVal="11"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.IEC_Inverse.desc"/>
            <Literal name="IEC Extremely Inverse"
                  literalVal="12"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.IEC_Extremely_Inverse.desc"/>
            <Literal name="IEC Short-Time Inverse" literalVal="13" deprecated="true"/>
            <Literal name="IEC Long-Time Inverse" literalVal="14" deprecated="true"/>
            <Literal name="IEC Definite Time"
                  literalVal="15"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.IEC_Definite_Time.desc"/>
            <Literal name="Reserved" literalVal="16"/>
            <Literal name="Polynom 1"
                  literalVal="17"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_1.desc"/>
            <Literal name="Polynom 2"
                  literalVal="18"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_2.desc"/>
            <Literal name="Polynom 3"
                  literalVal="19"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_3.desc"/>
            <Literal name="Polynom 4"
                  literalVal="20"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_4.desc"/>
            <Literal name="Polynom 5"
                  literalVal="21"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_5.desc"/>
            <Literal name="Polynom 6"
                  literalVal="22"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_6.desc"/>
            <Literal name="Polynom 7"
                  literalVal="23"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_7.desc"/>
            <Literal name="Polynom 8"
                  literalVal="24"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_8.desc"/>
            <Literal name="Polynom 9"
                  literalVal="25"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_9.desc"/>
            <Literal name="Polynom 10"
                  literalVal="26"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_10.desc"/>
            <Literal name="Polynom 11"
                  literalVal="27"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_11.desc"/>
            <Literal name="Polynom 12"
                  literalVal="28"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_12.desc"/>
            <Literal name="Polynom 13"
                  literalVal="29"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_13.desc"/>
            <Literal name="Polynom 14"
                  literalVal="30"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_14.desc"/>
            <Literal name="Polynom 15"
                  literalVal="31"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_15.desc"/>
            <Literal name="Polynom 16"
                  literalVal="32"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Polynom_16.desc"/>
            <Literal name="Multiline 1"
                  literalVal="33"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_1.desc"/>
            <Literal name="Multiline 2"
                  literalVal="34"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_2.desc"/>
            <Literal name="Multiline 3"
                  literalVal="35"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_3.desc"/>
            <Literal name="Multiline 4"
                  literalVal="36"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_4.desc"/>
            <Literal name="Multiline 5"
                  literalVal="37"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_5.desc"/>
            <Literal name="Multiline 6"
                  literalVal="38"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_6.desc"/>
            <Literal name="Multiline 7"
                  literalVal="39"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_7.desc"/>
            <Literal name="Multiline 8"
                  literalVal="40"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_8.desc"/>
            <Literal name="Multiline 9"
                  literalVal="41"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_9.desc"/>
            <Literal name="Multiline 10"
                  literalVal="42"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_10.desc"/>
            <Literal name="Multiline 11"
                  literalVal="43"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_11.desc"/>
            <Literal name="Multiline 12"
                  literalVal="44"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_12.desc"/>
            <Literal name="Multiline 13"
                  literalVal="45"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_13.desc"/>
            <Literal name="Multiline 14"
                  literalVal="46"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_14.desc"/>
            <Literal name="Multiline 15"
                  literalVal="47"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_15.desc"/>
            <Literal name="Multiline 16"
                  literalVal="48"
                  descID="IEC61850_7_3.DAEnums::CurveCharKind.Multiline_16.desc"/>
         </Enumeration>
         <Enumeration name="FaultDirectionKind"
                   titleID="IEC61850_7_3.DAEnums::FaultDirectionKind.cl.title">
            <Literal name="unknown" literalVal="0"/>
            <Literal name="forward" literalVal="1"/>
            <Literal name="backward" literalVal="2"/>
            <Literal name="both" literalVal="3"/>
         </Enumeration>
         <Enumeration name="HvReferenceKind"
                   titleID="IEC61850_7_3.DAEnums::HvReferenceKind.cl.title">
            <Literal name="fundamental" literalVal="0"/>
            <Literal name="rms" literalVal="1"/>
            <Literal name="absolute" literalVal="2"/>
         </Enumeration>
         <Enumeration name="MonthKind" titleID="IEC61850_7_3.DAEnums::MonthKind.cl.title">
            <Literal name="reserved" literalVal="0"/>
            <Literal name="January" literalVal="1"/>
            <Literal name="February" literalVal="2"/>
            <Literal name="March" literalVal="3"/>
            <Literal name="April" literalVal="4"/>
            <Literal name="May" literalVal="5"/>
            <Literal name="June" literalVal="6"/>
            <Literal name="July" literalVal="7"/>
            <Literal name="August" literalVal="8"/>
            <Literal name="September" literalVal="9"/>
            <Literal name="October" literalVal="10"/>
            <Literal name="November" literalVal="11"/>
            <Literal name="December" literalVal="12"/>
         </Enumeration>
         <Enumeration name="MultiplierKind"
                   titleID="IEC61850_7_3.DAEnums::MultiplierKind.cl.title">
            <Literal name="y"
                  literalVal="-24"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.y.desc"/>
            <Literal name="z"
                  literalVal="-21"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.z.desc"/>
            <Literal name="a"
                  literalVal="-18"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.a.desc"/>
            <Literal name="f"
                  literalVal="-15"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.f.desc"/>
            <Literal name="p"
                  literalVal="-12"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.p.desc"/>
            <Literal name="n"
                  literalVal="-9"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.n.desc"/>
            <Literal name="µ"
                  literalVal="-6"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind._micro.desc"/>
            <Literal name="m"
                  literalVal="-3"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.m.desc"/>
            <Literal name="c"
                  literalVal="-2"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.c.desc"/>
            <Literal name="d"
                  literalVal="-1"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.d.desc"/>
            <Literal name=""
                  literalVal="0"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.none.desc"/>
            <Literal name="da"
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.da.desc"/>
            <Literal name="h"
                  literalVal="2"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.h.desc"/>
            <Literal name="k"
                  literalVal="3"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.k.desc"/>
            <Literal name="M"
                  literalVal="6"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.M.desc"/>
            <Literal name="G"
                  literalVal="9"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.G.desc"/>
            <Literal name="T"
                  literalVal="12"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.T.desc"/>
            <Literal name="P"
                  literalVal="15"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.P.desc"/>
            <Literal name="E"
                  literalVal="18"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.E.desc"/>
            <Literal name="Z"
                  literalVal="21"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.Z.desc"/>
            <Literal name="Y"
                  literalVal="24"
                  descID="IEC61850_7_3.DAEnums::MultiplierKind.Y.desc"/>
         </Enumeration>
         <Enumeration name="OccurrenceKind"
                   titleID="IEC61850_7_3.DAEnums::OccurrenceKind.cl.title">
            <Literal name="Time" literalVal="0"/>
            <Literal name="WeekDay" literalVal="1"/>
            <Literal name="WeekOfYear" literalVal="2"/>
            <Literal name="DayOfMonth" literalVal="3"/>
            <Literal name="DayOfYear" literalVal="4"/>
            <Literal name="NONE"
                  literalVal="5"
                  descID="IEC61850_7_3.DAEnums::OccurrenceKind.NONE.desc"/>
         </Enumeration>
         <Enumeration name="OutputSignalKind"
                   titleID="IEC61850_7_3.DAEnums::OutputSignalKind.cl.title">
            <Literal name="pulse"
                  literalVal="0"
                  descID="IEC61850_7_3.DAEnums::OutputSignalKind.pulse.desc"/>
            <Literal name="persistent"
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::OutputSignalKind.persistent.desc"/>
            <Literal name="persistent-feedback"
                  literalVal="2"
                  descID="IEC61850_7_3.DAEnums::OutputSignalKind.persistent-feedback.desc"/>
         </Enumeration>
         <Enumeration name="PeriodKind" titleID="IEC61850_7_3.DAEnums::PeriodKind.cl.title">
            <Literal name="Hour" literalVal="0"/>
            <Literal name="Day" literalVal="1"/>
            <Literal name="Week" literalVal="2"/>
            <Literal name="Month" literalVal="3"/>
            <Literal name="Year" literalVal="4"/>
         </Enumeration>
         <Enumeration name="PhaseAngleReferenceKind"
                   titleID="IEC61850_7_3.DAEnums::PhaseAngleReferenceKind.cl.title">
            <Literal name="Va" literalVal="0"/>
            <Literal name="Vb" literalVal="1"/>
            <Literal name="Vc" literalVal="2"/>
            <Literal name="Aa" literalVal="3"/>
            <Literal name="Ab" literalVal="4"/>
            <Literal name="Ac" literalVal="5"/>
            <Literal name="Vab" literalVal="6"/>
            <Literal name="Vbc" literalVal="7"/>
            <Literal name="Vca" literalVal="8"/>
            <Literal name="Vother" literalVal="9"/>
            <Literal name="Aother" literalVal="10"/>
            <Literal name="Synchrophasor"
                  literalVal="11"
                  descID="IEC61850_7_3.DAEnums::PhaseAngleReferenceKind.Synchrophasor.desc"/>
         </Enumeration>
         <Enumeration name="PhaseFaultDirectionKind"
                   titleID="IEC61850_7_3.DAEnums::PhaseFaultDirectionKind.cl.title">
            <Literal name="unknown" literalVal="0"/>
            <Literal name="forward" literalVal="1"/>
            <Literal name="backward" literalVal="2"/>
         </Enumeration>
         <Enumeration name="PhaseReferenceKind"
                   titleID="IEC61850_7_3.DAEnums::PhaseReferenceKind.cl.title">
            <Literal name="A" literalVal="0"/>
            <Literal name="B" literalVal="1"/>
            <Literal name="C" literalVal="2"/>
            <Literal name="Synchrophasor" literalVal="3"/>
         </Enumeration>
         <Enumeration name="RangeKind" titleID="IEC61850_7_3.DAEnums::RangeKind.cl.title">
            <Literal name="normal" literalVal="0"/>
            <Literal name="high" literalVal="1"/>
            <Literal name="low" literalVal="2"/>
            <Literal name="high-high" literalVal="3"/>
            <Literal name="low-low" literalVal="4"/>
         </Enumeration>
         <Enumeration name="SIUnitKind" titleID="IEC61850_7_3.DAEnums::SIUnitKind.cl.title">
            <Literal name=""
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.none.desc"/>
            <Literal name="m"
                  literalVal="2"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m.desc"/>
            <Literal name="kg"
                  literalVal="3"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.kg.desc"/>
            <Literal name="s"
                  literalVal="4"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.s.desc"/>
            <Literal name="A"
                  literalVal="5"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.A.desc"/>
            <Literal name="K"
                  literalVal="6"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.K.desc"/>
            <Literal name="mol"
                  literalVal="7"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.mol.desc"/>
            <Literal name="cd"
                  literalVal="8"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.cd.desc"/>
            <Literal name="deg"
                  literalVal="9"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.deg.desc"/>
            <Literal name="rad"
                  literalVal="10"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.rad.desc"/>
            <Literal name="sr"
                  literalVal="11"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.sr.desc"/>
            <Literal name="Gy"
                  literalVal="21"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Gy.desc"/>
            <Literal name="Bq"
                  literalVal="22"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Bq.desc"/>
            <Literal name="°C"
                  literalVal="23"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind._deg_C.desc"/>
            <Literal name="Sv"
                  literalVal="24"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Sv.desc"/>
            <Literal name="F"
                  literalVal="25"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.F.desc"/>
            <Literal name="C"
                  literalVal="26"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.C.desc"/>
            <Literal name="S"
                  literalVal="27"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.S.desc"/>
            <Literal name="H"
                  literalVal="28"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.H.desc"/>
            <Literal name="V"
                  literalVal="29"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.V.desc"/>
            <Literal name="ohm"
                  literalVal="30"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.ohm.desc"/>
            <Literal name="J"
                  literalVal="31"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.J.desc"/>
            <Literal name="N"
                  literalVal="32"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.N.desc"/>
            <Literal name="Hz"
                  literalVal="33"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Hz.desc"/>
            <Literal name="lx"
                  literalVal="34"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.lx.desc"/>
            <Literal name="Lm"
                  literalVal="35"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Lm.desc"/>
            <Literal name="Wb"
                  literalVal="36"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Wb.desc"/>
            <Literal name="T"
                  literalVal="37"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.T.desc"/>
            <Literal name="W"
                  literalVal="38"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.W.desc"/>
            <Literal name="Pa"
                  literalVal="39"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Pa.desc"/>
            <Literal name="m²"
                  literalVal="41"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m_sq_.desc"/>
            <Literal name="m³"
                  literalVal="42"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m_cube_.desc"/>
            <Literal name="m/s"
                  literalVal="43"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m_per_s.desc"/>
            <Literal name="m/s²"
                  literalVal="44"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m_per_s_sq_.desc"/>
            <Literal name="m³/s"
                  literalVal="45"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m_cube__per_s.desc"/>
            <Literal name="m/m³"
                  literalVal="46"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m_per_m_cube_.desc"/>
            <Literal name="M"
                  literalVal="47"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.M.desc"/>
            <Literal name="kg/m³"
                  literalVal="48"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.kg_per_m_cube_.desc"/>
            <Literal name="m²/s"
                  literalVal="49"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.m_sq__per_s.desc"/>
            <Literal name="W/m K"
                  literalVal="50"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.W_per_m_K.desc"/>
            <Literal name="J/K"
                  literalVal="51"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.J_per_K.desc"/>
            <Literal name="ppm"
                  literalVal="52"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.ppm.desc"/>
            <Literal name="1/s"
                  literalVal="53"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.1_per_s.desc"/>
            <Literal name="rad/s"
                  literalVal="54"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.rad_per_s.desc"/>
            <Literal name="W/m²"
                  literalVal="55"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.W_per_m_sq_.desc"/>
            <Literal name="J/m²"
                  literalVal="56"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.J_per_m_sq_.desc"/>
            <Literal name="S/m"
                  literalVal="57"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.S_per_m.desc"/>
            <Literal name="K/s"
                  literalVal="58"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.K_per_s.desc"/>
            <Literal name="Pa/s"
                  literalVal="59"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Pa_per_s.desc"/>
            <Literal name="J/kg K"
                  literalVal="60"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.J_per_kg_K.desc"/>
            <Literal name="VA"
                  literalVal="61"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.VA.desc"/>
            <Literal name="Watts"
                  literalVal="62"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Watts.desc"
                  deprecated="true"/>
            <Literal name="VAr"
                  literalVal="63"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.VAr.desc"/>
            <Literal name="phi"
                  literalVal="64"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.phi.desc"
                  deprecated="true"/>
            <Literal name="cos(phi)"
                  literalVal="65"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.cos(phi).desc"/>
            <Literal name="Vs"
                  literalVal="66"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Vs.desc"/>
            <Literal name="V²"
                  literalVal="67"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.V_sq_.desc"/>
            <Literal name="As"
                  literalVal="68"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.As.desc"/>
            <Literal name="A²"
                  literalVal="69"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.A_sq_.desc"/>
            <Literal name="A²t"
                  literalVal="70"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.A_sq_t.desc"/>
            <Literal name="VAh"
                  literalVal="71"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.VAh.desc"/>
            <Literal name="Wh"
                  literalVal="72"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Wh.desc"/>
            <Literal name="VArh"
                  literalVal="73"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.VArh.desc"/>
            <Literal name="V/Hz"
                  literalVal="74"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.V_per_Hz.desc"/>
            <Literal name="Hz/s"
                  literalVal="75"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Hz_per_s.desc"/>
            <Literal name="char"
                  literalVal="76"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.char.desc"/>
            <Literal name="char/s"
                  literalVal="77"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.char_per_s.desc"/>
            <Literal name="kgm²"
                  literalVal="78"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.kgm_sq_.desc"/>
            <Literal name="dB"
                  literalVal="79"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.dB.desc"/>
            <Literal name="J/Wh"
                  literalVal="80"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.J_per_Wh.desc"/>
            <Literal name="W/s"
                  literalVal="81"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.W_per_s.desc"/>
            <Literal name="l/s"
                  literalVal="82"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.l_per_s.desc"/>
            <Literal name="dBm"
                  literalVal="83"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.dBm.desc"/>
            <Literal name="h"
                  literalVal="84"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.h.desc"/>
            <Literal name="min"
                  literalVal="85"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.min.desc"/>
            <Literal name="Ohm/m"
                  literalVal="86"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.Ohm_per_m.desc"/>
            <Literal name="percent/s"
                  literalVal="87"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.percent_per_s.desc"/>
            <Literal name="A/V"
                  literalVal="88"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.A_per_V.desc"/>
            <Literal name="A/Vs"
                  literalVal="89"
                  descID="IEC61850_7_3.DAEnums::SIUnitKind.A_per_Vs.desc"/>
         </Enumeration>
         <Enumeration name="SboClassKind"
                   titleID="IEC61850_7_3.DAEnums::SboClassKind.cl.title">
            <Literal name="operate-once"
                  literalVal="0"
                  descID="IEC61850_7_3.DAEnums::SboClassKind.operate-once.desc"/>
            <Literal name="operate-many"
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::SboClassKind.operate-many.desc"/>
         </Enumeration>
         <Enumeration name="SequenceKind"
                   titleID="IEC61850_7_3.DAEnums::SequenceKind.cl.title">
            <Literal name="pos-neg-zero"
                  literalVal="0"
                  descID="IEC61850_7_3.DAEnums::SequenceKind.pos-neg-zero.desc"/>
            <Literal name="dir-quad-zero"
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::SequenceKind.dir-quad-zero.desc"/>
         </Enumeration>
         <Enumeration name="SeverityKind"
                   titleID="IEC61850_7_3.DAEnums::SeverityKind.cl.title">
            <Literal name="unknown"
                  literalVal="0"
                  descID="IEC61850_7_3.DAEnums::SeverityKind.unknown.desc"/>
            <Literal name="critical"
                  literalVal="1"
                  descID="IEC61850_7_3.DAEnums::SeverityKind.critical.desc"/>
            <Literal name="major"
                  literalVal="2"
                  descID="IEC61850_7_3.DAEnums::SeverityKind.major.desc"/>
            <Literal name="minor"
                  literalVal="3"
                  descID="IEC61850_7_3.DAEnums::SeverityKind.minor.desc"/>
            <Literal name="warning"
                  literalVal="4"
                  descID="IEC61850_7_3.DAEnums::SeverityKind.warning.desc"/>
         </Enumeration>
         <Enumeration name="WeekdayKind" titleID="IEC61850_7_3.DAEnums::WeekdayKind.cl.title">
            <Literal name="reserved" literalVal="0"/>
            <Literal name="Monday" literalVal="1"/>
            <Literal name="Tuesday" literalVal="2"/>
            <Literal name="Wednesday" literalVal="3"/>
            <Literal name="Thursday" literalVal="4"/>
            <Literal name="Friday" literalVal="5"/>
            <Literal name="Saturday" literalVal="6"/>
            <Literal name="Sunday" literalVal="7"/>
         </Enumeration>
      </Enumerations>
   <ConstructedAttributes>
         <ConstructedAttribute name="ScaledValueConfig"
                            titleID="IEC61850_7_3.ConstructedDAs::ScaledValueConfig.cl.title">
            <SubDataAttribute name="scaleFactor"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::ScaledValueConfig.scaleFactor.desc"
                           presCond="M"/>
            <SubDataAttribute name="offset"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::ScaledValueConfig.offset.desc"
                           presCond="M"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="RangeConfig"
                            titleID="IEC61850_7_3.ConstructedDAs::RangeConfig.cl.title">
            <SubDataAttribute name="hhLim"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.ConstructedDAs::RangeConfig.hhLim.desc"
                           presCond="MORange"/>
            <SubDataAttribute name="hLim"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.ConstructedDAs::RangeConfig.hLim.desc"
                           presCond="MORange"/>
            <SubDataAttribute name="lLim"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.ConstructedDAs::RangeConfig.lLim.desc"
                           presCond="MORange"/>
            <SubDataAttribute name="llLim"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.ConstructedDAs::RangeConfig.llLim.desc"
                           presCond="MORange"/>
            <SubDataAttribute name="min"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.ConstructedDAs::RangeConfig.min.desc"
                           presCond="M"/>
            <SubDataAttribute name="max"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.ConstructedDAs::RangeConfig.max.desc"
                           presCond="M"/>
            <SubDataAttribute name="limDb"
                           type="INT32U"
                           minValue="0"
                           maxValue="100000"
                           descID="IEC61850_7_3.ConstructedDAs::RangeConfig.limDb.desc"
                           presCond="O"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="ValWithTrans"
                            titleID="IEC61850_7_3.ConstructedDAs::ValWithTrans.cl.title">
            <SubDataAttribute name="posVal"
                           type="INT8"
                           minValue="-64"
                           maxValue="63"
                           descID="IEC61850_7_3.ConstructedDAs::ValWithTrans.posVal.desc"
                           presCond="M"/>
            <SubDataAttribute name="transInd"
                           type="BOOLEAN"
                           descID="IEC61850_7_3.ConstructedDAs::ValWithTrans.transInd.desc"
                           presCond="O"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="PulseConfig"
                            titleID="IEC61850_7_3.ConstructedDAs::PulseConfig.cl.title">
            <SubDataAttribute name="cmdQual"
                           type="OutputSignalKind"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_3.ConstructedDAs::PulseConfig.cmdQual.desc"
                           presCond="M"/>
            <SubDataAttribute name="onDur"
                           type="INT32U"
                           descID="IEC61850_7_3.ConstructedDAs::PulseConfig.onDur.desc"
                           presCond="M"/>
            <SubDataAttribute name="offDur"
                           type="INT32U"
                           descID="IEC61850_7_3.ConstructedDAs::PulseConfig.offDur.desc"
                           presCond="M"/>
            <SubDataAttribute name="numPls"
                           type="INT32U"
                           descID="IEC61850_7_3.ConstructedDAs::PulseConfig.numPls.desc"
                           presCond="M"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="Unit" titleID="IEC61850_7_3.ConstructedDAs::Unit.cl.title">
            <SubDataAttribute name="SIUnit"
                           type="SIUnitKind"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_3.ConstructedDAs::Unit.SIUnit.desc"
                           presCond="M"/>
            <SubDataAttribute name="multiplier"
                           type="MultiplierKind"
                           typeKind="ENUMERATED"
                           defaultValue="none"
                           descID="IEC61850_7_3.ConstructedDAs::Unit.multiplier.desc"
                           presCond="O"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="Vector" titleID="IEC61850_7_3.ConstructedDAs::Vector.cl.title">
            <SubDataAttribute name="mag"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.ConstructedDAs::Vector.mag.desc"
                           presCond="M"/>
            <SubDataAttribute name="ang"
                           type="AnalogueValue"
                           typeKind="CONSTRUCTED"
                           minValue="-180"
                           maxValue="180"
                           descID="IEC61850_7_3.ConstructedDAs::Vector.ang.desc"
                           presCond="O"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="Point" titleID="IEC61850_7_3.ConstructedDAs::Point.cl.title">
            <SubDataAttribute name="xVal"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::Point.xVal.desc"
                           presCond="M"/>
            <SubDataAttribute name="yVal"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::Point.yVal.desc"
                           presCond="M"/>
            <SubDataAttribute name="zVal"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::Point.zVal.desc"
                           presCond="O"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="Cell" titleID="IEC61850_7_3.ConstructedDAs::Cell.cl.title">
            <SubDataAttribute name="xStart"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::Cell.xStart.desc"
                           presCond="M"/>
            <SubDataAttribute name="xEnd"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::Cell.xEnd.desc"
                           presCond="O"/>
            <SubDataAttribute name="yStart"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::Cell.yStart.desc"
                           presCond="O"/>
            <SubDataAttribute name="yEnd"
                           type="FLOAT32"
                           descID="IEC61850_7_3.ConstructedDAs::Cell.yEnd.desc"
                           presCond="O"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="CalendarTime"
                            titleID="IEC61850_7_3.ConstructedDAs::CalendarTime.cl.title">
            <SubDataAttribute name="occ"
                           type="INT16U"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.occ.desc"
                           presCond="M"/>
            <SubDataAttribute name="occType"
                           type="OccurrenceKind"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.occType.desc"
                           presCond="M"/>
            <SubDataAttribute name="occPer"
                           type="PeriodKind"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.occPer.desc"
                           presCond="M"/>
            <SubDataAttribute name="weekDay"
                           type="WeekdayKind"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.weekDay.desc"
                           presCond="M"/>
            <SubDataAttribute name="month"
                           type="MonthKind"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.month.desc"
                           presCond="M"/>
            <SubDataAttribute name="day"
                           type="INT8U"
                           minValue="1"
                           maxValue="31"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.day.desc"
                           presCond="M"/>
            <SubDataAttribute name="hr"
                           type="INT8U"
                           minValue="0"
                           maxValue="23"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.hr.desc"
                           presCond="M"/>
            <SubDataAttribute name="mn"
                           type="INT8U"
                           minValue="0"
                           maxValue="59"
                           descID="IEC61850_7_3.ConstructedDAs::CalendarTime.mn.desc"
                           presCond="M"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="AnalogueValue"
                            titleID="IEC61850_7_3.AnalogueValue::AnalogueValue.cl.title">
            <SubDataAttribute name="i"
                           type="INT32"
                           descID="IEC61850_7_3.AnalogueValue::AnalogueValue.i.desc"
                           presCond="AtLeastOne"
                           presCondArgs="1"/>
            <SubDataAttribute name="f"
                           type="FLOAT32"
                           descID="IEC61850_7_3.AnalogueValue::AnalogueValue.f.desc"
                           presCond="AtLeastOne"
                           presCondArgs="1"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="AnalogueValueCtl"
                            titleID="IEC61850_7_3.AnalogueValue::AnalogueValueCtl.cl.title">
            <SubDataAttribute name="i"
                           type="INT32"
                           descID="IEC61850_7_3.AnalogueValue::AnalogueValueCtl.i.desc"
                           presCond="AllOnlyOneGroup"
                           presCondArgs="1"/>
            <SubDataAttribute name="f"
                           type="FLOAT32"
                           descID="IEC61850_7_3.AnalogueValue::AnalogueValueCtl.f.desc"
                           presCond="AllOnlyOneGroup"
                           presCondArgs="2"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="AnalogueValueCtlF"
                            titleID="IEC61850_7_3.AnalogueValue::AnalogueValueCtlF.cl.title">
            <SubDataAttribute name="f"
                           type="FLOAT32"
                           descID="IEC61850_7_3.AnalogueValue::AnalogueValueCtlF.f.desc"
                           presCond="M"/>
         </ConstructedAttribute>
         <ConstructedAttribute name="AnalogueValueCtlInt"
                            titleID="IEC61850_7_3.AnalogueValue::AnalogueValueCtlInt.cl.title">
            <SubDataAttribute name="i"
                           type="INT32"
                           descID="IEC61850_7_3.AnalogueValue::AnalogueValueCtlInt.i.desc"
                           presCond="M"/>
         </ConstructedAttribute>
      </ConstructedAttributes>
   <CDCs>
         <CDC name="SPS" titleID="IEC61850_7_3.CDCStatusInfo::SPS.cl.title">
            <DataAttribute name="stVal"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::SPS.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::SPS.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::SPS.t.desc"
                        presCond="M"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCStatusInfo::SPS.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="DPS" titleID="IEC61850_7_3.CDCStatusInfo::DPS.cl.title">
            <DataAttribute name="stVal"
                        fc="ST"
                        type="Dbpos"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::DPS.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::DPS.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::DPS.t.desc"
                        presCond="M"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="Dbpos"
                        descID="IEC61850_7_3.CDCStatusInfo::DPS.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="INS"
           titleID="IEC61850_7_3.CDCStatusInfo::INS.cl.title"
           statistics="true">
            <DataAttribute name="stVal"
                        fc="ST"
                        type="INT32"
                        dchg="true"
                        dupd="true"
                        descID="IEC61850_7_3.CDCStatusInfo::INS.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::INS.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::INS.t.desc"
                        presCond="M"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="INT32"
                        descID="IEC61850_7_3.CDCStatusInfo::INS.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::INS.units.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ENS"
           titleID="IEC61850_7_3.CDCStatusInfo::ENS.cl.title"
           enumParameterized="true">
            <DataAttribute name="stVal"
                        fc="ST"
                        typeKind="ENUMERATED"
                        dchg="true"
                        dupd="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ENS.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ENS.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::ENS.t.desc"
                        presCond="M"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCStatusInfo::ENS.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ACT" titleID="IEC61850_7_3.CDCStatusInfo::ACT.cl.title">
            <DataAttribute name="general"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.general.desc"
                        presCond="M"/>
            <DataAttribute name="phsA"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.phsA.desc"
                        presCond="O"/>
            <DataAttribute name="phsB"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.phsB.desc"
                        presCond="O"/>
            <DataAttribute name="phsC"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.phsC.desc"
                        presCond="O"/>
            <DataAttribute name="neut"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.neut.desc"
                        presCond="O"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.t.desc"
                        presCond="M"/>
            <DataAttribute name="originSrc"
                        fc="ST"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.originSrc.desc"
                        presCond="O"/>
            <DataAttribute name="operTmPhsA"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.operTmPhsA.desc"
                        presCond="O"/>
            <DataAttribute name="operTmPhsB"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.operTmPhsB.desc"
                        presCond="O"/>
            <DataAttribute name="operTmPhsC"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::ACT.operTmPhsC.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ACD" titleID="IEC61850_7_3.CDCStatusInfo::ACD.cl.title">
            <DataAttribute name="general"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.general.desc"
                        presCond="M"/>
            <DataAttribute name="dirGeneral"
                        fc="ST"
                        type="FaultDirectionKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.dirGeneral.desc"
                        presCond="M"/>
            <DataAttribute name="phsA"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.phsA.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="dirPhsA"
                        fc="ST"
                        type="PhaseFaultDirectionKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.dirPhsA.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="phsB"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.phsB.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="2"/>
            <DataAttribute name="dirPhsB"
                        fc="ST"
                        type="PhaseFaultDirectionKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.dirPhsB.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="2"/>
            <DataAttribute name="phsC"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.phsC.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="3"/>
            <DataAttribute name="dirPhsC"
                        fc="ST"
                        type="PhaseFaultDirectionKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.dirPhsC.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="3"/>
            <DataAttribute name="neut"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.neut.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="4"/>
            <DataAttribute name="dirNeut"
                        fc="ST"
                        type="PhaseFaultDirectionKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.dirNeut.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="4"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::ACD.t.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="SEC" titleID="IEC61850_7_3.CDCStatusInfo::SEC.cl.title">
            <DataAttribute name="cnt"
                        fc="ST"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::SEC.cnt.desc"
                        presCond="M"/>
            <DataAttribute name="sev"
                        fc="ST"
                        type="SeverityKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCStatusInfo::SEC.sev.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::SEC.t.desc"
                        presCond="M"/>
            <DataAttribute name="addr"
                        fc="ST"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCStatusInfo::SEC.addr.desc"
                        presCond="O"/>
            <DataAttribute name="addInfo"
                        fc="ST"
                        type="VisString64"
                        descID="IEC61850_7_3.CDCStatusInfo::SEC.addInfo.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="BCR"
           titleID="IEC61850_7_3.CDCStatusInfo::BCR.cl.title"
           statistics="true">
            <DataAttribute name="actVal"
                        fc="ST"
                        type="INT64"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.actVal.desc"
                        presCond="AllAtLeastOneGroup"
                        presCondArgs="2"/>
            <DataAttribute name="frVal"
                        fc="ST"
                        type="INT64"
                        dupd="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.frVal.desc"
                        presCond="AllAtLeastOneGroup"
                        presCondArgs="1"/>
            <DataAttribute name="frTm"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.frTm.desc"
                        presCond="AllAtLeastOneGroup"
                        presCondArgs="1"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.t.desc"
                        presCond="AllAtLeastOneGroup"
                        presCondArgs="2"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.units.desc"
                        presCond="O"/>
            <DataAttribute name="pulsQty"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.pulsQty.desc"
                        presCond="M"/>
            <DataAttribute name="frEna"
                        fc="CF"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.frEna.desc"
                        presCond="AllAtLeastOneGroup"
                        presCondArgs="1"/>
            <DataAttribute name="strTm"
                        fc="CF"
                        type="Timestamp"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.strTm.desc"
                        presCond="O"/>
            <DataAttribute name="frPd"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.frPd.desc"
                        presCond="AllAtLeastOneGroup"
                        presCondArgs="1"/>
            <DataAttribute name="frRs"
                        fc="CF"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::BCR.frRs.desc"
                        presCond="AllAtLeastOneGroup"
                        presCondArgs="1"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="HST" titleID="IEC61850_7_3.CDCStatusInfo::HST.cl.title">
            <DataAttribute name="hstVal"
                        fc="ST"
                        type="INT32"
                        dchg="true"
                        dupd="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.hstVal.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.t.desc"
                        presCond="M"/>
            <DataAttribute name="numPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.numPts.desc"
                        presCond="M"/>
            <DataAttribute name="hstRangeC"
                        fc="CF"
                        type="Cell"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.hstRangeC.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="xUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.xUnits.desc"
                        presCond="M"/>
            <DataAttribute name="yUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.yUnits.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.units.desc"
                        presCond="O"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="xD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.xD.desc"
                        presCond="M"/>
            <DataAttribute name="xDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.xDU.desc"
                        presCond="O"/>
            <DataAttribute name="yD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.yD.desc"
                        presCond="O"/>
            <DataAttribute name="yDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCStatusInfo::HST.yDU.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="VSS" titleID="IEC61850_7_3.CDCStatusInfo::VSS.cl.title">
            <DataAttribute name="stVal"
                        fc="ST"
                        type="VisString255"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::VSS.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::VSS.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::VSS.t.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ORS" titleID="IEC61850_7_3.CDCStatusInfo::ORS.cl.title">
            <DataAttribute name="stVal"
                        fc="ST"
                        type="ObjRef"
                        dchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ORS.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::ORS.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::ORS.t.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="TCS" titleID="IEC61850_7_3.CDCStatusInfo::TCS.cl.title">
            <DataAttribute name="stVal"
                        fc="ST"
                        type="Timestamp"
                        dchg="true"
                        dupd="true"
                        descID="IEC61850_7_3.CDCStatusInfo::TCS.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCStatusInfo::TCS.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCStatusInfo::TCS.t.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="MV"
           titleID="IEC61850_7_3.CDCAnalogueInfo::MV.cl.title"
           statistics="true">
            <DataAttribute name="instMag"
                        fc="MX"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.instMag.desc"
                        presCond="O"/>
            <DataAttribute name="mag"
                        fc="MX"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        dupd="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.mag.desc"
                        presCond="M"/>
            <DataAttribute name="range"
                        fc="MX"
                        type="RangeKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.range.desc"
                        presCond="O"/>
            <DataAttribute name="q"
                        fc="MX"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="MX"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.t.desc"
                        presCond="M"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subMag"
                        fc="SV"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.subMag.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.units.desc"
                        presCond="O"/>
            <DataAttribute name="db"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.db.desc"
                        presCond="O"/>
            <DataAttribute name="zeroDb"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.zeroDb.desc"
                        presCond="O"/>
            <DataAttribute name="sVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.sVC.desc"
                        presCond="MFscaledAV"/>
            <DataAttribute name="rangeC"
                        fc="CF"
                        type="RangeConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.rangeC.desc"
                        presCond="MO"
                        presCondArgs="range"/>
            <DataAttribute name="smpRate"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.smpRate.desc"
                        presCond="O"/>
            <DataAttribute name="dbRef"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.dbRef.desc"
                        presCond="MO"
                        presCondArgs="db"/>
            <DataAttribute name="zeroDbRef"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::MV.zeroDbRef.desc"
                        presCond="MO"
                        presCondArgs="zeroDb"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CMV"
           titleID="IEC61850_7_3.CDCAnalogueInfo::CMV.cl.title"
           statistics="true">
            <DataAttribute name="instCVal"
                        fc="MX"
                        type="Vector"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.instCVal.desc"
                        presCond="O"/>
            <DataAttribute name="cVal"
                        fc="MX"
                        type="Vector"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        dupd="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.cVal.desc"
                        presCond="M"/>
            <DataAttribute name="range"
                        fc="MX"
                        type="RangeKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.range.desc"
                        presCond="O"/>
            <DataAttribute name="rangeAng"
                        fc="MX"
                        type="RangeKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.rangeAng.desc"
                        presCond="O"/>
            <DataAttribute name="q"
                        fc="MX"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="MX"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.t.desc"
                        presCond="M"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subCVal"
                        fc="SV"
                        type="Vector"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.subCVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.units.desc"
                        presCond="O"/>
            <DataAttribute name="db"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.db.desc"
                        presCond="O"/>
            <DataAttribute name="dbAng"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.dbAng.desc"
                        presCond="O"/>
            <DataAttribute name="zeroDb"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.zeroDb.desc"
                        presCond="O"/>
            <DataAttribute name="rangeC"
                        fc="CF"
                        type="RangeConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.rangeC.desc"
                        presCond="MO"
                        presCondArgs="range"/>
            <DataAttribute name="rangeAngC"
                        fc="CF"
                        type="RangeConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.rangeAngC.desc"
                        presCond="MO"
                        presCondArgs="rangeAng"/>
            <DataAttribute name="magSVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.magSVC.desc"
                        presCond="MFscaledMagV"/>
            <DataAttribute name="angSVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.angSVC.desc"
                        presCond="MFscaledAngV"/>
            <DataAttribute name="angRef"
                        fc="CF"
                        type="PhaseAngleReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.angRef.desc"
                        presCond="O"/>
            <DataAttribute name="smpRate"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.smpRate.desc"
                        presCond="O"/>
            <DataAttribute name="dbRef"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.dbRef.desc"
                        presCond="MO"
                        presCondArgs="db"/>
            <DataAttribute name="zeroDbRef"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.zeroDbRef.desc"
                        presCond="MO"
                        presCondArgs="zeroDb"/>
            <DataAttribute name="dbAngRef"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::CMV.dbAngRef.desc"
                        presCond="MO"
                        presCondArgs="dbAng"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="SAV"
           titleID="IEC61850_7_3.CDCAnalogueInfo::SAV.cl.title"
           statistics="true">
            <DataAttribute name="instMag"
                        fc="MX"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SAV.instMag.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="MX"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SAV.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="MX"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SAV.t.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SAV.units.desc"
                        presCond="O"/>
            <DataAttribute name="sVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SAV.sVC.desc"
                        presCond="MFscaledAV"/>
            <DataAttribute name="min"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SAV.min.desc"
                        presCond="O"/>
            <DataAttribute name="max"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SAV.max.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="WYE"
           titleID="IEC61850_7_3.CDCAnalogueInfo::WYE.cl.title"
           statistics="true">
            <SubDataObject name="phsA"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.phsA.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <SubDataObject name="phsB"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.phsB.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <SubDataObject name="phsC"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.phsC.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <SubDataObject name="neut"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.neut.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <SubDataObject name="net"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.net.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <SubDataObject name="res"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.res.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="angRef"
                        fc="CF"
                        type="PhaseAngleReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.angRef.desc"
                        presCond="O"/>
            <DataAttribute name="phsToNeut"
                        fc="CF"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::WYE.phsToNeut.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="DEL"
           titleID="IEC61850_7_3.CDCAnalogueInfo::DEL.cl.title"
           statistics="true">
            <SubDataObject name="phsAB"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::DEL.phsAB.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <SubDataObject name="phsBC"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::DEL.phsBC.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <SubDataObject name="phsCA"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::DEL.phsCA.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="angRef"
                        fc="CF"
                        type="PhaseAngleReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::DEL.angRef.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="SEQ"
           titleID="IEC61850_7_3.CDCAnalogueInfo::SEQ.cl.title"
           statistics="true">
            <SubDataObject name="c1"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SEQ.c1.desc"
                        presCond="M"/>
            <SubDataObject name="c2"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SEQ.c2.desc"
                        presCond="OMSynPh"/>
            <SubDataObject name="c3"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SEQ.c3.desc"
                        presCond="OMSynPh"/>
            <DataAttribute name="seqT"
                        fc="MX"
                        type="SequenceKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SEQ.seqT.desc"
                        presCond="M"/>
            <DataAttribute name="phsRef"
                        fc="CF"
                        type="PhaseReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::SEQ.phsRef.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="HMV"
           titleID="IEC61850_7_3.CDCAnalogueInfo::HMV.cl.title"
           statistics="true">
            <SubDataObject name="har"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HMV.har.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="numHar"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.numHar.desc"
                        presCond="M"/>
            <DataAttribute name="numCyc"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.numCyc.desc"
                        presCond="M"/>
            <DataAttribute name="evalTm"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.evalTm.desc"
                        presCond="M"/>
            <DataAttribute name="smpRate"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.smpRate.desc"
                        presCond="O"/>
            <DataAttribute name="frequency"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.frequency.desc"
                        presCond="M"/>
            <DataAttribute name="hvRef"
                        fc="CF"
                        type="HvReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.hvRef.desc"
                        presCond="O"/>
            <DataAttribute name="rmsCyc"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.rmsCyc.desc"
                        presCond="MOrms"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="HWYE"
           titleID="IEC61850_7_3.CDCAnalogueInfo::HWYE.cl.title"
           statistics="true">
            <SubDataObject name="phsAHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HWYE.phsAHar.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <SubDataObject name="phsBHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HWYE.phsBHar.desc"
                        presCond="O"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <SubDataObject name="phsCHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HWYE.phsCHar.desc"
                        presCond="O"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <SubDataObject name="neutHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HWYE.neutHar.desc"
                        presCond="O"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <SubDataObject name="netHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HWYE.netHar.desc"
                        presCond="O"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <SubDataObject name="resHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HWYE.resHar.desc"
                        presCond="O"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="numHar"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.numHar.desc"
                        presCond="M"/>
            <DataAttribute name="numCyc"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.numCyc.desc"
                        presCond="M"/>
            <DataAttribute name="evalTm"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.evalTm.desc"
                        presCond="M"/>
            <DataAttribute name="angRef"
                        fc="CF"
                        type="PhaseAngleReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HWYE.angRef.desc"
                        presCond="O"/>
            <DataAttribute name="smpRate"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.smpRate.desc"
                        presCond="O"/>
            <DataAttribute name="frequency"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.frequency.desc"
                        presCond="M"/>
            <DataAttribute name="hvRef"
                        fc="CF"
                        type="HvReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.hvRef.desc"
                        presCond="O"/>
            <DataAttribute name="rmsCyc"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.rmsCyc.desc"
                        presCond="MOrms"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="HDEL"
           titleID="IEC61850_7_3.CDCAnalogueInfo::HDEL.cl.title"
           statistics="true">
            <SubDataObject name="phsABHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HDEL.phsABHar.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <SubDataObject name="phsBCHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HDEL.phsBCHar.desc"
                        presCond="O"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <SubDataObject name="phsCAHar"
                        type="CMV"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HDEL.phsCAHar.desc"
                        presCond="O"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="numHar"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.numHar.desc"
                        presCond="M"/>
            <DataAttribute name="numCyc"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.numCyc.desc"
                        presCond="M"/>
            <DataAttribute name="evalTm"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.evalTm.desc"
                        presCond="M"/>
            <DataAttribute name="angRef"
                        fc="CF"
                        type="PhaseAngleReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HDEL.angRef.desc"
                        presCond="O"/>
            <DataAttribute name="smpRate"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.smpRate.desc"
                        presCond="O"/>
            <DataAttribute name="frequency"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.frequency.desc"
                        presCond="M"/>
            <DataAttribute name="hvRef"
                        fc="CF"
                        type="HvReferenceKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.hvRef.desc"
                        presCond="O"/>
            <DataAttribute name="rmsCyc"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.rmsCyc.desc"
                        presCond="MOrms"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCAnalogueInfo::HarmonicMeasurandCDC.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BaseComposedCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="SPC" titleID="IEC61850_7_3.CDCControl::SPC.cl.title">
            <DataAttribute name="origin"
                        fc="ST"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::SPC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="ST"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::SPC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="stVal"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.stVal.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.q.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::SPC.t.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="stSeld"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCControl::SPC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="pulseConfig"
                        fc="CF"
                        type="PulseConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.pulseConfig.desc"
                        presCond="O"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::SPC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           type="BOOLEAN"
                           descID="IEC61850_7_3.CDCControl::SPC.ctlVal.desc"/>
         </CDC>
         <CDC name="DPC" titleID="IEC61850_7_3.CDCControl::DPC.cl.title">
            <DataAttribute name="origin"
                        fc="ST"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::DPC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="ST"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::DPC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="stVal"
                        fc="ST"
                        type="Dbpos"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::DPC.t.desc"
                        presCond="M"/>
            <DataAttribute name="stSeld"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="Dbpos"
                        descID="IEC61850_7_3.CDCControl::DPC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="pulseConfig"
                        fc="CF"
                        type="PulseConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.pulseConfig.desc"
                        presCond="O"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::DPC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           type="BOOLEAN"
                           descID="IEC61850_7_3.CDCControl::DPC.ctlVal.desc"/>
         </CDC>
         <CDC name="INC"
           titleID="IEC61850_7_3.CDCControl::INC.cl.title"
           statistics="true">
            <DataAttribute name="origin"
                        fc="ST"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::INC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="ST"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::INC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="stVal"
                        fc="ST"
                        type="INT32"
                        dchg="true"
                        dupd="true"
                        descID="IEC61850_7_3.CDCControl::INC.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::INC.t.desc"
                        presCond="M"/>
            <DataAttribute name="stSeld"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="INT32"
                        descID="IEC61850_7_3.CDCControl::INC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::INC.units.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           type="INT32"
                           descID="IEC61850_7_3.CDCControl::INC.ctlVal.desc"/>
         </CDC>
         <CDC name="ENC"
           titleID="IEC61850_7_3.CDCControl::ENC.cl.title"
           enumParameterized="true">
            <DataAttribute name="origin"
                        fc="ST"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::ENC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="ST"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::ENC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="stVal"
                        fc="ST"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ENC.stVal.desc"
                        presCond="M"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::ENC.q.desc"
                        presCond="M"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ENC.t.desc"
                        presCond="M"/>
            <DataAttribute name="stSeld"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ENC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCControl::ENC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ENC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ENC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ENC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ENC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           typeKind="ENUMERATED"
                           descID="IEC61850_7_3.CDCControl::ENC.ctlVal.desc"/>
         </CDC>
         <CDC name="BSC"
           titleID="IEC61850_7_3.CDCControl::BSC.cl.title"
           statistics="true">
            <DataAttribute name="origin"
                        fc="ST"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::BSC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="ST"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::BSC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="valWTr"
                        fc="ST"
                        type="ValWithTrans"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.valWTr.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.q.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::BSC.t.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="stSeld"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="ValWithTrans"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::BSC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="persistent"
                        fc="CF"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.persistent.desc"
                        presCond="M"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="INT8"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="INT8"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BSC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           type="Tcmd"
                           descID="IEC61850_7_3.CDCControl::BSC.ctlVal.desc"/>
         </CDC>
         <CDC name="ISC"
           titleID="IEC61850_7_3.CDCControl::ISC.cl.title"
           statistics="true">
            <DataAttribute name="origin"
                        fc="ST"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::ISC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="ST"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::ISC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="valWTr"
                        fc="ST"
                        type="ValWithTrans"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.valWTr.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="q"
                        fc="ST"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.q.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="t"
                        fc="ST"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ISC.t.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="stSeld"
                        fc="ST"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="ValWithTrans"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::ISC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="INT8"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="INT8"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ISC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           type="INT8"
                           descID="IEC61850_7_3.CDCControl::ISC.ctlVal.desc"/>
         </CDC>
         <CDC name="APC"
           titleID="IEC61850_7_3.CDCControl::APC.cl.title"
           statistics="true">
            <DataAttribute name="origin"
                        fc="MX"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::APC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="MX"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::APC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="mxVal"
                        fc="MX"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.mxVal.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="q"
                        fc="MX"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.q.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="t"
                        fc="MX"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::APC.t.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="stSeld"
                        fc="MX"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::APC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.units.desc"
                        presCond="O"/>
            <DataAttribute name="db"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.db.desc"
                        presCond="O"/>
            <DataAttribute name="sVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.sVC.desc"
                        presCond="MFscaledAV"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="dbRef"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::APC.dbRef.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           type="AnalogueValueCtl"
                           typeKind="CONSTRUCTED"
                           descID="IEC61850_7_3.CDCControl::APC.ctlVal.desc"/>
         </CDC>
         <CDC name="BAC"
           titleID="IEC61850_7_3.CDCControl::BAC.cl.title"
           statistics="true">
            <DataAttribute name="origin"
                        fc="MX"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::BAC.origin.desc"
                        presCond="O"/>
            <DataAttribute name="ctlNum"
                        fc="MX"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCControl::BAC.ctlNum.desc"
                        presCond="O"/>
            <DataAttribute name="mxVal"
                        fc="MX"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.mxVal.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="q"
                        fc="MX"
                        type="Quality"
                        qchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.q.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="t"
                        fc="MX"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::BAC.t.desc"
                        presCond="MAllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="stSeld"
                        fc="MX"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.stSeld.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="opRcvd"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opRcvd.desc"
                        presCond="O"/>
            <DataAttribute name="opOk"
                        fc="OR"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.opOk.desc"
                        presCond="O"/>
            <DataAttribute name="tOpOk"
                        fc="OR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCControl::ControlTestingCDC.tOpOk.desc"
                        presCond="O"/>
            <DataAttribute name="subEna"
                        fc="SV"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subEna.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subVal"
                        fc="SV"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCControl::BAC.subVal.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subQ"
                        fc="SV"
                        type="Quality"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subQ.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="subID"
                        fc="SV"
                        type="VisString64"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.subID.desc"
                        presCond="MFsubst"/>
            <DataAttribute name="blkEna"
                        fc="BL"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CoreAbstractCDCs::SubstitutionCDC.blkEna.desc"
                        presCond="O"/>
            <DataAttribute name="persistent"
                        fc="CF"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.persistent.desc"
                        presCond="M"/>
            <DataAttribute name="ctlModel"
                        fc="CF"
                        type="CtlModelKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.ctlModel.desc"
                        presCond="M"/>
            <DataAttribute name="sboTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.sboTimeout.desc"
                        presCond="MOsbo"/>
            <DataAttribute name="sboClass"
                        fc="CF"
                        type="SboClassKind"
                        typeKind="ENUMERATED"
                        defaultValue="operate-once"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.sboClass.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.units.desc"
                        presCond="O"/>
            <DataAttribute name="db"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.db.desc"
                        presCond="O"/>
            <DataAttribute name="sVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.sVC.desc"
                        presCond="MFscaledAV"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="operTimeout"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.operTimeout.desc"
                        presCond="MOenhanced"/>
            <DataAttribute name="dbRef"
                        fc="CF"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCControl::BAC.dbRef.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
            <ServiceParameter name="ctlVal"
                           type="Tcmd"
                           descID="IEC61850_7_3.CDCControl::BAC.ctlVal.desc"/>
         </CDC>
         <CDC name="SPG" variant="SP" titleID="IEC61850_7_3.SPG::SPG_SP.cl.title">
            <DataAttribute name="setVal"
                        fc="SP"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.SPG::SPG_SP.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="SPG" variant="SG" titleID="IEC61850_7_3.SPG::SPG_SG.cl.title">
            <DataAttribute name="setVal"
                        fc="SG"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.SPG::SPG_SG.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="SPG" variant="SE" titleID="IEC61850_7_3.SPG::SPG_SE.cl.title">
            <DataAttribute name="setVal"
                        fc="SE"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.SPG::SPG_SE.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ING" variant="SP" titleID="IEC61850_7_3.ING::ING_SP.cl.title">
            <DataAttribute name="setVal"
                        fc="SP"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING_SP.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.units.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ING" variant="SG" titleID="IEC61850_7_3.ING::ING_SG.cl.title">
            <DataAttribute name="setVal"
                        fc="SG"
                        type="INT32"
                        descID="IEC61850_7_3.ING::ING_SG.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.units.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ING" variant="SE" titleID="IEC61850_7_3.ING::ING_SE.cl.title">
            <DataAttribute name="setVal"
                        fc="SE"
                        type="INT32"
                        descID="IEC61850_7_3.ING::ING_SE.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="INT32U"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ING::ING.units.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ENG"
           variant="SP"
           titleID="IEC61850_7_3.ENG::ENG_SP.cl.title"
           enumParameterized="true">
            <DataAttribute name="setVal"
                        fc="SP"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.ENG::ENG_SP.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ENG"
           variant="SG"
           titleID="IEC61850_7_3.ENG::ENG_SG.cl.title"
           enumParameterized="true">
            <DataAttribute name="setVal"
                        fc="SG"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.ENG::ENG_SG.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ENG"
           variant="SE"
           titleID="IEC61850_7_3.ENG::ENG_SE.cl.title"
           enumParameterized="true">
            <DataAttribute name="setVal"
                        fc="SE"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.ENG::ENG_SE.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ORG" titleID="IEC61850_7_3.ORG::ORG.cl.title">
            <DataAttribute name="setSrcRef"
                        fc="SP"
                        type="ObjRef"
                        dchg="true"
                        descID="IEC61850_7_3.ORG::ORG.setSrcRef.desc"
                        presCond="M"/>
            <DataAttribute name="setTstRef"
                        fc="SP"
                        type="ObjRef"
                        dchg="true"
                        descID="IEC61850_7_3.ORG::ORG.setTstRef.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="setSrcCB"
                        fc="SP"
                        type="ObjRef"
                        dchg="true"
                        descID="IEC61850_7_3.ORG::ORG.setSrcCB.desc"
                        presCond="O"/>
            <DataAttribute name="setTstCB"
                        fc="SP"
                        type="ObjRef"
                        dchg="true"
                        descID="IEC61850_7_3.ORG::ORG.setTstCB.desc"
                        presCond="OF"
                        presCondArgs="setTstRef"/>
            <DataAttribute name="intAddr"
                        fc="SP"
                        type="VisString255"
                        dchg="true"
                        descID="IEC61850_7_3.ORG::ORG.intAddr.desc"
                        presCond="O"/>
            <DataAttribute name="tstEna"
                        fc="SP"
                        type="BOOLEAN"
                        dchg="true"
                        descID="IEC61850_7_3.ORG::ORG.tstEna.desc"
                        presCond="AllOrNonePerGroup"
                        presCondArgs="1"/>
            <DataAttribute name="purpose"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.ORG::ORG.purpose.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="TSG" variant="SP" titleID="IEC61850_7_3.TSG::TSG_SP.cl.title">
            <DataAttribute name="setTm"
                        fc="SP"
                        type="Timestamp"
                        dchg="true"
                        descID="IEC61850_7_3.TSG::TSG_SP.setTm.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="setCal"
                        fc="SP"
                        type="CalendarTime"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.TSG::TSG_SP.setCal.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="TSG" variant="SG" titleID="IEC61850_7_3.TSG::TSG_SG.cl.title">
            <DataAttribute name="setTm"
                        fc="SG"
                        type="Timestamp"
                        descID="IEC61850_7_3.TSG::TSG_SG.setTm.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="setCal"
                        fc="SG"
                        type="CalendarTime"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.TSG::TSG_SG.setCal.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="TSG" variant="SE" titleID="IEC61850_7_3.TSG::TSG_SE.cl.title">
            <DataAttribute name="setTm"
                        fc="SE"
                        type="Timestamp"
                        descID="IEC61850_7_3.TSG::TSG_SE.setTm.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="setCal"
                        fc="SE"
                        type="CalendarTime"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.TSG::TSG_SE.setCal.desc"
                        presCond="AtLeastOne"
                        presCondArgs="1"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CUG" variant="SP" titleID="IEC61850_7_3.CUG::CUG_SP.cl.title">
            <DataAttribute name="cur"
                        fc="SP"
                        type="Currency"
                        dchg="true"
                        descID="IEC61850_7_3.CUG::CUG_SP.cur.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CUG" variant="SG" titleID="IEC61850_7_3.CUG::CUG_SG.cl.title">
            <DataAttribute name="cur"
                        fc="SG"
                        type="Currency"
                        descID="IEC61850_7_3.CUG::CUG_SG.cur.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CUG" variant="SE" titleID="IEC61850_7_3.CUG::CUG_SE.cl.title">
            <DataAttribute name="cur"
                        fc="SE"
                        type="Currency"
                        descID="IEC61850_7_3.CUG::CUG_SE.cur.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="VSG" variant="SP" titleID="IEC61850_7_3.VSG::VSG_SP.cl.title">
            <DataAttribute name="setVal"
                        fc="SP"
                        type="VisString255"
                        dchg="true"
                        descID="IEC61850_7_3.VSG::VSG_SP.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="VSG" variant="SG" titleID="IEC61850_7_3.VSG::VSG_SG.cl.title">
            <DataAttribute name="setVal"
                        fc="SG"
                        type="VisString255"
                        descID="IEC61850_7_3.VSG::VSG_SG.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="VSG" variant="SE" titleID="IEC61850_7_3.VSG::VSG_SE.cl.title">
            <DataAttribute name="setVal"
                        fc="SE"
                        type="VisString255"
                        descID="IEC61850_7_3.VSG::VSG_SE.setVal.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ASG" variant="SP" titleID="IEC61850_7_3.ASG::ASG_SP.cl.title">
            <DataAttribute name="setMag"
                        fc="SP"
                        type="AnalogueValueCtl"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG_SP.setMag.desc"
                        presCond="M"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.units.desc"
                        presCond="O"/>
            <DataAttribute name="sVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.sVC.desc"
                        presCond="MFscaledAV"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ASG" variant="SG" titleID="IEC61850_7_3.ASG::ASG_SG.cl.title">
            <DataAttribute name="setMag"
                        fc="SG"
                        type="AnalogueValueCtl"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.ASG::ASG_SG.setMag.desc"
                        presCond="M"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.units.desc"
                        presCond="O"/>
            <DataAttribute name="sVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.sVC.desc"
                        presCond="MFscaledAV"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="ASG" variant="SE" titleID="IEC61850_7_3.ASG::ASG_SE.cl.title">
            <DataAttribute name="setMag"
                        fc="SE"
                        type="AnalogueValueCtl"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.ASG::ASG_SE.setMag.desc"
                        presCond="M"/>
            <DataAttribute name="units"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.units.desc"
                        presCond="O"/>
            <DataAttribute name="sVC"
                        fc="CF"
                        type="ScaledValueConfig"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.sVC.desc"
                        presCond="MFscaledAV"/>
            <DataAttribute name="minVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.minVal.desc"
                        presCond="O"/>
            <DataAttribute name="maxVal"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.maxVal.desc"
                        presCond="O"/>
            <DataAttribute name="stepSize"
                        fc="CF"
                        type="AnalogueValue"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.ASG::ASG.stepSize.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CURVE"
           variant="SP"
           titleID="IEC61850_7_3.CURVE::CURVE_SP.cl.title">
            <DataAttribute name="setCharact"
                        fc="SP"
                        type="CurveCharKind"
                        typeKind="ENUMERATED"
                        dchg="true"
                        descID="IEC61850_7_3.CURVE::CURVE_SP.setCharact.desc"
                        presCond="M"/>
            <DataAttribute name="setParA"
                        fc="SP"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CURVE::CURVE_SP.setParA.desc"
                        presCond="O"/>
            <DataAttribute name="setParB"
                        fc="SP"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CURVE::CURVE_SP.setParB.desc"
                        presCond="O"/>
            <DataAttribute name="setParC"
                        fc="SP"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CURVE::CURVE_SP.setParC.desc"
                        presCond="O"/>
            <DataAttribute name="setParD"
                        fc="SP"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CURVE::CURVE_SP.setParD.desc"
                        presCond="O"/>
            <DataAttribute name="setParE"
                        fc="SP"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CURVE::CURVE_SP.setParE.desc"
                        presCond="O"/>
            <DataAttribute name="setParF"
                        fc="SP"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CURVE::CURVE_SP.setParF.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CURVE"
           variant="SG"
           titleID="IEC61850_7_3.CURVE::CURVE_SG.cl.title">
            <DataAttribute name="setCharact"
                        fc="SG"
                        type="CurveCharKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CURVE::CURVE_SG.setCharact.desc"
                        presCond="M"/>
            <DataAttribute name="setParA"
                        fc="SG"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SG.setParA.desc"
                        presCond="O"/>
            <DataAttribute name="setParB"
                        fc="SG"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SG.setParB.desc"
                        presCond="O"/>
            <DataAttribute name="setParC"
                        fc="SG"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SG.setParC.desc"
                        presCond="O"/>
            <DataAttribute name="setParD"
                        fc="SG"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SG.setParD.desc"
                        presCond="O"/>
            <DataAttribute name="setParE"
                        fc="SG"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SG.setParE.desc"
                        presCond="O"/>
            <DataAttribute name="setParF"
                        fc="SG"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SG.setParF.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CURVE"
           variant="SE"
           titleID="IEC61850_7_3.CURVE::CURVE_SE.cl.title">
            <DataAttribute name="setCharact"
                        fc="SE"
                        type="CurveCharKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CURVE::CURVE_SE.setCharact.desc"
                        presCond="M"/>
            <DataAttribute name="setParA"
                        fc="SE"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SE.setParA.desc"
                        presCond="O"/>
            <DataAttribute name="setParB"
                        fc="SE"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SE.setParB.desc"
                        presCond="O"/>
            <DataAttribute name="setParC"
                        fc="SE"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SE.setParC.desc"
                        presCond="O"/>
            <DataAttribute name="setParD"
                        fc="SE"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SE.setParD.desc"
                        presCond="O"/>
            <DataAttribute name="setParE"
                        fc="SE"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SE.setParE.desc"
                        presCond="O"/>
            <DataAttribute name="setParF"
                        fc="SE"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CURVE::CURVE_SE.setParF.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CSG" variant="SP" titleID="IEC61850_7_3.CSG::CSG_SP.cl.title">
            <DataAttribute name="pointZ"
                        fc="SP"
                        type="FLOAT32"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG_SP.pointZ.desc"
                        presCond="O"/>
            <DataAttribute name="numPts"
                        fc="SP"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG_SP.numPts.desc"
                        presCond="M"/>
            <DataAttribute name="crvPts"
                        fc="SP"
                        type="Point"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG_SP.crvPts.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="xUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.xUnits.desc"
                        presCond="M"/>
            <DataAttribute name="yUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.yUnits.desc"
                        presCond="M"/>
            <DataAttribute name="zUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.zUnits.desc"
                        presCond="O"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="xD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.xD.desc"
                        presCond="M"/>
            <DataAttribute name="xDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.xDU.desc"
                        presCond="O"/>
            <DataAttribute name="yD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.yD.desc"
                        presCond="M"/>
            <DataAttribute name="yDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.yDU.desc"
                        presCond="O"/>
            <DataAttribute name="zD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.zD.desc"
                        presCond="O"/>
            <DataAttribute name="zDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.zDU.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CSG" variant="SG" titleID="IEC61850_7_3.CSG::CSG_SG.cl.title">
            <DataAttribute name="pointZ"
                        fc="SG"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CSG::CSG_SG.pointZ.desc"
                        presCond="O"/>
            <DataAttribute name="numPts"
                        fc="SG"
                        type="INT16U"
                        descID="IEC61850_7_3.CSG::CSG_SG.numPts.desc"
                        presCond="M"/>
            <DataAttribute name="crvPts"
                        fc="SG"
                        type="Point"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CSG::CSG_SG.crvPts.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="xUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.xUnits.desc"
                        presCond="M"/>
            <DataAttribute name="yUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.yUnits.desc"
                        presCond="M"/>
            <DataAttribute name="zUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.zUnits.desc"
                        presCond="O"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="xD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.xD.desc"
                        presCond="M"/>
            <DataAttribute name="xDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.xDU.desc"
                        presCond="O"/>
            <DataAttribute name="yD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.yD.desc"
                        presCond="M"/>
            <DataAttribute name="yDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.yDU.desc"
                        presCond="O"/>
            <DataAttribute name="zD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.zD.desc"
                        presCond="O"/>
            <DataAttribute name="zDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.zDU.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CSG" variant="SE" titleID="IEC61850_7_3.CSG::CSG_SE.cl.title">
            <DataAttribute name="pointZ"
                        fc="SE"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CSG::CSG_SE.pointZ.desc"
                        presCond="O"/>
            <DataAttribute name="numPts"
                        fc="SE"
                        type="INT16U"
                        descID="IEC61850_7_3.CSG::CSG_SE.numPts.desc"
                        presCond="M"/>
            <DataAttribute name="crvPts"
                        fc="SE"
                        type="Point"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CSG::CSG_SE.crvPts.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="xUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.xUnits.desc"
                        presCond="M"/>
            <DataAttribute name="yUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.yUnits.desc"
                        presCond="M"/>
            <DataAttribute name="zUnits"
                        fc="CF"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.zUnits.desc"
                        presCond="O"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CSG::CSG.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="xD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.xD.desc"
                        presCond="M"/>
            <DataAttribute name="xDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.xDU.desc"
                        presCond="O"/>
            <DataAttribute name="yD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.yD.desc"
                        presCond="M"/>
            <DataAttribute name="yDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.yDU.desc"
                        presCond="O"/>
            <DataAttribute name="zD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CSG::CSG.zD.desc"
                        presCond="O"/>
            <DataAttribute name="zDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CSG::CSG.zDU.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="DPL" titleID="IEC61850_7_3.CDCDescription::DPL.cl.title">
            <DataAttribute name="vendor"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.vendor.desc"
                        presCond="M"/>
            <DataAttribute name="hwRev"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.hwRev.desc"
                        presCond="O"/>
            <DataAttribute name="swRev"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.swRev.desc"
                        presCond="O"/>
            <DataAttribute name="serNum"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.serNum.desc"
                        presCond="O"/>
            <DataAttribute name="model"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.model.desc"
                        presCond="O"/>
            <DataAttribute name="location"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.location.desc"
                        presCond="O"/>
            <DataAttribute name="name"
                        fc="DC"
                        type="VisString64"
                        descID="IEC61850_7_3.CDCDescription::DPL.name.desc"
                        presCond="O"/>
            <DataAttribute name="owner"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.owner.desc"
                        presCond="O"/>
            <DataAttribute name="ePSName"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.ePSName.desc"
                        presCond="O"/>
            <DataAttribute name="primeOper"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.primeOper.desc"
                        presCond="O"/>
            <DataAttribute name="secondOper"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.secondOper.desc"
                        presCond="O"/>
            <DataAttribute name="latitude"
                        fc="DC"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CDCDescription::DPL.latitude.desc"
                        presCond="O"/>
            <DataAttribute name="longitude"
                        fc="DC"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CDCDescription::DPL.longitude.desc"
                        presCond="O"/>
            <DataAttribute name="altitude"
                        fc="DC"
                        type="FLOAT32"
                        descID="IEC61850_7_3.CDCDescription::DPL.altitude.desc"
                        presCond="O"/>
            <DataAttribute name="mRID"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::DPL.mRID.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="LPL" titleID="IEC61850_7_3.CDCDescription::LPL.cl.title">
            <DataAttribute name="paramRev"
                        fc="ST"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCDescription::LPL.paramRev.desc"
                        presCond="O"/>
            <DataAttribute name="valRev"
                        fc="ST"
                        type="INT32"
                        dchg="true"
                        descID="IEC61850_7_3.CDCDescription::LPL.valRev.desc"
                        presCond="O"/>
            <DataAttribute name="vendor"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::LPL.vendor.desc"
                        presCond="M"/>
            <DataAttribute name="swRev"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::LPL.swRev.desc"
                        presCond="M"/>
            <DataAttribute name="ldNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::LPL.ldNs.desc"
                        presCond="MFln0"/>
            <DataAttribute name="lnNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::LPL.lnNs.desc"
                        presCond="MOlnNs"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="configRev"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::LPL.configRev.desc"
                        presCond="MOln0"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CSD" titleID="IEC61850_7_3.CDCDescription::CSD.cl.title">
            <DataAttribute name="xUnits"
                        fc="DC"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCDescription::CSD.xUnits.desc"
                        presCond="M"/>
            <DataAttribute name="xD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::CSD.xD.desc"
                        presCond="M"/>
            <DataAttribute name="xDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCDescription::CSD.xDU.desc"
                        presCond="O"/>
            <DataAttribute name="yUnits"
                        fc="DC"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCDescription::CSD.yUnits.desc"
                        presCond="M"/>
            <DataAttribute name="yD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::CSD.yD.desc"
                        presCond="M"/>
            <DataAttribute name="yDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCDescription::CSD.yDU.desc"
                        presCond="O"/>
            <DataAttribute name="zUnits"
                        fc="DC"
                        type="Unit"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCDescription::CSD.zUnits.desc"
                        presCond="O"/>
            <DataAttribute name="zD"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::CSD.zD.desc"
                        presCond="O"/>
            <DataAttribute name="zDU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCDescription::CSD.zDU.desc"
                        presCond="O"/>
            <DataAttribute name="numPts"
                        fc="DC"
                        type="INT16U"
                        descID="IEC61850_7_3.CDCDescription::CSD.numPts.desc"
                        presCond="M"/>
            <DataAttribute name="crvPts"
                        fc="DC"
                        type="Point"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCDescription::CSD.crvPts.desc"
                        presCond="M"
                        isArray="true"
                        sizeAttribute="maxPts"/>
            <DataAttribute name="maxPts"
                        fc="CF"
                        type="INT16U"
                        dchg="true"
                        descID="IEC61850_7_3.CDCDescription::CSD.maxPts.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="VSD" titleID="IEC61850_7_3.CDCDescription::VSD.cl.title">
            <DataAttribute name="val"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CDCDescription::VSD.val.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CST" titleID="IEC61850_7_3.CDCServiceTracking::CST.cl.title">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::CST.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::CST.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::CST.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::CST.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::CST.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer"
                        fc="SR"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCServiceTracking::CST.certIssuer.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="BTS" titleID="IEC61850_7_3.CDCServiceTracking::BTS.cl.title">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer"
                        fc="SR"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.certIssuer.desc"
                        presCond="O"/>
            <DataAttribute name="rptID"
                        fc="SR"
                        type="VisString129"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.rptID.desc"
                        presCond="M"/>
            <DataAttribute name="rptEna"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.rptEna.desc"
                        presCond="M"/>
            <DataAttribute name="datSet"
                        fc="SR"
                        type="ObjRef"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.datSet.desc"
                        presCond="M"/>
            <DataAttribute name="confRev"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.confRev.desc"
                        presCond="M"/>
            <DataAttribute name="optFlds"
                        fc="SR"
                        type="OptFlds"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.optFlds.desc"
                        presCond="M"/>
            <DataAttribute name="bufTm"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.bufTm.desc"
                        presCond="M"/>
            <DataAttribute name="sqNum"
                        fc="SR"
                        type="INT16U"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.sqNum.desc"
                        presCond="M"/>
            <DataAttribute name="trgOps"
                        fc="SR"
                        type="TrgOps"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.trgOps.desc"
                        presCond="M"/>
            <DataAttribute name="intgPd"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.intgPd.desc"
                        presCond="M"/>
            <DataAttribute name="gi"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.gi.desc"
                        presCond="M"/>
            <DataAttribute name="purgeBuf"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.purgeBuf.desc"
                        presCond="M"/>
            <DataAttribute name="entryID"
                        fc="SR"
                        type="EntryID"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.entryID.desc"
                        presCond="M"/>
            <DataAttribute name="timeOfEntry"
                        fc="SR"
                        type="EntryTime"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.timeOfEntry.desc"
                        presCond="M"/>
            <DataAttribute name="resvTms"
                        fc="SR"
                        type="INT16"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.resvTms.desc"
                        presCond="O"/>
            <DataAttribute name="owner"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::BTS.owner.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="UTS" titleID="IEC61850_7_3.CDCServiceTracking::UTS.cl.title">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer"
                        fc="SR"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.certIssuer.desc"
                        presCond="O"/>
            <DataAttribute name="rptID"
                        fc="SR"
                        type="VisString129"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.rptID.desc"
                        presCond="M"/>
            <DataAttribute name="rptEna"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.rptEna.desc"
                        presCond="M"/>
            <DataAttribute name="resv"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.resv.desc"
                        presCond="M"/>
            <DataAttribute name="datSet"
                        fc="SR"
                        type="ObjRef"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.datSet.desc"
                        presCond="M"/>
            <DataAttribute name="confRev"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.confRev.desc"
                        presCond="M"/>
            <DataAttribute name="optFlds"
                        fc="SR"
                        type="OptFlds"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.optFlds.desc"
                        presCond="M"/>
            <DataAttribute name="bufTm"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.bufTm.desc"
                        presCond="M"/>
            <DataAttribute name="sqNum"
                        fc="SR"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.sqNum.desc"
                        presCond="M"/>
            <DataAttribute name="trgOps"
                        fc="SR"
                        type="TrgOps"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.trgOps.desc"
                        presCond="M"/>
            <DataAttribute name="intgPd"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.intgPd.desc"
                        presCond="M"/>
            <DataAttribute name="gi"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.gi.desc"
                        presCond="M"/>
            <DataAttribute name="owner"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::UTS.owner.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="LTS" titleID="IEC61850_7_3.CDCServiceTracking::LTS.cl.title">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer"
                        fc="SR"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.certIssuer.desc"
                        presCond="O"/>
            <DataAttribute name="logEna"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.logEna.desc"
                        presCond="M"/>
            <DataAttribute name="logRef"
                        fc="SR"
                        type="ObjRef"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.logRef.desc"
                        presCond="M"/>
            <DataAttribute name="datSet"
                        fc="SR"
                        type="ObjRef"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.datSet.desc"
                        presCond="M"/>
            <DataAttribute name="oldEntrTm"
                        fc="SR"
                        type="EntryTime"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.oldEntrTm.desc"
                        presCond="M"/>
            <DataAttribute name="newEntrTm"
                        fc="SR"
                        type="EntryTime"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.newEntrTm.desc"
                        presCond="M"/>
            <DataAttribute name="oldEnt"
                        fc="SR"
                        type="EntryID"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.oldEnt.desc"
                        presCond="M"/>
            <DataAttribute name="newEnt"
                        fc="SR"
                        type="EntryID"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.newEnt.desc"
                        presCond="M"/>
            <DataAttribute name="trgOps"
                        fc="SR"
                        type="TrgOps"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.trgOps.desc"
                        presCond="M"/>
            <DataAttribute name="intgPd"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::LTS.intgPd.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="GTS" titleID="IEC61850_7_3.CDCServiceTracking::GTS.cl.title">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer"
                        fc="SR"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.certIssuer.desc"
                        presCond="O"/>
            <DataAttribute name="goEna"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.goEna.desc"
                        presCond="M"/>
            <DataAttribute name="goID"
                        fc="SR"
                        type="VisString129"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.goID.desc"
                        presCond="M"/>
            <DataAttribute name="datSet"
                        fc="SR"
                        type="ObjRef"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.datSet.desc"
                        presCond="M"/>
            <DataAttribute name="confRev"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.confRev.desc"
                        presCond="M"/>
            <DataAttribute name="ndsCom"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.ndsCom.desc"
                        presCond="M"/>
            <DataAttribute name="dstAddress"
                        fc="SR"
                        type="PhyComAddr"
                        descID="IEC61850_7_3.CDCServiceTracking::GTS.dstAddress.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="MTS" titleID="IEC61850_7_3.CDCServiceTracking::MTS.cl.title">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer"
                        fc="SR"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.certIssuer.desc"
                        presCond="O"/>
            <DataAttribute name="svEna"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.svEna.desc"
                        presCond="M"/>
            <DataAttribute name="msvID"
                        fc="SR"
                        type="VisString129"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.msvID.desc"
                        presCond="M"/>
            <DataAttribute name="datSet"
                        fc="SR"
                        type="ObjRef"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.datSet.desc"
                        presCond="M"/>
            <DataAttribute name="confRev"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.confRev.desc"
                        presCond="M"/>
            <DataAttribute name="smpRate"
                        fc="SR"
                        type="INT16U"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.smpRate.desc"
                        presCond="M"/>
            <DataAttribute name="optFlds"
                        fc="SR"
                        type="SvOptFlds"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.optFlds.desc"
                        presCond="M"/>
            <DataAttribute name="smpMod"
                        fc="SR"
                        type="SamplingModeKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.smpMod.desc"
                        presCond="M"/>
            <DataAttribute name="dstAddress"
                        fc="SR"
                        type="PhyComAddr"
                        descID="IEC61850_7_3.CDCServiceTracking::MTS.dstAddress.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="NTS"
           titleID="IEC61850_7_3.CDCServiceTracking::NTS.cl.title"
           deprecated="true">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.t.desc"
                        presCond="M"/>
            <DataAttribute name="svEna"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.svEna.desc"
                        presCond="M"/>
            <DataAttribute name="resv"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.resv.desc"
                        presCond="M"/>
            <DataAttribute name="usvID"
                        fc="SR"
                        type="VisString129"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.usvID.desc"
                        presCond="M"/>
            <DataAttribute name="datSet"
                        fc="SR"
                        type="ObjRef"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.datSet.desc"
                        presCond="M"/>
            <DataAttribute name="confRev"
                        fc="SR"
                        type="INT32U"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.confRev.desc"
                        presCond="M"/>
            <DataAttribute name="smpMod"
                        fc="SR"
                        type="SamplingModeKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.smpMod.desc"
                        presCond="M"/>
            <DataAttribute name="smpRate"
                        fc="SR"
                        type="INT16U"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.smpRate.desc"
                        presCond="M"/>
            <DataAttribute name="optFlds"
                        fc="SR"
                        type="SvOptFlds"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.optFlds.desc"
                        presCond="M"/>
            <DataAttribute name="dstAddress"
                        fc="SR"
                        type="PhyComAddr"
                        descID="IEC61850_7_3.CDCServiceTracking::NTS.dstAddress.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="STS" titleID="IEC61850_7_3.CDCServiceTracking::STS.cl.title">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer"
                        fc="SR"
                        type="Unicode255"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.certIssuer.desc"
                        presCond="O"/>
            <DataAttribute name="numOfSG"
                        fc="SR"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.numOfSG.desc"
                        presCond="M"/>
            <DataAttribute name="actSG"
                        fc="SR"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.actSG.desc"
                        presCond="M"/>
            <DataAttribute name="editSG"
                        fc="SR"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.editSG.desc"
                        presCond="M"/>
            <DataAttribute name="cnfEdit"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.cnfEdit.desc"
                        presCond="M"/>
            <DataAttribute name="lActTm"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.lActTm.desc"
                        presCond="M"/>
            <DataAttribute name="resvTms"
                        fc="SR"
                        type="INT16U"
                        descID="IEC61850_7_3.CDCServiceTracking::STS.resvTms.desc"
                        presCond="O"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
         <CDC name="CTS"
           titleID="IEC61850_7_3.CDCServiceTracking::CTS.cl.title"
           typeKindParameterized="true">
            <DataAttribute name="objRef"
                        fc="SR"
                        type="ObjRef"
                        dupd="true"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.objRef.desc"
                        presCond="M"/>
            <DataAttribute name="serviceType"
                        fc="SR"
                        type="ServiceNameKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.serviceType.desc"
                        presCond="M"/>
            <DataAttribute name="errorCode"
                        fc="SR"
                        type="ServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.errorCode.desc"
                        presCond="M"/>
            <DataAttribute name="originatorID"
                        fc="SR"
                        type="Octet64"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.originatorID.desc"
                        presCond="O"/>
            <DataAttribute name="t"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.t.desc"
                        presCond="M"/>
            <DataAttribute name="certIssuer" fc="SR" type="Unicode255" presCond="O"/>
            <DataAttribute name="ctlVal"
                        fc="SR"
                        typeKind="undefined"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.ctlVal.desc"
                        presCond="M"/>
            <DataAttribute name="operTm"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.operTm.desc"
                        presCond="MOoperTm"/>
            <DataAttribute name="origin"
                        fc="SR"
                        type="Originator"
                        typeKind="CONSTRUCTED"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.origin.desc"
                        presCond="M"/>
            <DataAttribute name="ctlNum"
                        fc="SR"
                        type="INT8U"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.ctlNum.desc"
                        presCond="M"/>
            <DataAttribute name="T"
                        fc="SR"
                        type="Timestamp"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.T.desc"
                        presCond="M"/>
            <DataAttribute name="Test"
                        fc="SR"
                        type="BOOLEAN"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.Test.desc"
                        presCond="M"/>
            <DataAttribute name="Check"
                        fc="SR"
                        type="Check"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.Check.desc"
                        presCond="M"/>
            <DataAttribute name="respAddCause"
                        fc="SR"
                        type="ControlServiceStatusKind"
                        typeKind="ENUMERATED"
                        descID="IEC61850_7_3.CDCServiceTracking::CTS.respAddCause.desc"
                        presCond="M"/>
            <DataAttribute name="d"
                        fc="DC"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.d.desc"
                        presCond="O"/>
            <DataAttribute name="dU"
                        fc="DC"
                        type="Unicode255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dU.desc"
                        presCond="O"/>
            <DataAttribute name="cdcName"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.cdcName.desc"
                        presCond="O"/>
            <DataAttribute name="dataNs"
                        fc="EX"
                        type="VisString255"
                        descID="IEC61850_7_3.CoreAbstractCDCs::BasePrimitiveCDC.dataNs.desc"
                        presCond="MOdataNs"/>
         </CDC>
      </CDCs>
</NS>
`;
const nsd74 = `<?xml version="1.0" encoding="UTF-8"?>
<NS xmlns="http://www.iec.ch/61850/2016/NSD"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.iec.ch/61850/2016/NSD NSD.xsd"
    id="IEC 61850-7-4"
    version="2007"
    revision="B"
    release="3"
    umlVersion="WG10UML02v20draft25"
    umlDate="2019-10-31T00:00:00Z"
    publicationStage="IS">
   <Copyright>
         <Notice>
			COPYRIGHT (c) IEC, www.iec.ch/tc57/supportdocuments. This version of this NSD is part of IEC_61850-7-4:2007; see the IEC_61850-7-4:2007 for full legal notices. In case of any differences between the here-below code and the IEC published content, the here-below definition supersedes the IEC publication; it may contain updates. See history files. The whole document has to be taken into account to have a full description of this code component.
			See www.iec.ch/CCv1 for copyright details.
			</Notice>
         <License uri="www.iec.ch/CCv1" kind="Standard"/>
      </Copyright>
   <Changes version=""
            revision=""
            tissues="671, 672, 674, 675, 676, 677, 679, 680, 682, 683, 685, 686, 689, 693, 694, 695, 696, 712, 713, 714, 715, 716, 724, 725, 732, 734, 735, 736, 742, 743, 744, 748, 749, 772, 773, 774, 775, 776, 800, 802, 808, 819, 830, 831, 835, 838, 842, 843, 844, 849, 871, 877, 878, 879, 881, 882, 902, 908, 909, 910, 911, 912, 913, 920, 928, 932, 933, 937, 939, 940, 952, 967, 991, 1007, 1029, 1044, 1046, 1071, 1075, 1076, 1077, 1081, 1086, 1117, 1119, 1128, 1137, 1139, 1176, 1177, 1190, 1191, 1203, 1205, 1229, 1235, 1236, 1244, 1250, 1256, 1258, 1259, 1261, 1269, 1273, 1278, 1282, 1292, 1294, 1310, 1316, 1330, 1331, 1333, 1339, 1347, 1348, 1364, 1368, 1375, 1380, 1390, 1404, 1411, 1420, 1423, 1425, 1426, 1436, 1456, 1568"/>
   <Abbreviations>
         <Abbreviation name="A" descID="IEC61850_7_4.Abbreviations::AbbrTermA.A.desc"/>
         <Abbreviation name="AC" descID="IEC61850_7_4.Abbreviations::AbbrTermA.AC.desc"/>
         <Abbreviation name="AGC" descID="IEC61850_7_4.Abbreviations::AbbrTermA.AGC.desc"/>
         <Abbreviation name="ASG" descID="IEC61850_7_4.Abbreviations::AbbrTermA.ASG.desc"/>
         <Abbreviation name="AWatt" descID="IEC61850_7_4.Abbreviations::AbbrTermA.AWatt.desc"/>
         <Abbreviation name="Abr" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Abr.desc"/>
         <Abbreviation name="Abs" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Abs.desc"/>
         <Abbreviation name="Absb" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Absb.desc"/>
         <Abbreviation name="Acc" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Acc.desc"/>
         <Abbreviation name="Accl" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Accl.desc"/>
         <Abbreviation name="Accm" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Accm.desc"/>
         <Abbreviation name="Ack" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Ack.desc"/>
         <Abbreviation name="Acs" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Acs.desc"/>
         <Abbreviation name="Act" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Act.desc"/>
         <Abbreviation name="Actr" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Actr.desc"/>
         <Abbreviation name="Acu" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Acu.desc"/>
         <Abbreviation name="Addr" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Addr.desc"/>
         <Abbreviation name="Adj" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Adj.desc"/>
         <Abbreviation name="Admin" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Admin.desc"/>
         <Abbreviation name="Adp" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Adp.desc"/>
         <Abbreviation name="Aff" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Aff.desc"/>
         <Abbreviation name="Age" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Age.desc"/>
         <Abbreviation name="Ahr" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Ahr.desc"/>
         <Abbreviation name="Air" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Air.desc"/>
         <Abbreviation name="Alg" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Alg.desc"/>
         <Abbreviation name="Alm" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Alm.desc"/>
         <Abbreviation name="Als" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Als.desc"/>
         <Abbreviation name="Alt" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Alt.desc"/>
         <Abbreviation name="Altn" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Altn.desc"/>
         <Abbreviation name="Amnt" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Amnt.desc"/>
         <Abbreviation name="Amp" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Amp.desc"/>
         <Abbreviation name="An" descID="IEC61850_7_4.Abbreviations::AbbrTermA.An.desc"/>
         <Abbreviation name="Anc" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Anc.desc"/>
         <Abbreviation name="Ane" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Ane.desc"/>
         <Abbreviation name="Ang" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Ang.desc"/>
         <Abbreviation name="Ap" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Ap.desc"/>
         <Abbreviation name="Apc" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Apc.desc"/>
         <Abbreviation name="App" descID="IEC61850_7_4.Abbreviations::AbbrTermA.App.desc"/>
         <Abbreviation name="Ar" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Ar.desc"/>
         <Abbreviation name="Arc" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Arc.desc"/>
         <Abbreviation name="Area" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Area.desc"/>
         <Abbreviation name="Arr" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Arr.desc"/>
         <Abbreviation name="Asyn" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Asyn.desc"/>
         <Abbreviation name="At" descID="IEC61850_7_4.Abbreviations::AbbrTermA.At.desc"/>
         <Abbreviation name="Auth" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Auth.desc"/>
         <Abbreviation name="Auto" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Auto.desc"/>
         <Abbreviation name="Aux" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Aux.desc"/>
         <Abbreviation name="Av" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Av.desc"/>
         <Abbreviation name="Avl" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Avl.desc"/>
         <Abbreviation name="Ax" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Ax.desc"/>
         <Abbreviation name="Azi" descID="IEC61850_7_4.Abbreviations::AbbrTermA.Azi.desc"/>
         <Abbreviation name="B" descID="IEC61850_7_4.Abbreviations::AbbrTermB.B.desc"/>
         <Abbreviation name="BG" descID="IEC61850_7_4.Abbreviations::AbbrTermB.BG.desc"/>
         <Abbreviation name="Bac" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bac.desc"/>
         <Abbreviation name="Bar" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bar.desc"/>
         <Abbreviation name="Base" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Base.desc"/>
         <Abbreviation name="Bat" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bat.desc"/>
         <Abbreviation name="Bck" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bck.desc"/>
         <Abbreviation name="Bec" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bec.desc"/>
         <Abbreviation name="Beh" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Beh.desc"/>
         <Abbreviation name="Ber" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Ber.desc"/>
         <Abbreviation name="Bias" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bias.desc"/>
         <Abbreviation name="Bl" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bl.desc"/>
         <Abbreviation name="Blb" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Blb.desc"/>
         <Abbreviation name="Blk" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Blk.desc"/>
         <Abbreviation name="Blow" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Blow.desc"/>
         <Abbreviation name="Bnd" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bnd.desc"/>
         <Abbreviation name="Boil" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Boil.desc"/>
         <Abbreviation name="Bot" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bot.desc"/>
         <Abbreviation name="Brcb" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Brcb.desc"/>
         <Abbreviation name="Brg" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Brg.desc"/>
         <Abbreviation name="Brk" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Brk.desc"/>
         <Abbreviation name="Bsc" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bsc.desc"/>
         <Abbreviation name="Bst" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bst.desc"/>
         <Abbreviation name="Bt" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bt.desc"/>
         <Abbreviation name="Bub" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bub.desc"/>
         <Abbreviation name="Bus" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Bus.desc"/>
         <Abbreviation name="Byp" descID="IEC61850_7_4.Abbreviations::AbbrTermB.Byp.desc"/>
         <Abbreviation name="C" descID="IEC61850_7_4.Abbreviations::AbbrTermC.C.desc"/>
         <Abbreviation name="C2H2" descID="IEC61850_7_4.Abbreviations::AbbrTermC.C2H2.desc"/>
         <Abbreviation name="C2H4" descID="IEC61850_7_4.Abbreviations::AbbrTermC.C2H4.desc"/>
         <Abbreviation name="C2H6" descID="IEC61850_7_4.Abbreviations::AbbrTermC.C2H6.desc"/>
         <Abbreviation name="CB" descID="IEC61850_7_4.Abbreviations::AbbrTermC.CB.desc"/>
         <Abbreviation name="CE" descID="IEC61850_7_4.Abbreviations::AbbrTermC.CE.desc"/>
         <Abbreviation name="CG" descID="IEC61850_7_4.Abbreviations::AbbrTermC.CG.desc"/>
         <Abbreviation name="CH4" descID="IEC61850_7_4.Abbreviations::AbbrTermC.CH4.desc"/>
         <Abbreviation name="CHP" descID="IEC61850_7_4.Abbreviations::AbbrTermC.CHP.desc"/>
         <Abbreviation name="CO" descID="IEC61850_7_4.Abbreviations::AbbrTermC.CO.desc"/>
         <Abbreviation name="CO2" descID="IEC61850_7_4.Abbreviations::AbbrTermC.CO2.desc"/>
         <Abbreviation name="Cab" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cab.desc"/>
         <Abbreviation name="Cal" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cal.desc"/>
         <Abbreviation name="Cam" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cam.desc"/>
         <Abbreviation name="Can" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Can.desc"/>
         <Abbreviation name="Cap" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cap.desc"/>
         <Abbreviation name="Capac" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Capac.desc"/>
         <Abbreviation name="Car" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Car.desc"/>
         <Abbreviation name="Cbr" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cbr.desc"/>
         <Abbreviation name="Ccw" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Ccw.desc"/>
         <Abbreviation name="Ccy" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Ccy.desc"/>
         <Abbreviation name="Cds" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cds.desc"/>
         <Abbreviation name="Ceil" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Ceil.desc"/>
         <Abbreviation name="Cel" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cel.desc"/>
         <Abbreviation name="Cf" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cf.desc"/>
         <Abbreviation name="Cff" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cff.desc"/>
         <Abbreviation name="Cfg" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cfg.desc"/>
         <Abbreviation name="Cg" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cg.desc"/>
         <Abbreviation name="Ch" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Ch.desc"/>
         <Abbreviation name="Cha" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cha.desc"/>
         <Abbreviation name="Chg" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Chg.desc"/>
         <Abbreviation name="Chk" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Chk.desc"/>
         <Abbreviation name="Chr" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Chr.desc"/>
         <Abbreviation name="Chs" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Chs.desc"/>
         <Abbreviation name="Circ" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Circ.desc"/>
         <Abbreviation name="Cl" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cl.desc"/>
         <Abbreviation name="Clc" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Clc.desc"/>
         <Abbreviation name="Clip" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Clip.desc"/>
         <Abbreviation name="Clk" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Clk.desc"/>
         <Abbreviation name="Cloud" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cloud.desc"/>
         <Abbreviation name="Clr" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Clr.desc"/>
         <Abbreviation name="Cls" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cls.desc"/>
         <Abbreviation name="Cm" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cm.desc"/>
         <Abbreviation name="Cmbu" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cmbu.desc"/>
         <Abbreviation name="Cmd" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cmd.desc"/>
         <Abbreviation name="Cmpl" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cmpl.desc"/>
         <Abbreviation name="Cmut" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cmut.desc"/>
         <Abbreviation name="Cndct" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cndct.desc"/>
         <Abbreviation name="Cnt" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cnt.desc"/>
         <Abbreviation name="Cntt" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cntt.desc"/>
         <Abbreviation name="Cnv" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cnv.desc"/>
         <Abbreviation name="Col" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Col.desc"/>
         <Abbreviation name="Comm" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Comm.desc"/>
         <Abbreviation name="Comp" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Comp.desc"/>
         <Abbreviation name="Conf" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Conf.desc"/>
         <Abbreviation name="ConfRev"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermC.ConfRev.desc"/>
         <Abbreviation name="Conn" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Conn.desc"/>
         <Abbreviation name="Cons" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cons.desc"/>
         <Abbreviation name="Cor" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cor.desc"/>
         <Abbreviation name="Core" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Core.desc"/>
         <Abbreviation name="Cost" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cost.desc"/>
         <Abbreviation name="Crank" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Crank.desc"/>
         <Abbreviation name="Crd" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Crd.desc"/>
         <Abbreviation name="Crit" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Crit.desc"/>
         <Abbreviation name="Crl" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Crl.desc"/>
         <Abbreviation name="Crp" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Crp.desc"/>
         <Abbreviation name="Crv" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Crv.desc"/>
         <Abbreviation name="Csmp" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Csmp.desc"/>
         <Abbreviation name="Ctl" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Ctl.desc"/>
         <Abbreviation name="Ctr" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Ctr.desc"/>
         <Abbreviation name="Cum" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cum.desc"/>
         <Abbreviation name="Cur" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cur.desc"/>
         <Abbreviation name="Cut" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cut.desc"/>
         <Abbreviation name="Cvr" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cvr.desc"/>
         <Abbreviation name="Cw" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cw.desc"/>
         <Abbreviation name="Cwb" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cwb.desc"/>
         <Abbreviation name="Cyc" descID="IEC61850_7_4.Abbreviations::AbbrTermC.Cyc.desc"/>
         <Abbreviation name="D" descID="IEC61850_7_4.Abbreviations::AbbrTermD.D.desc"/>
         <Abbreviation name="DC" descID="IEC61850_7_4.Abbreviations::AbbrTermD.DC.desc"/>
         <Abbreviation name="DER" descID="IEC61850_7_4.Abbreviations::AbbrTermD.DER.desc"/>
         <Abbreviation name="DExt" descID="IEC61850_7_4.Abbreviations::AbbrTermD.DExt.desc"/>
         <Abbreviation name="DPCSO" descID="IEC61850_7_4.Abbreviations::AbbrTermD.DPCSO.desc"/>
         <Abbreviation name="DQ0" descID="IEC61850_7_4.Abbreviations::AbbrTermD.DQ0.desc"/>
         <Abbreviation name="DS" descID="IEC61850_7_4.Abbreviations::AbbrTermD.DS.desc"/>
         <Abbreviation name="DT" descID="IEC61850_7_4.Abbreviations::AbbrTermD.DT.desc"/>
         <Abbreviation name="Dam" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dam.desc"/>
         <Abbreviation name="Damp" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Damp.desc"/>
         <Abbreviation name="Date" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Date.desc"/>
         <Abbreviation name="Day" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Day.desc"/>
         <Abbreviation name="Db" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Db.desc"/>
         <Abbreviation name="Dcl" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dcl.desc"/>
         <Abbreviation name="Dct" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dct.desc"/>
         <Abbreviation name="De" descID="IEC61850_7_4.Abbreviations::AbbrTermD.De.desc"/>
         <Abbreviation name="Dea" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dea.desc"/>
         <Abbreviation name="Dec" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dec.desc"/>
         <Abbreviation name="Deg" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Deg.desc"/>
         <Abbreviation name="Dehum" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dehum.desc"/>
         <Abbreviation name="Del" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Del.desc"/>
         <Abbreviation name="Den" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Den.desc"/>
         <Abbreviation name="Dep" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dep.desc"/>
         <Abbreviation name="Desc" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Desc.desc"/>
         <Abbreviation name="Det" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Det.desc"/>
         <Abbreviation name="Detun" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Detun.desc"/>
         <Abbreviation name="Dev" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dev.desc"/>
         <Abbreviation name="Dew" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dew.desc"/>
         <Abbreviation name="Dff" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dff.desc"/>
         <Abbreviation name="Dfl" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dfl.desc"/>
         <Abbreviation name="Dft" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dft.desc"/>
         <Abbreviation name="Dia" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dia.desc"/>
         <Abbreviation name="Diag" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Diag.desc"/>
         <Abbreviation name="Dif" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dif.desc"/>
         <Abbreviation name="Dig" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dig.desc"/>
         <Abbreviation name="Dip" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dip.desc"/>
         <Abbreviation name="Dir" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dir.desc"/>
         <Abbreviation name="Dis" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dis.desc"/>
         <Abbreviation name="Dist" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dist.desc"/>
         <Abbreviation name="Dith" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dith.desc"/>
         <Abbreviation name="Dl" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dl.desc"/>
         <Abbreviation name="Dlt" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dlt.desc"/>
         <Abbreviation name="Dlv" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dlv.desc"/>
         <Abbreviation name="Dmd" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dmd.desc"/>
         <Abbreviation name="Dn" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dn.desc"/>
         <Abbreviation name="Dpc" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dpc.desc"/>
         <Abbreviation name="Dpt" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dpt.desc"/>
         <Abbreviation name="Drag" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Drag.desc"/>
         <Abbreviation name="Dropout"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dropout.desc"/>
         <Abbreviation name="Drp" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Drp.desc"/>
         <Abbreviation name="Drt" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Drt.desc"/>
         <Abbreviation name="Drtb" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Drtb.desc"/>
         <Abbreviation name="Drv" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Drv.desc"/>
         <Abbreviation name="Dsa" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dsa.desc"/>
         <Abbreviation name="Dsc" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dsc.desc"/>
         <Abbreviation name="Dsch" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dsch.desc"/>
         <Abbreviation name="Dscon" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dscon.desc"/>
         <Abbreviation name="Dsp" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dsp.desc"/>
         <Abbreviation name="Dtc" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dtc.desc"/>
         <Abbreviation name="Dur" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dur.desc"/>
         <Abbreviation name="Dust" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dust.desc"/>
         <Abbreviation name="Dv" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dv.desc"/>
         <Abbreviation name="Dw" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dw.desc"/>
         <Abbreviation name="Dyn" descID="IEC61850_7_4.Abbreviations::AbbrTermD.Dyn.desc"/>
         <Abbreviation name="EE" descID="IEC61850_7_4.Abbreviations::AbbrTermE.EE.desc"/>
         <Abbreviation name="EF" descID="IEC61850_7_4.Abbreviations::AbbrTermE.EF.desc"/>
         <Abbreviation name="EFN" descID="IEC61850_7_4.Abbreviations::AbbrTermE.EFN.desc"/>
         <Abbreviation name="EMA" descID="IEC61850_7_4.Abbreviations::AbbrTermE.EMA.desc"/>
         <Abbreviation name="ENG" descID="IEC61850_7_4.Abbreviations::AbbrTermE.ENG.desc"/>
         <Abbreviation name="ENS" descID="IEC61850_7_4.Abbreviations::AbbrTermE.ENS.desc"/>
         <Abbreviation name="EPC" descID="IEC61850_7_4.Abbreviations::AbbrTermE.EPC.desc"/>
         <Abbreviation name="EV" descID="IEC61850_7_4.Abbreviations::AbbrTermE.EV.desc"/>
         <Abbreviation name="EVSE" descID="IEC61850_7_4.Abbreviations::AbbrTermE.EVSE.desc"/>
         <Abbreviation name="Echo" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Echo.desc"/>
         <Abbreviation name="Ecp" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Ecp.desc"/>
         <Abbreviation name="Edt" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Edt.desc"/>
         <Abbreviation name="Efc" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Efc.desc"/>
         <Abbreviation name="El" descID="IEC61850_7_4.Abbreviations::AbbrTermE.El.desc"/>
         <Abbreviation name="Ela" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Ela.desc"/>
         <Abbreviation name="Em" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Em.desc"/>
         <Abbreviation name="Emg" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Emg.desc"/>
         <Abbreviation name="En" descID="IEC61850_7_4.Abbreviations::AbbrTermE.En.desc"/>
         <Abbreviation name="Ena" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Ena.desc"/>
         <Abbreviation name="Enc" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Enc.desc"/>
         <Abbreviation name="Encl" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Encl.desc"/>
         <Abbreviation name="End" descID="IEC61850_7_4.Abbreviations::AbbrTermE.End.desc"/>
         <Abbreviation name="Eng" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Eng.desc"/>
         <Abbreviation name="Ent" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Ent.desc"/>
         <Abbreviation name="Entr" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Entr.desc"/>
         <Abbreviation name="Env" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Env.desc"/>
         <Abbreviation name="Eq" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Eq.desc"/>
         <Abbreviation name="Err" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Err.desc"/>
         <Abbreviation name="Est" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Est.desc"/>
         <Abbreviation name="Ev" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Ev.desc"/>
         <Abbreviation name="Evn" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Evn.desc"/>
         <Abbreviation name="Evt" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Evt.desc"/>
         <Abbreviation name="Ex" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Ex.desc"/>
         <Abbreviation name="ExIm" descID="IEC61850_7_4.Abbreviations::AbbrTermE.ExIm.desc"/>
         <Abbreviation name="Exc" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Exc.desc"/>
         <Abbreviation name="Excl" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Excl.desc"/>
         <Abbreviation name="Exp" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Exp.desc"/>
         <Abbreviation name="Exps" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Exps.desc"/>
         <Abbreviation name="Expt" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Expt.desc"/>
         <Abbreviation name="Ext" descID="IEC61850_7_4.Abbreviations::AbbrTermE.Ext.desc"/>
         <Abbreviation name="F" descID="IEC61850_7_4.Abbreviations::AbbrTermF.F.desc"/>
         <Abbreviation name="FA" descID="IEC61850_7_4.Abbreviations::AbbrTermF.FA.desc"/>
         <Abbreviation name="FPM" descID="IEC61850_7_4.Abbreviations::AbbrTermF.FPM.desc"/>
         <Abbreviation name="Fa" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fa.desc"/>
         <Abbreviation name="Fact" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fact.desc"/>
         <Abbreviation name="Fail" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fail.desc"/>
         <Abbreviation name="Fan" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fan.desc"/>
         <Abbreviation name="Fbc" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fbc.desc"/>
         <Abbreviation name="Fer" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fer.desc"/>
         <Abbreviation name="Fil" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fil.desc"/>
         <Abbreviation name="Fire" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fire.desc"/>
         <Abbreviation name="Fish" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fish.desc"/>
         <Abbreviation name="Fix" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fix.desc"/>
         <Abbreviation name="Fld" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fld.desc"/>
         <Abbreviation name="Flk" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Flk.desc"/>
         <Abbreviation name="Fll" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fll.desc"/>
         <Abbreviation name="Flm" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Flm.desc"/>
         <Abbreviation name="Flood" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Flood.desc"/>
         <Abbreviation name="Flsh" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Flsh.desc"/>
         <Abbreviation name="Flt" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Flt.desc"/>
         <Abbreviation name="Flush" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Flush.desc"/>
         <Abbreviation name="Flw" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Flw.desc"/>
         <Abbreviation name="Fol" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fol.desc"/>
         <Abbreviation name="Forc" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Forc.desc"/>
         <Abbreviation name="Fu" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fu.desc"/>
         <Abbreviation name="Fuel" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fuel.desc"/>
         <Abbreviation name="Full" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Full.desc"/>
         <Abbreviation name="Fun" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fun.desc"/>
         <Abbreviation name="Fwd" descID="IEC61850_7_4.Abbreviations::AbbrTermF.Fwd.desc"/>
         <Abbreviation name="Gain" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gain.desc"/>
         <Abbreviation name="Gas" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gas.desc"/>
         <Abbreviation name="Gbx" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gbx.desc"/>
         <Abbreviation name="Gdv" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gdv.desc"/>
         <Abbreviation name="Gen" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gen.desc"/>
         <Abbreviation name="Glob" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Glob.desc"/>
         <Abbreviation name="Gm" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gm.desc"/>
         <Abbreviation name="Gn" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gn.desc"/>
         <Abbreviation name="Gnd" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gnd.desc"/>
         <Abbreviation name="GoCBRef"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermG.GoCBRef.desc"/>
         <Abbreviation name="Gocb" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gocb.desc"/>
         <Abbreviation name="Gr" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gr.desc"/>
         <Abbreviation name="Gra" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gra.desc"/>
         <Abbreviation name="Grd" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Grd.desc"/>
         <Abbreviation name="Gri" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gri.desc"/>
         <Abbreviation name="Gross" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gross.desc"/>
         <Abbreviation name="Gs" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gs.desc"/>
         <Abbreviation name="Gte" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gte.desc"/>
         <Abbreviation name="Gust" descID="IEC61850_7_4.Abbreviations::AbbrTermG.Gust.desc"/>
         <Abbreviation name="H" descID="IEC61850_7_4.Abbreviations::AbbrTermH.H.desc"/>
         <Abbreviation name="H2" descID="IEC61850_7_4.Abbreviations::AbbrTermH.H2.desc"/>
         <Abbreviation name="H2O" descID="IEC61850_7_4.Abbreviations::AbbrTermH.H2O.desc"/>
         <Abbreviation name="HP" descID="IEC61850_7_4.Abbreviations::AbbrTermH.HP.desc"/>
         <Abbreviation name="HPh" descID="IEC61850_7_4.Abbreviations::AbbrTermH.HPh.desc"/>
         <Abbreviation name="Ha" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Ha.desc"/>
         <Abbreviation name="Har" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Har.desc"/>
         <Abbreviation name="Hb" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hb.desc"/>
         <Abbreviation name="Hd" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hd.desc"/>
         <Abbreviation name="Health"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermH.Health.desc"/>
         <Abbreviation name="Heat" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Heat.desc"/>
         <Abbreviation name="Hello" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hello.desc"/>
         <Abbreviation name="Hi" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hi.desc"/>
         <Abbreviation name="Hlf" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hlf.desc"/>
         <Abbreviation name="Hold" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hold.desc"/>
         <Abbreviation name="Hor" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hor.desc"/>
         <Abbreviation name="Horn" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Horn.desc"/>
         <Abbreviation name="Ht" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Ht.desc"/>
         <Abbreviation name="Htex" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Htex.desc"/>
         <Abbreviation name="Hub" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hub.desc"/>
         <Abbreviation name="Hum" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hum.desc"/>
         <Abbreviation name="Hy" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hy.desc"/>
         <Abbreviation name="Hyd" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hyd.desc"/>
         <Abbreviation name="Hys" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hys.desc"/>
         <Abbreviation name="Hz" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hz.desc"/>
         <Abbreviation name="Hz1" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hz1.desc"/>
         <Abbreviation name="Hz2" descID="IEC61850_7_4.Abbreviations::AbbrTermH.Hz2.desc"/>
         <Abbreviation name="I" descID="IEC61850_7_4.Abbreviations::AbbrTermI.I.desc"/>
         <Abbreviation name="ING" descID="IEC61850_7_4.Abbreviations::AbbrTermI.ING.desc"/>
         <Abbreviation name="INS" descID="IEC61850_7_4.Abbreviations::AbbrTermI.INS.desc"/>
         <Abbreviation name="ISCSO" descID="IEC61850_7_4.Abbreviations::AbbrTermI.ISCSO.desc"/>
         <Abbreviation name="Ia" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ia.desc"/>
         <Abbreviation name="Iafm" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iafm.desc"/>
         <Abbreviation name="Iano" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iano.desc"/>
         <Abbreviation name="Ianofo"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ianofo.desc"/>
         <Abbreviation name="Ianopca"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ianopca.desc"/>
         <Abbreviation name="Ianos" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ianos.desc"/>
         <Abbreviation name="Ianosm"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ianosm.desc"/>
         <Abbreviation name="Iao" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iao.desc"/>
         <Abbreviation name="Iaog" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaog.desc"/>
         <Abbreviation name="Iaogfp"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaogfp.desc"/>
         <Abbreviation name="Iaogpp"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaogpp.desc"/>
         <Abbreviation name="Iaong" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaong.desc"/>
         <Abbreviation name="Iaongel"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaongel.desc"/>
         <Abbreviation name="Iaongen"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaongen.desc"/>
         <Abbreviation name="Iaongrs"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaongrs.desc"/>
         <Abbreviation name="Iaongts"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iaongts.desc"/>
         <Abbreviation name="Ice" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ice.desc"/>
         <Abbreviation name="Id" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Id.desc"/>
         <Abbreviation name="Ieee" descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.Ieee.desc"/>
         <Abbreviation name="IeeeKH"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKH.desc"/>
         <Abbreviation name="IeeeKH1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKH1.desc"/>
         <Abbreviation name="IeeeKH11"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKH11.desc"/>
         <Abbreviation name="IeeeKH17"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKH17.desc"/>
         <Abbreviation name="IeeeKH2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKH2.desc"/>
         <Abbreviation name="IeeeKI"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKI.desc"/>
         <Abbreviation name="IeeeKI1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKI1.desc"/>
         <Abbreviation name="IeeeKI11"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKI11.desc"/>
         <Abbreviation name="IeeeKI17"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKI17.desc"/>
         <Abbreviation name="IeeeKI2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKI2.desc"/>
         <Abbreviation name="IeeeKL"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKL.desc"/>
         <Abbreviation name="IeeeKL1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKL1.desc"/>
         <Abbreviation name="IeeeKL11"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKL11.desc"/>
         <Abbreviation name="IeeeKL17"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKL17.desc"/>
         <Abbreviation name="IeeeKL2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKL2.desc"/>
         <Abbreviation name="IeeeKs1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKs1.desc"/>
         <Abbreviation name="IeeeKs2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKs2.desc"/>
         <Abbreviation name="IeeeKs3"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeKs3.desc"/>
         <Abbreviation name="IeeeM"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeM.desc"/>
         <Abbreviation name="IeeeN"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeN.desc"/>
         <Abbreviation name="IeeeT1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT1.desc"/>
         <Abbreviation name="IeeeT10"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT10.desc"/>
         <Abbreviation name="IeeeT11"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT11.desc"/>
         <Abbreviation name="IeeeT2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT2.desc"/>
         <Abbreviation name="IeeeT3"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT3.desc"/>
         <Abbreviation name="IeeeT4"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT4.desc"/>
         <Abbreviation name="IeeeT7"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT7.desc"/>
         <Abbreviation name="IeeeT8"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT8.desc"/>
         <Abbreviation name="IeeeT9"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeT9.desc"/>
         <Abbreviation name="IeeeTH1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH1.desc"/>
         <Abbreviation name="IeeeTH10"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH10.desc"/>
         <Abbreviation name="IeeeTH11"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH11.desc"/>
         <Abbreviation name="IeeeTH12"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH12.desc"/>
         <Abbreviation name="IeeeTH2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH2.desc"/>
         <Abbreviation name="IeeeTH3"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH3.desc"/>
         <Abbreviation name="IeeeTH4"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH4.desc"/>
         <Abbreviation name="IeeeTH5"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH5.desc"/>
         <Abbreviation name="IeeeTH6"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH6.desc"/>
         <Abbreviation name="IeeeTH7"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH7.desc"/>
         <Abbreviation name="IeeeTH8"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH8.desc"/>
         <Abbreviation name="IeeeTH9"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTH9.desc"/>
         <Abbreviation name="IeeeTI1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI1.desc"/>
         <Abbreviation name="IeeeTI10"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI10.desc"/>
         <Abbreviation name="IeeeTI11"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI11.desc"/>
         <Abbreviation name="IeeeTI12"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI12.desc"/>
         <Abbreviation name="IeeeTI2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI2.desc"/>
         <Abbreviation name="IeeeTI3"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI3.desc"/>
         <Abbreviation name="IeeeTI4"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI4.desc"/>
         <Abbreviation name="IeeeTI5"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI5.desc"/>
         <Abbreviation name="IeeeTI6"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI6.desc"/>
         <Abbreviation name="IeeeTI7"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI7.desc"/>
         <Abbreviation name="IeeeTI8"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI8.desc"/>
         <Abbreviation name="IeeeTI9"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTI9.desc"/>
         <Abbreviation name="IeeeTL1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL1.desc"/>
         <Abbreviation name="IeeeTL10"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL10.desc"/>
         <Abbreviation name="IeeeTL11"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL11.desc"/>
         <Abbreviation name="IeeeTL12"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL12.desc"/>
         <Abbreviation name="IeeeTL2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL2.desc"/>
         <Abbreviation name="IeeeTL3"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL3.desc"/>
         <Abbreviation name="IeeeTL4"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL4.desc"/>
         <Abbreviation name="IeeeTL5"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL5.desc"/>
         <Abbreviation name="IeeeTL6"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL6.desc"/>
         <Abbreviation name="IeeeTL7"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL7.desc"/>
         <Abbreviation name="IeeeTL8"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL8.desc"/>
         <Abbreviation name="IeeeTL9"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTL9.desc"/>
         <Abbreviation name="IeeeTw1"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTw1.desc"/>
         <Abbreviation name="IeeeTw2"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTw2.desc"/>
         <Abbreviation name="IeeeTw3"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTw3.desc"/>
         <Abbreviation name="IeeeTw4"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeTw4.desc"/>
         <Abbreviation name="IeeeVHMax"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVHMax.desc"/>
         <Abbreviation name="IeeeVHMin"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVHMin.desc"/>
         <Abbreviation name="IeeeVIMax"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVIMax.desc"/>
         <Abbreviation name="IeeeVIMin"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVIMin.desc"/>
         <Abbreviation name="IeeeVLMax"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVLMax.desc"/>
         <Abbreviation name="IeeeVLMin"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVLMin.desc"/>
         <Abbreviation name="IeeeVsi1Max"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVsi1Max.desc"/>
         <Abbreviation name="IeeeVsi1Min"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVsi1Min.desc"/>
         <Abbreviation name="IeeeVsi2Max"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVsi2Max.desc"/>
         <Abbreviation name="IeeeVsi2Min"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVsi2Min.desc"/>
         <Abbreviation name="IeeeVstMax"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVstMax.desc"/>
         <Abbreviation name="IeeeVstMin"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermIeee.IeeeVstMin.desc"/>
         <Abbreviation name="Imb" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Imb.desc"/>
         <Abbreviation name="Imp" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Imp.desc"/>
         <Abbreviation name="Impact"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermI.Impact.desc"/>
         <Abbreviation name="Impt" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Impt.desc"/>
         <Abbreviation name="In" descID="IEC61850_7_4.Abbreviations::AbbrTermI.In.desc"/>
         <Abbreviation name="Ina" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ina.desc"/>
         <Abbreviation name="Inc" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Inc.desc"/>
         <Abbreviation name="Incl" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Incl.desc"/>
         <Abbreviation name="Incr" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Incr.desc"/>
         <Abbreviation name="Ind" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ind.desc"/>
         <Abbreviation name="Indp" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Indp.desc"/>
         <Abbreviation name="Iner" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iner.desc"/>
         <Abbreviation name="Inh" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Inh.desc"/>
         <Abbreviation name="Inl" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Inl.desc"/>
         <Abbreviation name="Inlet" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Inlet.desc"/>
         <Abbreviation name="Inn" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Inn.desc"/>
         <Abbreviation name="Ins" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ins.desc"/>
         <Abbreviation name="Insol" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Insol.desc"/>
         <Abbreviation name="Inst" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Inst.desc"/>
         <Abbreviation name="Int" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Int.desc"/>
         <Abbreviation name="Intm" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Intm.desc"/>
         <Abbreviation name="Intn" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Intn.desc"/>
         <Abbreviation name="Intr" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Intr.desc"/>
         <Abbreviation name="Intv" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Intv.desc"/>
         <Abbreviation name="Inv" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Inv.desc"/>
         <Abbreviation name="Isc" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Isc.desc"/>
         <Abbreviation name="Isld" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Isld.desc"/>
         <Abbreviation name="Iso" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iso.desc"/>
         <Abbreviation name="Iu" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Iu.desc"/>
         <Abbreviation name="Ix" descID="IEC61850_7_4.Abbreviations::AbbrTermI.Ix.desc"/>
         <Abbreviation name="Jmp" descID="IEC61850_7_4.Abbreviations::AbbrTermJK.Jmp.desc"/>
         <Abbreviation name="Jnt" descID="IEC61850_7_4.Abbreviations::AbbrTermJK.Jnt.desc"/>
         <Abbreviation name="K" descID="IEC61850_7_4.Abbreviations::AbbrTermJK.K.desc"/>
         <Abbreviation name="K0Fact"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermJK.K0Fact.desc"/>
         <Abbreviation name="KFact" descID="IEC61850_7_4.Abbreviations::AbbrTermJK.KFact.desc"/>
         <Abbreviation name="Kck" descID="IEC61850_7_4.Abbreviations::AbbrTermJK.Kck.desc"/>
         <Abbreviation name="Key" descID="IEC61850_7_4.Abbreviations::AbbrTermJK.Key.desc"/>
         <Abbreviation name="L" descID="IEC61850_7_4.Abbreviations::AbbrTermL.L.desc"/>
         <Abbreviation name="LDC" descID="IEC61850_7_4.Abbreviations::AbbrTermL.LDC.desc"/>
         <Abbreviation name="LDCR" descID="IEC61850_7_4.Abbreviations::AbbrTermL.LDCR.desc"/>
         <Abbreviation name="LDCX" descID="IEC61850_7_4.Abbreviations::AbbrTermL.LDCX.desc"/>
         <Abbreviation name="LDCZ" descID="IEC61850_7_4.Abbreviations::AbbrTermL.LDCZ.desc"/>
         <Abbreviation name="LED" descID="IEC61850_7_4.Abbreviations::AbbrTermL.LED.desc"/>
         <Abbreviation name="LTC" descID="IEC61850_7_4.Abbreviations::AbbrTermL.LTC.desc"/>
         <Abbreviation name="Last" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Last.desc"/>
         <Abbreviation name="Ld" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Ld.desc"/>
         <Abbreviation name="Ldp" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Ldp.desc"/>
         <Abbreviation name="Leap" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Leap.desc"/>
         <Abbreviation name="Len" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Len.desc"/>
         <Abbreviation name="Lev" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lev.desc"/>
         <Abbreviation name="Lft" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lft.desc"/>
         <Abbreviation name="Lg" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lg.desc"/>
         <Abbreviation name="Life" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Life.desc"/>
         <Abbreviation name="Lim" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lim.desc"/>
         <Abbreviation name="Lin" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lin.desc"/>
         <Abbreviation name="Liv" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Liv.desc"/>
         <Abbreviation name="Lkd" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lkd.desc"/>
         <Abbreviation name="Lkg" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lkg.desc"/>
         <Abbreviation name="Ll" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Ll.desc"/>
         <Abbreviation name="Lo" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lo.desc"/>
         <Abbreviation name="Loc" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Loc.desc"/>
         <Abbreviation name="Locb" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Locb.desc"/>
         <Abbreviation name="Lod" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lod.desc"/>
         <Abbreviation name="Log" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Log.desc"/>
         <Abbreviation name="Lok" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lok.desc"/>
         <Abbreviation name="Loop" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Loop.desc"/>
         <Abbreviation name="Los" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Los.desc"/>
         <Abbreviation name="Ls" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Ls.desc"/>
         <Abbreviation name="Lst" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lst.desc"/>
         <Abbreviation name="Lub" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lub.desc"/>
         <Abbreviation name="Lum" descID="IEC61850_7_4.Abbreviations::AbbrTermL.Lum.desc"/>
         <Abbreviation name="M" descID="IEC61850_7_4.Abbreviations::AbbrTermM.M.desc"/>
         <Abbreviation name="MV" descID="IEC61850_7_4.Abbreviations::AbbrTermM.MV.desc"/>
         <Abbreviation name="Mac" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mac.desc"/>
         <Abbreviation name="Made" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Made.desc"/>
         <Abbreviation name="Mag" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mag.desc"/>
         <Abbreviation name="Maint" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Maint.desc"/>
         <Abbreviation name="Man" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Man.desc"/>
         <Abbreviation name="Mat" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mat.desc"/>
         <Abbreviation name="Mau" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mau.desc"/>
         <Abbreviation name="Max" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Max.desc"/>
         <Abbreviation name="Mbr" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mbr.desc"/>
         <Abbreviation name="Md" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Md.desc"/>
         <Abbreviation name="Mdul" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mdul.desc"/>
         <Abbreviation name="Meas" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Meas.desc"/>
         <Abbreviation name="Mech" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mech.desc"/>
         <Abbreviation name="Media" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Media.desc"/>
         <Abbreviation name="Mem" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mem.desc"/>
         <Abbreviation name="Min" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Min.desc"/>
         <Abbreviation name="Mir" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mir.desc"/>
         <Abbreviation name="Mlt" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mlt.desc"/>
         <Abbreviation name="Mns" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mns.desc"/>
         <Abbreviation name="Mod" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mod.desc"/>
         <Abbreviation name="Mot" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mot.desc"/>
         <Abbreviation name="Mrg" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mrg.desc"/>
         <Abbreviation name="Mrk" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mrk.desc"/>
         <Abbreviation name="Mst" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mst.desc"/>
         <Abbreviation name="Msv" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Msv.desc"/>
         <Abbreviation name="Msvcb" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Msvcb.desc"/>
         <Abbreviation name="Mth" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mth.desc"/>
         <Abbreviation name="Mult" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mult.desc"/>
         <Abbreviation name="Mvm" descID="IEC61850_7_4.Abbreviations::AbbrTermM.Mvm.desc"/>
         <Abbreviation name="N2" descID="IEC61850_7_4.Abbreviations::AbbrTermN.N2.desc"/>
         <Abbreviation name="NOx" descID="IEC61850_7_4.Abbreviations::AbbrTermN.NOx.desc"/>
         <Abbreviation name="NQS" descID="IEC61850_7_4.Abbreviations::AbbrTermN.NQS.desc"/>
         <Abbreviation name="Nam" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Nam.desc"/>
         <Abbreviation name="Name" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Name.desc"/>
         <Abbreviation name="Ndl" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Ndl.desc"/>
         <Abbreviation name="NdsCom"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermN.NdsCom.desc"/>
         <Abbreviation name="Neut" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Neut.desc"/>
         <Abbreviation name="Ng" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Ng.desc"/>
         <Abbreviation name="Ngt" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Ngt.desc"/>
         <Abbreviation name="Nhd" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Nhd.desc"/>
         <Abbreviation name="Night" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Night.desc"/>
         <Abbreviation name="No" descID="IEC61850_7_4.Abbreviations::AbbrTermN.No.desc"/>
         <Abbreviation name="Nom" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Nom.desc"/>
         <Abbreviation name="Num" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Num.desc"/>
         <Abbreviation name="Nxt" descID="IEC61850_7_4.Abbreviations::AbbrTermN.Nxt.desc"/>
         <Abbreviation name="O2" descID="IEC61850_7_4.Abbreviations::AbbrTermO.O2.desc"/>
         <Abbreviation name="O3" descID="IEC61850_7_4.Abbreviations::AbbrTermO.O3.desc"/>
         <Abbreviation name="Obl" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Obl.desc"/>
         <Abbreviation name="Oc" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Oc.desc"/>
         <Abbreviation name="Odd" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Odd.desc"/>
         <Abbreviation name="Of" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Of.desc"/>
         <Abbreviation name="Off" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Off.desc"/>
         <Abbreviation name="Ofs" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Ofs.desc"/>
         <Abbreviation name="Oil" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Oil.desc"/>
         <Abbreviation name="On" descID="IEC61850_7_4.Abbreviations::AbbrTermO.On.desc"/>
         <Abbreviation name="Oo" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Oo.desc"/>
         <Abbreviation name="Op" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Op.desc"/>
         <Abbreviation name="Operate"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermO.Operate.desc"/>
         <Abbreviation name="Opn" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Opn.desc"/>
         <Abbreviation name="Ord" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Ord.desc"/>
         <Abbreviation name="Out" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Out.desc"/>
         <Abbreviation name="Ov" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Ov.desc"/>
         <Abbreviation name="Ovl" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Ovl.desc"/>
         <Abbreviation name="Ox" descID="IEC61850_7_4.Abbreviations::AbbrTermO.Ox.desc"/>
         <Abbreviation name="P" descID="IEC61850_7_4.Abbreviations::AbbrTermP.P.desc"/>
         <Abbreviation name="PF" descID="IEC61850_7_4.Abbreviations::AbbrTermP.PF.desc"/>
         <Abbreviation name="PH" descID="IEC61850_7_4.Abbreviations::AbbrTermP.PH.desc"/>
         <Abbreviation name="PNV" descID="IEC61850_7_4.Abbreviations::AbbrTermP.PNV.desc"/>
         <Abbreviation name="POW" descID="IEC61850_7_4.Abbreviations::AbbrTermP.POW.desc"/>
         <Abbreviation name="PP" descID="IEC61850_7_4.Abbreviations::AbbrTermP.PP.desc"/>
         <Abbreviation name="PPV" descID="IEC61850_7_4.Abbreviations::AbbrTermP.PPV.desc"/>
         <Abbreviation name="PT1" descID="IEC61850_7_4.Abbreviations::AbbrTermP.PT1.desc"/>
         <Abbreviation name="Pa" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pa.desc"/>
         <Abbreviation name="Pair" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pair.desc"/>
         <Abbreviation name="Pap" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pap.desc"/>
         <Abbreviation name="Par" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Par.desc"/>
         <Abbreviation name="Pas" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pas.desc"/>
         <Abbreviation name="Path" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Path.desc"/>
         <Abbreviation name="Pcb" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pcb.desc"/>
         <Abbreviation name="Pct" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pct.desc"/>
         <Abbreviation name="Pdm" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pdm.desc"/>
         <Abbreviation name="Pe" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pe.desc"/>
         <Abbreviation name="Per" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Per.desc"/>
         <Abbreviation name="Ph" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Ph.desc"/>
         <Abbreviation name="Phs" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Phs.desc"/>
         <Abbreviation name="Phy" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Phy.desc"/>
         <Abbreviation name="Pi" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pi.desc"/>
         <Abbreviation name="Pin" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pin.desc"/>
         <Abbreviation name="Pipe" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pipe.desc"/>
         <Abbreviation name="Pk" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pk.desc"/>
         <Abbreviation name="Pl" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pl.desc"/>
         <Abbreviation name="Plg" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Plg.desc"/>
         <Abbreviation name="Pls" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pls.desc"/>
         <Abbreviation name="Plt" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Plt.desc"/>
         <Abbreviation name="Pmp" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pmp.desc"/>
         <Abbreviation name="Po" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Po.desc"/>
         <Abbreviation name="Pol" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pol.desc"/>
         <Abbreviation name="Polytr"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermP.Polytr.desc"/>
         <Abbreviation name="Port" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Port.desc"/>
         <Abbreviation name="Pos" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pos.desc"/>
         <Abbreviation name="Pot" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pot.desc"/>
         <Abbreviation name="Prc" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prc.desc"/>
         <Abbreviation name="Pre" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pre.desc"/>
         <Abbreviation name="Prec" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prec.desc"/>
         <Abbreviation name="Pres" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pres.desc"/>
         <Abbreviation name="Prg" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prg.desc"/>
         <Abbreviation name="Prim" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prim.desc"/>
         <Abbreviation name="Prio" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prio.desc"/>
         <Abbreviation name="Prm" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prm.desc"/>
         <Abbreviation name="Pro" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pro.desc"/>
         <Abbreviation name="Proc" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Proc.desc"/>
         <Abbreviation name="Proxy" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Proxy.desc"/>
         <Abbreviation name="Prs" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prs.desc"/>
         <Abbreviation name="Prt" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Prt.desc"/>
         <Abbreviation name="Ps" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Ps.desc"/>
         <Abbreviation name="Psk" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Psk.desc"/>
         <Abbreviation name="Pss" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pss.desc"/>
         <Abbreviation name="Pst" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pst.desc"/>
         <Abbreviation name="Pt" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pt.desc"/>
         <Abbreviation name="Pth" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pth.desc"/>
         <Abbreviation name="Pwr" descID="IEC61850_7_4.Abbreviations::AbbrTermP.Pwr.desc"/>
         <Abbreviation name="Qty" descID="IEC61850_7_4.Abbreviations::AbbrTermQ.Qty.desc"/>
         <Abbreviation name="Qu" descID="IEC61850_7_4.Abbreviations::AbbrTermQ.Qu.desc"/>
         <Abbreviation name="Qud" descID="IEC61850_7_4.Abbreviations::AbbrTermQ.Qud.desc"/>
         <Abbreviation name="R" descID="IEC61850_7_4.Abbreviations::AbbrTermR.R.desc"/>
         <Abbreviation name="Rad" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rad.desc"/>
         <Abbreviation name="Ral" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Ral.desc"/>
         <Abbreviation name="Ramp" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Ramp.desc"/>
         <Abbreviation name="Rat" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rat.desc"/>
         <Abbreviation name="Rb" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rb.desc"/>
         <Abbreviation name="Rcd" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rcd.desc"/>
         <Abbreviation name="Rch" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rch.desc"/>
         <Abbreviation name="Rcl" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rcl.desc"/>
         <Abbreviation name="Rct" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rct.desc"/>
         <Abbreviation name="Rdy" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rdy.desc"/>
         <Abbreviation name="Re" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Re.desc"/>
         <Abbreviation name="React" descID="IEC61850_7_4.Abbreviations::AbbrTermR.React.desc"/>
         <Abbreviation name="Rec" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rec.desc"/>
         <Abbreviation name="Rec1" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rec1.desc"/>
         <Abbreviation name="Rec13" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rec13.desc"/>
         <Abbreviation name="Rec3" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rec3.desc"/>
         <Abbreviation name="Recha" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Recha.desc"/>
         <Abbreviation name="Rect" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rect.desc"/>
         <Abbreviation name="Red" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Red.desc"/>
         <Abbreviation name="Ref" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Ref.desc"/>
         <Abbreviation name="Reg" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Reg.desc"/>
         <Abbreviation name="Rel" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rel.desc"/>
         <Abbreviation name="Req" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Req.desc"/>
         <Abbreviation name="Res" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Res.desc"/>
         <Abbreviation name="Reso" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Reso.desc"/>
         <Abbreviation name="Reuse" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Reuse.desc"/>
         <Abbreviation name="Rev" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rev.desc"/>
         <Abbreviation name="Rf" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rf.desc"/>
         <Abbreviation name="Rin" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rin.desc"/>
         <Abbreviation name="Ris" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Ris.desc"/>
         <Abbreviation name="Rl" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rl.desc"/>
         <Abbreviation name="Rm" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rm.desc"/>
         <Abbreviation name="Rmp" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rmp.desc"/>
         <Abbreviation name="Rms" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rms.desc"/>
         <Abbreviation name="Rn" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rn.desc"/>
         <Abbreviation name="Rnbk" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rnbk.desc"/>
         <Abbreviation name="Rng" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rng.desc"/>
         <Abbreviation name="Rod" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rod.desc"/>
         <Abbreviation name="Root" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Root.desc"/>
         <Abbreviation name="Rot" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rot.desc"/>
         <Abbreviation name="Rpt" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rpt.desc"/>
         <Abbreviation name="Rs" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rs.desc"/>
         <Abbreviation name="Rsl" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rsl.desc"/>
         <Abbreviation name="Rst" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rst.desc"/>
         <Abbreviation name="Rsv" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rsv.desc"/>
         <Abbreviation name="Rt" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rt.desc"/>
         <Abbreviation name="Rte" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rte.desc"/>
         <Abbreviation name="Rtg" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rtg.desc"/>
         <Abbreviation name="Rub" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rub.desc"/>
         <Abbreviation name="Run" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Run.desc"/>
         <Abbreviation name="Rv" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rv.desc"/>
         <Abbreviation name="Rvc" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rvc.desc"/>
         <Abbreviation name="Rvrt" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rvrt.desc"/>
         <Abbreviation name="Rwy" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rwy.desc"/>
         <Abbreviation name="Rx" descID="IEC61850_7_4.Abbreviations::AbbrTermR.Rx.desc"/>
         <Abbreviation name="S10" descID="IEC61850_7_4.Abbreviations::AbbrTermS.S10.desc"/>
         <Abbreviation name="S12" descID="IEC61850_7_4.Abbreviations::AbbrTermS.S12.desc"/>
         <Abbreviation name="SM" descID="IEC61850_7_4.Abbreviations::AbbrTermS.SM.desc"/>
         <Abbreviation name="SNL" descID="IEC61850_7_4.Abbreviations::AbbrTermS.SNL.desc"/>
         <Abbreviation name="SOx" descID="IEC61850_7_4.Abbreviations::AbbrTermS.SOx.desc"/>
         <Abbreviation name="SPCSO" descID="IEC61850_7_4.Abbreviations::AbbrTermS.SPCSO.desc"/>
         <Abbreviation name="SPG" descID="IEC61850_7_4.Abbreviations::AbbrTermS.SPG.desc"/>
         <Abbreviation name="SPS" descID="IEC61850_7_4.Abbreviations::AbbrTermS.SPS.desc"/>
         <Abbreviation name="SPl" descID="IEC61850_7_4.Abbreviations::AbbrTermS.SPl.desc"/>
         <Abbreviation name="ST" descID="IEC61850_7_4.Abbreviations::AbbrTermS.ST.desc"/>
         <Abbreviation name="Saf" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Saf.desc"/>
         <Abbreviation name="Sag" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sag.desc"/>
         <Abbreviation name="Sar" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sar.desc"/>
         <Abbreviation name="Sat" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sat.desc"/>
         <Abbreviation name="Sc" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sc.desc"/>
         <Abbreviation name="Scale" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Scale.desc"/>
         <Abbreviation name="Schd" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Schd.desc"/>
         <Abbreviation name="Scnd" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Scnd.desc"/>
         <Abbreviation name="Sco" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sco.desc"/>
         <Abbreviation name="Sec" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sec.desc"/>
         <Abbreviation name="Sel" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sel.desc"/>
         <Abbreviation name="Self" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Self.desc"/>
         <Abbreviation name="Seq" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Seq.desc"/>
         <Abbreviation name="Ser" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Ser.desc"/>
         <Abbreviation name="Set" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Set.desc"/>
         <Abbreviation name="Sgcb" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sgcb.desc"/>
         <Abbreviation name="Sh" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sh.desc"/>
         <Abbreviation name="Shar" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Shar.desc"/>
         <Abbreviation name="Shft" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Shft.desc"/>
         <Abbreviation name="Shld" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Shld.desc"/>
         <Abbreviation name="Sig" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sig.desc"/>
         <Abbreviation name="Sign" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sign.desc"/>
         <Abbreviation name="Sim" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sim.desc"/>
         <Abbreviation name="Sld" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sld.desc"/>
         <Abbreviation name="Slnt" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Slnt.desc"/>
         <Abbreviation name="Slp" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Slp.desc"/>
         <Abbreviation name="Smok" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Smok.desc"/>
         <Abbreviation name="Smp" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Smp.desc"/>
         <Abbreviation name="Snd" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Snd.desc"/>
         <Abbreviation name="Snpt" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Snpt.desc"/>
         <Abbreviation name="Snr" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Snr.desc"/>
         <Abbreviation name="Snw" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Snw.desc"/>
         <Abbreviation name="Soc" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Soc.desc"/>
         <Abbreviation name="Sof" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sof.desc"/>
         <Abbreviation name="Spc" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Spc.desc"/>
         <Abbreviation name="Spcf" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Spcf.desc"/>
         <Abbreviation name="Spd" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Spd.desc"/>
         <Abbreviation name="Spec" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Spec.desc"/>
         <Abbreviation name="Spir" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Spir.desc"/>
         <Abbreviation name="Spt" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Spt.desc"/>
         <Abbreviation name="Sq" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sq.desc"/>
         <Abbreviation name="Src" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Src.desc"/>
         <Abbreviation name="Srfc" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Srfc.desc"/>
         <Abbreviation name="St" descID="IEC61850_7_4.Abbreviations::AbbrTermS.St.desc"/>
         <Abbreviation name="Sta" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sta.desc"/>
         <Abbreviation name="Stab" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stab.desc"/>
         <Abbreviation name="Stat" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stat.desc"/>
         <Abbreviation name="Stc" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stc.desc"/>
         <Abbreviation name="Std" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Std.desc"/>
         <Abbreviation name="Stdby" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stdby.desc"/>
         <Abbreviation name="Step" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Step.desc"/>
         <Abbreviation name="Stk" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stk.desc"/>
         <Abbreviation name="Stl" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stl.desc"/>
         <Abbreviation name="Stnd" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stnd.desc"/>
         <Abbreviation name="Sto" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sto.desc"/>
         <Abbreviation name="Stop" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stop.desc"/>
         <Abbreviation name="Storm" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Storm.desc"/>
         <Abbreviation name="Stow" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stow.desc"/>
         <Abbreviation name="Str" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Str.desc"/>
         <Abbreviation name="Strg" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Strg.desc"/>
         <Abbreviation name="Stt" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stt.desc"/>
         <Abbreviation name="Stuck" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Stuck.desc"/>
         <Abbreviation name="Sub" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sub.desc"/>
         <Abbreviation name="Sum" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sum.desc"/>
         <Abbreviation name="Sup" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sup.desc"/>
         <Abbreviation name="Sv" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sv.desc"/>
         <Abbreviation name="SvCBRef"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermS.SvCBRef.desc"/>
         <Abbreviation name="Svc" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Svc.desc"/>
         <Abbreviation name="Sw" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sw.desc"/>
         <Abbreviation name="Swg" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Swg.desc"/>
         <Abbreviation name="Swl" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Swl.desc"/>
         <Abbreviation name="Syn" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Syn.desc"/>
         <Abbreviation name="Sys" descID="IEC61850_7_4.Abbreviations::AbbrTermS.Sys.desc"/>
         <Abbreviation name="TP" descID="IEC61850_7_4.Abbreviations::AbbrTermT.TP.desc"/>
         <Abbreviation name="Ta" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Ta.desc"/>
         <Abbreviation name="Tag" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tag.desc"/>
         <Abbreviation name="Tap" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tap.desc"/>
         <Abbreviation name="Task" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Task.desc"/>
         <Abbreviation name="Td" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Td.desc"/>
         <Abbreviation name="Td0p" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Td0p.desc"/>
         <Abbreviation name="Td0s" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Td0s.desc"/>
         <Abbreviation name="Tdd" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tdd.desc"/>
         <Abbreviation name="Tdf" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tdf.desc"/>
         <Abbreviation name="Tdp" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tdp.desc"/>
         <Abbreviation name="Tds" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tds.desc"/>
         <Abbreviation name="Tech" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tech.desc"/>
         <Abbreviation name="Term" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Term.desc"/>
         <Abbreviation name="Test" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Test.desc"/>
         <Abbreviation name="Tgt" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tgt.desc"/>
         <Abbreviation name="Thd" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Thd.desc"/>
         <Abbreviation name="Thm" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Thm.desc"/>
         <Abbreviation name="Ti" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Ti.desc"/>
         <Abbreviation name="Tilt" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tilt.desc"/>
         <Abbreviation name="Tm" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tm.desc"/>
         <Abbreviation name="Tm1" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tm1.desc"/>
         <Abbreviation name="Tm2" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tm2.desc"/>
         <Abbreviation name="Tm3" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tm3.desc"/>
         <Abbreviation name="Tmh" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tmh.desc"/>
         <Abbreviation name="Tmm" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tmm.desc"/>
         <Abbreviation name="Tmms" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tmms.desc"/>
         <Abbreviation name="Tmp" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tmp.desc"/>
         <Abbreviation name="Tms" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tms.desc"/>
         <Abbreviation name="Tnk" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tnk.desc"/>
         <Abbreviation name="Tns" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tns.desc"/>
         <Abbreviation name="Top" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Top.desc"/>
         <Abbreviation name="Topo" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Topo.desc"/>
         <Abbreviation name="Torq" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Torq.desc"/>
         <Abbreviation name="Tot" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tot.desc"/>
         <Abbreviation name="Tow" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tow.desc"/>
         <Abbreviation name="Tp" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tp.desc"/>
         <Abbreviation name="Tpc" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tpc.desc"/>
         <Abbreviation name="Tpy" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tpy.desc"/>
         <Abbreviation name="Tq0p" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tq0p.desc"/>
         <Abbreviation name="Tq0s" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tq0s.desc"/>
         <Abbreviation name="Tqp" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tqp.desc"/>
         <Abbreviation name="Tqs" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tqs.desc"/>
         <Abbreviation name="Tr" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tr.desc"/>
         <Abbreviation name="Trf" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Trf.desc"/>
         <Abbreviation name="Trg" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Trg.desc"/>
         <Abbreviation name="Trip" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Trip.desc"/>
         <Abbreviation name="Trk" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Trk.desc"/>
         <Abbreviation name="Trp" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Trp.desc"/>
         <Abbreviation name="Trs" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Trs.desc"/>
         <Abbreviation name="Trunk" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Trunk.desc"/>
         <Abbreviation name="Ts" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Ts.desc"/>
         <Abbreviation name="Tu" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tu.desc"/>
         <Abbreviation name="Tun" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tun.desc"/>
         <Abbreviation name="Tur" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tur.desc"/>
         <Abbreviation name="Tx" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Tx.desc"/>
         <Abbreviation name="Typ" descID="IEC61850_7_4.Abbreviations::AbbrTermT.Typ.desc"/>
         <Abbreviation name="UPS" descID="IEC61850_7_4.Abbreviations::AbbrTermU.UPS.desc"/>
         <Abbreviation name="UTC" descID="IEC61850_7_4.Abbreviations::AbbrTermU.UTC.desc"/>
         <Abbreviation name="Uhf" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Uhf.desc"/>
         <Abbreviation name="Un" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Un.desc"/>
         <Abbreviation name="Unav" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Unav.desc"/>
         <Abbreviation name="Unb" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Unb.desc"/>
         <Abbreviation name="Unld" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Unld.desc"/>
         <Abbreviation name="Unt" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Unt.desc"/>
         <Abbreviation name="Up" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Up.desc"/>
         <Abbreviation name="Ups" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Ups.desc"/>
         <Abbreviation name="Urcb" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Urcb.desc"/>
         <Abbreviation name="Use" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Use.desc"/>
         <Abbreviation name="Used" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Used.desc"/>
         <Abbreviation name="Usvcb" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Usvcb.desc"/>
         <Abbreviation name="Util" descID="IEC61850_7_4.Abbreviations::AbbrTermU.Util.desc"/>
         <Abbreviation name="V" descID="IEC61850_7_4.Abbreviations::AbbrTermV.V.desc"/>
         <Abbreviation name="V1" descID="IEC61850_7_4.Abbreviations::AbbrTermV.V1.desc"/>
         <Abbreviation name="V2" descID="IEC61850_7_4.Abbreviations::AbbrTermV.V2.desc"/>
         <Abbreviation name="VA" descID="IEC61850_7_4.Abbreviations::AbbrTermV.VA.desc"/>
         <Abbreviation name="VAh" descID="IEC61850_7_4.Abbreviations::AbbrTermV.VAh.desc"/>
         <Abbreviation name="VAr" descID="IEC61850_7_4.Abbreviations::AbbrTermV.VAr.desc"/>
         <Abbreviation name="VArh" descID="IEC61850_7_4.Abbreviations::AbbrTermV.VArh.desc"/>
         <Abbreviation name="Va" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Va.desc"/>
         <Abbreviation name="Vac" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vac.desc"/>
         <Abbreviation name="Val" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Val.desc"/>
         <Abbreviation name="Vbr" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vbr.desc"/>
         <Abbreviation name="Ver" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Ver.desc"/>
         <Abbreviation name="Viol" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Viol.desc"/>
         <Abbreviation name="Vis" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vis.desc"/>
         <Abbreviation name="Visc" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Visc.desc"/>
         <Abbreviation name="Vlan" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vlan.desc"/>
         <Abbreviation name="Vld" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vld.desc"/>
         <Abbreviation name="Vlm" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vlm.desc"/>
         <Abbreviation name="Vlv" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vlv.desc"/>
         <Abbreviation name="Vol" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vol.desc"/>
         <Abbreviation name="VolAmpr"
                    descID="IEC61850_7_4.Abbreviations::AbbrTermV.VolAmpr.desc"/>
         <Abbreviation name="Vss" descID="IEC61850_7_4.Abbreviations::AbbrTermV.Vss.desc"/>
         <Abbreviation name="W" descID="IEC61850_7_4.Abbreviations::AbbrTermW.W.desc"/>
         <Abbreviation name="W200" descID="IEC61850_7_4.Abbreviations::AbbrTermW.W200.desc"/>
         <Abbreviation name="Wac" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wac.desc"/>
         <Abbreviation name="Wash" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wash.desc"/>
         <Abbreviation name="Watt" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Watt.desc"/>
         <Abbreviation name="Wav" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wav.desc"/>
         <Abbreviation name="Wd" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wd.desc"/>
         <Abbreviation name="Week" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Week.desc"/>
         <Abbreviation name="Wei" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wei.desc"/>
         <Abbreviation name="Wet" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wet.desc"/>
         <Abbreviation name="Wgt" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wgt.desc"/>
         <Abbreviation name="Wh" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wh.desc"/>
         <Abbreviation name="Wid" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wid.desc"/>
         <Abbreviation name="Win" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Win.desc"/>
         <Abbreviation name="Wkup" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wkup.desc"/>
         <Abbreviation name="Wld" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wld.desc"/>
         <Abbreviation name="Wnd" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wnd.desc"/>
         <Abbreviation name="Wrm" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wrm.desc"/>
         <Abbreviation name="Wrn" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wrn.desc"/>
         <Abbreviation name="Wrs" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wrs.desc"/>
         <Abbreviation name="Wtr" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wtr.desc"/>
         <Abbreviation name="Wup" descID="IEC61850_7_4.Abbreviations::AbbrTermW.Wup.desc"/>
         <Abbreviation name="X" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.X.desc"/>
         <Abbreviation name="X0" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.X0.desc"/>
         <Abbreviation name="X1" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.X1.desc"/>
         <Abbreviation name="X2" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.X2.desc"/>
         <Abbreviation name="Xd" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xd.desc"/>
         <Abbreviation name="Xdir" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xdir.desc"/>
         <Abbreviation name="Xdp" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xdp.desc"/>
         <Abbreviation name="Xds" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xds.desc"/>
         <Abbreviation name="Xm" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xm.desc"/>
         <Abbreviation name="Xq" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xq.desc"/>
         <Abbreviation name="Xqp" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xqp.desc"/>
         <Abbreviation name="Xqs" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xqs.desc"/>
         <Abbreviation name="Xsec" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Xsec.desc"/>
         <Abbreviation name="Ydir" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Ydir.desc"/>
         <Abbreviation name="Yw" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Yw.desc"/>
         <Abbreviation name="Z" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Z.desc"/>
         <Abbreviation name="Zer" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Zer.desc"/>
         <Abbreviation name="Zero" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Zero.desc"/>
         <Abbreviation name="Zm" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Zm.desc"/>
         <Abbreviation name="Zn" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Zn.desc"/>
         <Abbreviation name="Zro" descID="IEC61850_7_4.Abbreviations::AbbrTermsXYZ.Zro.desc"/>
         <Abbreviation name="km" descID="IEC61850_7_4.Abbreviations::AbbrTermJK.km.desc"/>
         <Abbreviation name="ppm" descID="IEC61850_7_4.Abbreviations::AbbrTermP.ppm.desc"/>
      </Abbreviations>
   <Enumerations>
         <Enumeration name="AdjustmentKind"
                   titleID="IEC61850_7_4.DOEnums::AdjustmentKind.cl.title">
            <Literal name="Completed" literalVal="1"/>
            <Literal name="Cancelled" literalVal="2"/>
            <Literal name="New adjustments" literalVal="3"/>
            <Literal name="Under way" literalVal="4"/>
         </Enumeration>
         <Enumeration name="AffectedPhasesKind"
                   titleID="IEC61850_7_4.DOEnums::AffectedPhasesKind.cl.title">
            <Literal name="PhaseA" literalVal="1"/>
            <Literal name="PhaseB" literalVal="2"/>
            <Literal name="PhaseAB" literalVal="3"/>
            <Literal name="PhaseC" literalVal="4"/>
            <Literal name="PhaseAC" literalVal="5"/>
            <Literal name="PhaseBC" literalVal="6"/>
            <Literal name="PhaseABC" literalVal="7"/>
            <Literal name="None" literalVal="8"/>
         </Enumeration>
         <Enumeration name="AutoReclosingKind"
                   titleID="IEC61850_7_4.DOEnums::AutoReclosingKind.cl.title">
            <Literal name="Ready" literalVal="1"/>
            <Literal name="InProgress" literalVal="2" deprecated="true"/>
            <Literal name="Successful" literalVal="3"/>
            <Literal name="WaitingForTrip" literalVal="4"/>
            <Literal name="TripFromProtection" literalVal="5"/>
            <Literal name="FaultDisappeared" literalVal="6"/>
            <Literal name="WaitToComplete" literalVal="7"/>
            <Literal name="CBclosed" literalVal="8"/>
            <Literal name="CycleUnsuccessful" literalVal="9"/>
            <Literal name="Unsuccessful" literalVal="10"/>
            <Literal name="Aborted" literalVal="11"/>
            <Literal name="NotReady" literalVal="12"/>
         </Enumeration>
         <Enumeration name="BehaviourModeKind"
                   titleID="IEC61850_7_4.DOEnums::BehaviourModeKind.cl.title">
            <Literal name="on" literalVal="1"/>
            <Literal name="blocked" literalVal="2"/>
            <Literal name="test" literalVal="3"/>
            <Literal name="test/blocked" literalVal="4"/>
            <Literal name="off" literalVal="5"/>
         </Enumeration>
         <Enumeration name="BreakerOpCapabilityKind"
                   titleID="IEC61850_7_4.DOEnums::BreakerOpCapabilityKind.cl.title">
            <Literal name="None" literalVal="1"/>
            <Literal name="Open" literalVal="2"/>
            <Literal name="Close-Open" literalVal="3"/>
            <Literal name="Open-Close-Open" literalVal="4"/>
            <Literal name="Close-Open-Close-Open" literalVal="5"/>
            <Literal name="Open-Close-Open-Close-Open" literalVal="6"/>
            <Literal name="more" literalVal="7"/>
         </Enumeration>
         <Enumeration name="CalcIntervalKind"
                   titleID="IEC61850_7_4.DOEnums::CalcIntervalKind.cl.title">
            <Literal name="MS" literalVal="1"/>
            <Literal name="PER_CYCLE" literalVal="2"/>
            <Literal name="CYCLE" literalVal="3"/>
            <Literal name="DAY" literalVal="4"/>
            <Literal name="WEEK" literalVal="5"/>
            <Literal name="MONTH" literalVal="6"/>
            <Literal name="YEAR" literalVal="7"/>
            <Literal name="EXTERNAL" literalVal="8"/>
         </Enumeration>
         <Enumeration name="CalcMethodKind"
                   titleID="IEC61850_7_4.DOEnums::CalcMethodKind.cl.title">
            <Literal name="UNSPECIFIED"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.UNSPECIFIED.desc"/>
            <Literal name="TRUE_RMS"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.TRUE_RMS.desc"/>
            <Literal name="PEAK_FUNDAMENTAL"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.PEAK_FUNDAMENTAL.desc"/>
            <Literal name="RMS_FUNDAMENTAL"
                  literalVal="4"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.RMS_FUNDAMENTAL.desc"/>
            <Literal name="MIN"
                  literalVal="5"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.MIN.desc"/>
            <Literal name="MAX"
                  literalVal="6"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.MAX.desc"/>
            <Literal name="AVG"
                  literalVal="7"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.AVG.desc"/>
            <Literal name="SDV"
                  literalVal="8"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.SDV.desc"/>
            <Literal name="PREDICTION"
                  literalVal="9"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.PREDICTION.desc"
                  deprecated="true"/>
            <Literal name="RATE"
                  literalVal="10"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.RATE.desc"
                  deprecated="true"/>
            <Literal name="P-CLASS"
                  literalVal="11"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.P-CLASS.desc"/>
            <Literal name="M-CLASS"
                  literalVal="12"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.M-CLASS.desc"/>
            <Literal name="DIFF"
                  literalVal="13"
                  descID="IEC61850_7_4.DOEnums::CalcMethodKind.DIFF.desc"/>
         </Enumeration>
         <Enumeration name="CalcModeKind"
                   titleID="IEC61850_7_4.DOEnums::CalcModeKind.cl.title">
            <Literal name="TOTAL"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::CalcModeKind.TOTAL.desc"/>
            <Literal name="PERIOD"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::CalcModeKind.PERIOD.desc"/>
            <Literal name="SLIDING"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::CalcModeKind.SLIDING.desc"/>
         </Enumeration>
         <Enumeration name="ClockSourceKind"
                   titleID="IEC61850_7_4.DOEnums::ClockSourceKind.cl.title">
            <Literal name="Unknown" literalVal="1"/>
            <Literal name="SNTP" literalVal="2"/>
            <Literal name="PTP" literalVal="3"/>
            <Literal name="IRIG-B" literalVal="4"/>
            <Literal name="Substation internal" literalVal="5"/>
         </Enumeration>
         <Enumeration name="ClockSyncKind"
                   titleID="IEC61850_7_4.DOEnums::ClockSyncKind.cl.title">
            <Literal name="InternalClock" literalVal="1"/>
            <Literal name="LocalAreaClock" literalVal="2"/>
            <Literal name="GlobalAreaClock"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::ClockSyncKind.GlobalAreaClock.desc"/>
         </Enumeration>
         <Enumeration name="ClockSyncLockingKind"
                   titleID="IEC61850_7_4.DOEnums::ClockSyncLockingKind.cl.title">
            <Literal name="Locked"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::ClockSyncLockingKind.Locked.desc"/>
            <Literal name="Unlocked10s"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::ClockSyncLockingKind.Unlocked10s.desc"/>
            <Literal name="Unlocked100s"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::ClockSyncLockingKind.Unlocked100s.desc"/>
            <Literal name="Unlocked1000s"
                  literalVal="4"
                  descID="IEC61850_7_4.DOEnums::ClockSyncLockingKind.Unlocked1000s.desc"/>
            <Literal name="UnlockedMoreThan1000s"
                  literalVal="5"
                  descID="IEC61850_7_4.DOEnums::ClockSyncLockingKind.UnlockedMoreThan1000s.desc"/>
         </Enumeration>
         <Enumeration name="DirectionModeKind"
                   titleID="IEC61850_7_4.DOEnums::DirectionModeKind.cl.title">
            <Literal name="NonDirectional" literalVal="1"/>
            <Literal name="Forward" literalVal="2"/>
            <Literal name="Reverse" literalVal="3"/>
         </Enumeration>
         <Enumeration name="FailureDetectionKind"
                   titleID="IEC61850_7_4.DOEnums::FailureDetectionKind.cl.title">
            <Literal name="Current" literalVal="1"/>
            <Literal name="Breaker Status" literalVal="2"/>
            <Literal name="Both current and breaker status" literalVal="3"/>
            <Literal name="Other" literalVal="4"/>
         </Enumeration>
         <Enumeration name="FaultLoopKind"
                   titleID="IEC61850_7_4.DOEnums::FaultLoopKind.cl.title">
            <Literal name="PhaseAtoGround"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::FaultLoopKind.PhaseAtoGround.desc"/>
            <Literal name="PhaseBtoGround"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::FaultLoopKind.PhaseBtoGround.desc"/>
            <Literal name="PhaseCtoGround"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::FaultLoopKind.PhaseCtoGround.desc"/>
            <Literal name="PhaseAtoB"
                  literalVal="4"
                  descID="IEC61850_7_4.DOEnums::FaultLoopKind.PhaseAtoB.desc"/>
            <Literal name="PhaseBtoC"
                  literalVal="5"
                  descID="IEC61850_7_4.DOEnums::FaultLoopKind.PhaseBtoC.desc"/>
            <Literal name="PhaseCtoA"
                  literalVal="6"
                  descID="IEC61850_7_4.DOEnums::FaultLoopKind.PhaseCtoA.desc"/>
            <Literal name="Others" literalVal="7"/>
         </Enumeration>
         <Enumeration name="FaultMeasuredValueTypeKind"
                   titleID="IEC61850_7_4.DOEnums::FaultMeasuredValueTypeKind.cl.title">
            <Literal name="At Start Moment" literalVal="1"/>
            <Literal name="At Trip Moment" literalVal="2"/>
            <Literal name="Peak Fault Value" literalVal="3"/>
         </Enumeration>
         <Enumeration name="FilterFunctionKind"
                   titleID="IEC61850_7_4.DOEnums::FilterFunctionKind.cl.title">
            <Literal name="Low pass" literalVal="1"/>
            <Literal name="High pass" literalVal="2"/>
            <Literal name="Bandpass" literalVal="3"/>
            <Literal name="Bandstop" literalVal="4"/>
            <Literal name="Deadband" literalVal="5"/>
         </Enumeration>
         <Enumeration name="FuseFunctionKind"
                   titleID="IEC61850_7_4.DOEnums::FuseFunctionKind.cl.title">
            <Literal name="Slow time delay"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::FuseFunctionKind.Slow_time_delay.desc"/>
            <Literal name="Fast time delay"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::FuseFunctionKind.Fast_time_delay.desc"/>
            <Literal name="Fast acting"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::FuseFunctionKind.Fast_acting.desc"/>
            <Literal name="Very fast acting"
                  literalVal="4"
                  descID="IEC61850_7_4.DOEnums::FuseFunctionKind.Very_fast_acting.desc"/>
            <Literal name="Not applicable / Unknown" literalVal="98"/>
            <Literal name="Other" literalVal="99"/>
         </Enumeration>
         <Enumeration name="HealthKind" titleID="IEC61850_7_4.DOEnums::HealthKind.cl.title">
            <Literal name="Ok"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::HealthKind.Ok.desc"/>
            <Literal name="Warning"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::HealthKind.Warning.desc"/>
            <Literal name="Alarm"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::HealthKind.Alarm.desc"/>
         </Enumeration>
         <Enumeration name="InstrumentTransformerMeasurementRatingKind"
                   titleID="IEC61850_7_4.DOEnums::InstrumentTransformerMeasurementRatingKind.cl.title">
            <Literal name="0.05" literalVal="1"/>
            <Literal name="0.1" literalVal="2"/>
            <Literal name="0.2" literalVal="3"/>
            <Literal name="0.2S" literalVal="4"/>
            <Literal name="0.5" literalVal="5"/>
            <Literal name="0.5S" literalVal="6"/>
            <Literal name="1" literalVal="7"/>
            <Literal name="3" literalVal="8"/>
            <Literal name="5" literalVal="9"/>
         </Enumeration>
         <Enumeration name="InstrumentTransformerProtectionRatingKind"
                   titleID="IEC61850_7_4.DOEnums::InstrumentTransformerProtectionRatingKind.cl.title">
            <Literal name="1" literalVal="1"/>
            <Literal name="2" literalVal="2"/>
            <Literal name="3" literalVal="3"/>
            <Literal name="5" literalVal="4"/>
            <Literal name="6" literalVal="5"/>
            <Literal name="10" literalVal="6"/>
         </Enumeration>
         <Enumeration name="LeapSecondKind"
                   titleID="IEC61850_7_4.DOEnums::LeapSecondKind.cl.title">
            <Literal name="Unknown" literalVal="1"/>
            <Literal name="Normal Time" literalVal="2"/>
            <Literal name="Last minute of the day has 61 seconds" literalVal="3"/>
            <Literal name="Last minute of the day has 59 seconds" literalVal="4"/>
         </Enumeration>
         <Enumeration name="LevelTriggerModeKind"
                   titleID="IEC61850_7_4.DOEnums::LevelTriggerModeKind.cl.title">
            <Literal name="Positive or Rising" literalVal="1"/>
            <Literal name="Negative or Falling" literalVal="2"/>
            <Literal name="Both" literalVal="3"/>
            <Literal name="Other" literalVal="4"/>
         </Enumeration>
         <Enumeration name="LiveDeadModeKind"
                   titleID="IEC61850_7_4.DOEnums::LiveDeadModeKind.cl.title">
            <Literal name="Dead Line, Dead Bus" literalVal="1"/>
            <Literal name="Live Line, Dead Bus" literalVal="2"/>
            <Literal name="Dead Line, Live Bus" literalVal="3"/>
            <Literal name="Dead Line, Dead Bus OR Live Line, Dead Bus" literalVal="4"/>
            <Literal name="Dead Line, Dead Bus OR Dead Line, Live Bus" literalVal="5"/>
            <Literal name="Live Line, Dead Bus OR Dead Line, Live Bus" literalVal="6"/>
            <Literal name="Dead Line, Dead Bus OR Live Line, Dead Bus OR Dead Line, Live Bus"
                  literalVal="7"/>
         </Enumeration>
         <Enumeration name="MaterialKind"
                   titleID="IEC61850_7_4.DOEnums::MaterialKind.cl.title">
            <Literal name="Air" literalVal="1"/>
            <Literal name="Water" literalVal="2"/>
            <Literal name="Steam" literalVal="3"/>
            <Literal name="Oil" literalVal="4"/>
            <Literal name="Hydrogen" literalVal="5"/>
            <Literal name="Natural gas" literalVal="6"/>
            <Literal name="Butane" literalVal="7"/>
            <Literal name="Propane" literalVal="8"/>
            <Literal name="Waste gas" literalVal="9"/>
            <Literal name="Not applicable / Unknown" literalVal="98"/>
            <Literal name="Other" literalVal="99"/>
         </Enumeration>
         <Enumeration name="MaterialStateKind"
                   titleID="IEC61850_7_4.DOEnums::MaterialStateKind.cl.title">
            <Literal name="Gaseous"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::MaterialStateKind.Gaseous.desc"/>
            <Literal name="Liquid"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::MaterialStateKind.Liquid.desc"/>
            <Literal name="Solid"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::MaterialStateKind.Solid.desc"/>
            <Literal name="Not applicable / Unknown" literalVal="98"/>
            <Literal name="Other" literalVal="99"/>
         </Enumeration>
         <Enumeration name="PFSignKind" titleID="IEC61850_7_4.DOEnums::PFSignKind.cl.title">
            <Literal name="IEC"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::PFSignKind.IEC.desc"/>
            <Literal name="EEI"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::PFSignKind.EEI.desc"/>
         </Enumeration>
         <Enumeration name="PIDAlgorithmKind"
                   titleID="IEC61850_7_4.DOEnums::PIDAlgorithmKind.cl.title">
            <Literal name="P" literalVal="1"/>
            <Literal name="I" literalVal="2"/>
            <Literal name="D" literalVal="3"/>
            <Literal name="PI" literalVal="4"/>
            <Literal name="PD" literalVal="5"/>
            <Literal name="ID" literalVal="6"/>
            <Literal name="PID" literalVal="7"/>
         </Enumeration>
         <Enumeration name="POWSwitchingCapabilityKind"
                   titleID="IEC61850_7_4.DOEnums::POWSwitchingCapabilityKind.cl.title">
            <Literal name="None" literalVal="1"/>
            <Literal name="Close" literalVal="2"/>
            <Literal name="Open" literalVal="3"/>
            <Literal name="Close and Open" literalVal="4"/>
         </Enumeration>
         <Enumeration name="ParallelCoilModeKind"
                   titleID="IEC61850_7_4.DOEnums::ParallelCoilModeKind.cl.title">
            <Literal name="Master/Slave" literalVal="1"/>
            <Literal name="Master/Slave with fixed slave position" literalVal="2"/>
            <Literal name="Master/Slave with variable slave position" literalVal="3"/>
            <Literal name="Parallel operation without communication" literalVal="4"/>
         </Enumeration>
         <Enumeration name="ParallelCtrlModeKind"
                   titleID="IEC61850_7_4.DOEnums::ParallelCtrlModeKind.cl.title">
            <Literal name="Master" literalVal="1"/>
            <Literal name="Slave" literalVal="2"/>
            <Literal name="Independent" literalVal="3"/>
         </Enumeration>
         <Enumeration name="ParallelTransfModeKind"
                   titleID="IEC61850_7_4.DOEnums::ParallelTransfModeKind.cl.title">
            <Literal name="No Mode predefined" literalVal="1"/>
            <Literal name="Master" literalVal="2"/>
            <Literal name="Follower" literalVal="3"/>
            <Literal name="Power Factor" literalVal="4"/>
            <Literal name="Negative Reactance" literalVal="5"/>
            <Literal name="Circulating Current" literalVal="6"/>
            <Literal name="Circulating Reactive Current (var balancing)" literalVal="7"/>
            <Literal name="Circulating Reactive Current by equalizing power factor"
                  literalVal="8"
                  descID="IEC61850_7_4.DOEnums::ParallelTransfModeKind.Circulating_Reactive_Current_by_equalizing_power_factor.desc"/>
         </Enumeration>
         <Enumeration name="PolarizingQuantityKind"
                   titleID="IEC61850_7_4.DOEnums::PolarizingQuantityKind.cl.title">
            <Literal name="None" literalVal="1"/>
            <Literal name="Zero Sequence Current" literalVal="2"/>
            <Literal name="Zero Sequence Voltage" literalVal="3"/>
            <Literal name="Negative Sequence Voltage" literalVal="4"/>
            <Literal name="Phase to Phase Voltages"
                  literalVal="5"
                  descID="IEC61850_7_4.DOEnums::PolarizingQuantityKind.Phase_to_Phase_Voltages.desc"/>
            <Literal name="Phase to Ground Voltages" literalVal="6"/>
            <Literal name="Positive sequence voltage" literalVal="7"/>
         </Enumeration>
         <Enumeration name="RecordingModeKind"
                   titleID="IEC61850_7_4.DOEnums::RecordingModeKind.cl.title">
            <Literal name="Overwrite existing values" literalVal="1"/>
            <Literal name="Stop when full or saturated" literalVal="2"/>
         </Enumeration>
         <Enumeration name="RectifierControlModeKind"
                   titleID="IEC61850_7_4.DOEnums::RectifierControlModeKind.cl.title">
            <Literal name="Current" literalVal="1"/>
            <Literal name="Voltage" literalVal="2"/>
            <Literal name="Active Power" literalVal="3"/>
         </Enumeration>
         <Enumeration name="ResetCurveKind"
                   titleID="IEC61850_7_4.DOEnums::ResetCurveKind.cl.title">
            <Literal name="None" literalVal="1"/>
            <Literal name="Definite Time Delayed Reset" literalVal="2"/>
            <Literal name="Inverse Reset" literalVal="3"/>
         </Enumeration>
         <Enumeration name="RestraintModeKind"
                   titleID="IEC61850_7_4.DOEnums::RestraintModeKind.cl.title">
            <Literal name="None" literalVal="1"/>
            <Literal name="Harmonic2" literalVal="2"/>
            <Literal name="Harmonic5" literalVal="3"/>
            <Literal name="Harmonic2and5" literalVal="4"/>
            <Literal name="WaveformAnalysis" literalVal="5"/>
            <Literal name="WaveformAnalysisAndHarmonic2" literalVal="6"/>
            <Literal name="Other" literalVal="7"/>
            <Literal name="WaveformAnalysisAndHarmonic5" literalVal="8"/>
            <Literal name="WaveformAnalysisAndHarmonic2AndHarmonic5" literalVal="9"/>
         </Enumeration>
         <Enumeration name="RetripModeKind"
                   titleID="IEC61850_7_4.DOEnums::RetripModeKind.cl.title">
            <Literal name="Off" literalVal="1"/>
            <Literal name="Without Check" literalVal="2"/>
            <Literal name="With Current Check" literalVal="3"/>
            <Literal name="With Breaker Status Check" literalVal="4"/>
            <Literal name="With Current and Breaker Status Check" literalVal="5"/>
            <Literal name="Other Checks" literalVal="6"/>
         </Enumeration>
         <Enumeration name="RotatingMachineStateKind"
                   titleID="IEC61850_7_4.DOEnums::RotatingMachineStateKind.cl.title">
            <Literal name="Stopped"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::RotatingMachineStateKind.Stopped.desc"/>
            <Literal name="Stopping" literalVal="2"/>
            <Literal name="Started"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::RotatingMachineStateKind.Started.desc"/>
            <Literal name="Starting" literalVal="4"/>
            <Literal name="Disabled" literalVal="5"/>
         </Enumeration>
         <Enumeration name="RotationalDirectionKind"
                   titleID="IEC61850_7_4.DOEnums::RotationalDirectionKind.cl.title">
            <Literal name="Clockwise" literalVal="1"/>
            <Literal name="Counter-Clockwise" literalVal="2"/>
            <Literal name="Unknown" literalVal="3"/>
         </Enumeration>
         <Enumeration name="RotorThermalStateKind"
                   titleID="IEC61850_7_4.DOEnums::RotorThermalStateKind.cl.title">
            <Literal name="Cold" literalVal="1"/>
            <Literal name="Warm" literalVal="2"/>
            <Literal name="Overload" literalVal="3"/>
         </Enumeration>
         <Enumeration name="SOFEnablingModeKind"
                   titleID="IEC61850_7_4.DOEnums::SOFEnablingModeKind.cl.title">
            <Literal name="SwitchCommand"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::SOFEnablingModeKind.SwitchCommand.desc"/>
            <Literal name="BreakerClosed"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::SOFEnablingModeKind.BreakerClosed.desc"/>
            <Literal name="VoltageAndCurrentLevel"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::SOFEnablingModeKind.VoltageAndCurrentLevel.desc"/>
         </Enumeration>
         <Enumeration name="SOFOperationModeKind"
                   titleID="IEC61850_7_4.DOEnums::SOFOperationModeKind.cl.title">
            <Literal name="ExternalSignal"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::SOFOperationModeKind.ExternalSignal.desc"/>
            <Literal name="VoltageAndCurrent"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::SOFOperationModeKind.VoltageAndCurrent.desc"/>
            <Literal name="ExternalSignal or VoltageAndCurrent" literalVal="3"/>
         </Enumeration>
         <Enumeration name="STotalCalcMethodKind"
                   titleID="IEC61850_7_4.DOEnums::STotalCalcMethodKind.cl.title">
            <Literal name="Vector" literalVal="1"/>
            <Literal name="Arithmetic" literalVal="2"/>
         </Enumeration>
         <Enumeration name="ScheduleEnablingErrorKind"
                   titleID="IEC61850_7_4.DOEnums::ScheduleEnablingErrorKind.cl.title">
            <Literal name="None" literalVal="1"/>
            <Literal name="Missing valid NumEntr" literalVal="2"/>
            <Literal name="Missing valid SchdIntv" literalVal="3"/>
            <Literal name="Missing valid schedule values" literalVal="4"/>
            <Literal name="Inconsistent values CDC"
                  literalVal="5"
                  descID="IEC61850_7_4.DOEnums::ScheduleEnablingErrorKind.Inconsistent_values_CDC.desc"/>
            <Literal name="Missing valid StrTm"
                  literalVal="6"
                  descID="IEC61850_7_4.DOEnums::ScheduleEnablingErrorKind.Missing_valid_StrTm.desc"/>
            <Literal name="Other" literalVal="99"/>
         </Enumeration>
         <Enumeration name="ScheduleStateKind"
                   titleID="IEC61850_7_4.DOEnums::ScheduleStateKind.cl.title">
            <Literal name="Not ready" literalVal="1"/>
            <Literal name="Start Time required" literalVal="2"/>
            <Literal name="Ready" literalVal="3"/>
            <Literal name="Running" literalVal="4"/>
         </Enumeration>
         <Enumeration name="SetpointEndKind"
                   titleID="IEC61850_7_4.DOEnums::SetpointEndKind.cl.title">
            <Literal name="Ended normally" literalVal="1"/>
            <Literal name="Ended with overshoot" literalVal="2"/>
            <Literal name="Cancelled: measurement was deviating" literalVal="3"/>
            <Literal name="Cancelled: loss of communication with dispatch centre"
                  literalVal="4"/>
            <Literal name="Cancelled: loss of communication with local area network"
                  literalVal="5"/>
            <Literal name="Cancelled: loss of communication with the local interface"
                  literalVal="6"/>
            <Literal name="Cancelled: timeout" literalVal="7"/>
            <Literal name="Cancelled: voluntarily" literalVal="8"/>
            <Literal name="Cancelled: noisy environments" literalVal="9"/>
            <Literal name="Cancelled: material failure" literalVal="10"/>
            <Literal name="Cancelled: new set-point request" literalVal="11"/>
            <Literal name="Cancelled: improper environment (blockage)" literalVal="12"/>
            <Literal name="Cancelled: stability time was reached" literalVal="13"/>
            <Literal name="Cancelled: immobilisation time was reached" literalVal="14"/>
            <Literal name="Cancelled: equipment was in the wrong mode" literalVal="15"/>
            <Literal name="Unknown causes" literalVal="16"/>
         </Enumeration>
         <Enumeration name="StageControlKind"
                   titleID="IEC61850_7_4.DOEnums::StageControlKind.cl.title">
            <Literal name="Inactive" literalVal="1"/>
            <Literal name="Stage1" literalVal="2"/>
            <Literal name="Stage2" literalVal="3"/>
            <Literal name="Stage3" literalVal="4"/>
         </Enumeration>
         <Enumeration name="StrWeekDayKind"
                   titleID="IEC61850_7_4.DOEnums::StrWeekDayKind.cl.title">
            <Literal name="Monday"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::StrWeekDayKind.Monday.desc"/>
            <Literal name="Tuesday"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::StrWeekDayKind.Tuesday.desc"/>
            <Literal name="Wednesday"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::StrWeekDayKind.Wednesday.desc"/>
            <Literal name="Thursday"
                  literalVal="4"
                  descID="IEC61850_7_4.DOEnums::StrWeekDayKind.Thursday.desc"/>
            <Literal name="Friday"
                  literalVal="5"
                  descID="IEC61850_7_4.DOEnums::StrWeekDayKind.Friday.desc"/>
            <Literal name="Saturday"
                  literalVal="6"
                  descID="IEC61850_7_4.DOEnums::StrWeekDayKind.Saturday.desc"/>
            <Literal name="Sunday"
                  literalVal="7"
                  descID="IEC61850_7_4.DOEnums::StrWeekDayKind.Sunday.desc"/>
         </Enumeration>
         <Enumeration name="SwitchFunctionKind"
                   titleID="IEC61850_7_4.DOEnums::SwitchFunctionKind.cl.title">
            <Literal name="Load Break" literalVal="1"/>
            <Literal name="Disconnector" literalVal="2"/>
            <Literal name="Earthing Switch" literalVal="3"/>
            <Literal name="High Speed Earthing Switch" literalVal="4"/>
         </Enumeration>
         <Enumeration name="SwitchingCapabilityKind"
                   titleID="IEC61850_7_4.DOEnums::SwitchingCapabilityKind.cl.title">
            <Literal name="None" literalVal="1"/>
            <Literal name="Open" literalVal="2"/>
            <Literal name="Close" literalVal="3"/>
            <Literal name="Open and Close" literalVal="4"/>
         </Enumeration>
         <Enumeration name="SynchOperationModeKind"
                   titleID="IEC61850_7_4.DOEnums::SynchOperationModeKind.cl.title">
            <Literal name="Automatic-synchronizing"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::SynchOperationModeKind.Automatic-synchronizing.desc"/>
            <Literal name="Automatic-paralleling"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::SynchOperationModeKind.Automatic-paralleling.desc"/>
            <Literal name="Manual"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::SynchOperationModeKind.Manual.desc"/>
            <Literal name="Test"
                  literalVal="4"
                  descID="IEC61850_7_4.DOEnums::SynchOperationModeKind.Test.desc"/>
         </Enumeration>
         <Enumeration name="TankFillKind"
                   titleID="IEC61850_7_4.DOEnums::TankFillKind.cl.title">
            <Literal name="pressure only" literalVal="1"/>
            <Literal name="level only" literalVal="2"/>
            <Literal name="both pressure and level" literalVal="3"/>
         </Enumeration>
         <Enumeration name="TransientPerformanceClassKind"
                   titleID="IEC61850_7_4.DOEnums::TransientPerformanceClassKind.cl.title">
            <Literal name="Unknown" literalVal="1"/>
            <Literal name="P" literalVal="2"/>
            <Literal name="PR" literalVal="3"/>
            <Literal name="PX" literalVal="4"/>
            <Literal name="PXR" literalVal="5"/>
            <Literal name="TPX" literalVal="6"/>
            <Literal name="TPY" literalVal="7"/>
            <Literal name="TPZ" literalVal="8"/>
            <Literal name="TPE" literalVal="9"/>
            <Literal name="TPS" literalVal="10"/>
         </Enumeration>
         <Enumeration name="TpcAppModeKind"
                   titleID="IEC61850_7_4.DOEnums::TpcAppModeKind.cl.title">
            <Literal name="Unused" literalVal="1"/>
            <Literal name="Blocking" literalVal="2"/>
            <Literal name="Permissive" literalVal="3"/>
            <Literal name="Direct" literalVal="4"/>
            <Literal name="Unblocking" literalVal="5"/>
            <Literal name="Status" literalVal="6"/>
         </Enumeration>
         <Enumeration name="TriggerSourceKind"
                   titleID="IEC61850_7_4.DOEnums::TriggerSourceKind.cl.title">
            <Literal name="Internal" literalVal="1"/>
            <Literal name="External" literalVal="2"/>
            <Literal name="Both" literalVal="3"/>
         </Enumeration>
         <Enumeration name="TripBehaviourKind"
                   titleID="IEC61850_7_4.DOEnums::TripBehaviourKind.cl.title">
            <Literal name="Single Pole Tripping" literalVal="1"/>
            <Literal name="Undefined" literalVal="2"/>
            <Literal name="Three Pole Tripping" literalVal="3"/>
         </Enumeration>
         <Enumeration name="TripModeKind"
                   titleID="IEC61850_7_4.DOEnums::TripModeKind.cl.title">
            <Literal name="3 phase tripping"
                  literalVal="1"
                  descID="IEC61850_7_4.DOEnums::TripModeKind.3_phase_tripping.desc"/>
            <Literal name="1 or 3 phase tripping"
                  literalVal="2"
                  descID="IEC61850_7_4.DOEnums::TripModeKind.1_or_3_phase_tripping.desc"/>
            <Literal name="specific"
                  literalVal="3"
                  descID="IEC61850_7_4.DOEnums::TripModeKind.specific.desc"/>
            <Literal name="1 phase tripping"
                  literalVal="4"
                  descID="IEC61850_7_4.DOEnums::TripModeKind.1_phase_tripping.desc"/>
         </Enumeration>
         <Enumeration name="TuningKind" titleID="IEC61850_7_4.DOEnums::TuningKind.cl.title">
            <Literal name="Not tuned" literalVal="1"/>
            <Literal name="Tuned" literalVal="2"/>
            <Literal name="Tuned but not compensated" literalVal="3"/>
            <Literal name="Umax" literalVal="4"/>
            <Literal name="Umax but not compensated" literalVal="5"/>
            <Literal name="Umax but not compensated due to U continous limitation"
                  literalVal="6"/>
         </Enumeration>
         <Enumeration name="UnbalanceDetectionKind"
                   titleID="IEC61850_7_4.DOEnums::UnbalanceDetectionKind.cl.title">
            <Literal name="Negative sequence" literalVal="1"/>
            <Literal name="Zero sequence" literalVal="2"/>
            <Literal name="Neg-pos sequence" literalVal="3"/>
            <Literal name="Zero-pos sequence" literalVal="4"/>
            <Literal name="Phase vector comparison" literalVal="5"/>
            <Literal name="Others" literalVal="6"/>
         </Enumeration>
         <Enumeration name="UnblockModeKind"
                   titleID="IEC61850_7_4.DOEnums::UnblockModeKind.cl.title">
            <Literal name="Off" literalVal="1"/>
            <Literal name="Permanent" literalVal="2"/>
            <Literal name="Time window" literalVal="3"/>
         </Enumeration>
         <Enumeration name="VoltInterruptDetectionKind"
                   titleID="IEC61850_7_4.DOEnums::VoltInterruptDetectionKind.cl.title">
            <Literal name="Voltage" literalVal="1"/>
            <Literal name="Voltage and Current" literalVal="2"/>
            <Literal name="Voltage and Normally Open breaker contact" literalVal="3"/>
            <Literal name="Voltage and Normally Closed breaker contact" literalVal="4"/>
            <Literal name="Voltage and Normally Open and Normally Closed breaker contacts"
                  literalVal="5"/>
            <Literal name="Normally Open breaker contact" literalVal="6"/>
            <Literal name="Normally Closed breaker contact" literalVal="7"/>
            <Literal name="Both Normally Open and Normally Closed breaker contacts"
                  literalVal="8"/>
         </Enumeration>
         <Enumeration name="WeakEndInfeedModeKind"
                   titleID="IEC61850_7_4.DOEnums::WeakEndInfeedModeKind.cl.title">
            <Literal name="Off" literalVal="1"/>
            <Literal name="Operate" literalVal="2"/>
            <Literal name="Echo" literalVal="3"/>
            <Literal name="Echo and Operate" literalVal="4"/>
         </Enumeration>
      </Enumerations>
   <LNClasses>
         <AbstractLNClass name="DomainLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::DomainLN.cl.title">
            <DataObject name="NamPlt"
                     type="LPL"
                     descID="IEC61850_7_4.AbstractLNsCommon::DomainLN.NamPlt.desc"
                     presCond="MONamPlt"
                     presCondArgsID="IEC61850_7_4.AbstractLNsCommon::DomainLN__(_MONamPlt_=__((_NamPlt_))__)_.cond.AbstractLNsCommon::DomainLN.NamPlt"
                     dsPresCond="MONamPlt"
                     dsPresCondArgsID="IEC61850_7_4.AbstractLNsCommon::DomainLN__(_MONamPlt_=__((_NamPlt_))__)_.dsCond.AbstractLNsCommon::DomainLN.NamPlt"/>
            <DataObject name="Beh"
                     type="ENS"
                     underlyingType="BehaviourModeKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::DomainLN.Beh.desc"
                     presCond="M"
                     dsPresCond="M"/>
            <DataObject name="Health"
                     type="ENS"
                     underlyingType="HealthKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::DomainLN.Health.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Mir"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::DomainLN.Mir.desc"
                     presCond="MOcond"
                     presCondArgs="1"
                     presCondArgsID="IEC61850_7_4.AbstractLNsCommon::DomainLN__(_MOcond(1)_=__((_Mir_))__)_.cond.AbstractLNsCommon::DomainLN.Mir"
                     dsPresCond="MOcond"
                     dsPresCondArgs="1"
                     dsPresCondArgsID="IEC61850_7_4.AbstractLNsCommon::DomainLN__(_MOcond(1)_=__((_Mir_))__)_.dsCond.AbstractLNsCommon::DomainLN.Mir"/>
            <DataObject name="Mod"
                     type="ENC"
                     underlyingType="BehaviourModeKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::DomainLN.Mod.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InRef"
                     type="ORG"
                     descID="IEC61850_7_4.AbstractLNsCommon::DomainLN.InRef.desc"
                     presCond="Omulti"
                     dsPresCond="Omulti"/>
         </AbstractLNClass>
         <AbstractLNClass name="StatisticsLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.cl.title"
                       base="DomainLN">
            <DataObject name="ClcExp"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcExp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcNxtTmms"
                     type="INS"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcNxtTmms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcStr"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcStr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcMth"
                     type="ENG"
                     underlyingType="CalcMethodKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcMth.desc"
                     presCond="O"
                     dsPresCond="M"/>
            <DataObject name="ClcMod"
                     type="ENG"
                     underlyingType="CalcModeKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcMod.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcIntvTyp"
                     type="ENG"
                     underlyingType="CalcIntervalKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcIntvTyp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcIntvPer"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcIntvPer.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="NumSubIntv"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.NumSubIntv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcRfTyp"
                     type="ENG"
                     underlyingType="CalcIntervalKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcRfTyp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcRfPer"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcRfPer.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcSrc"
                     type="ORG"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.ClcSrc.desc"
                     presCond="F"
                     dsPresCond="M"/>
            <DataObject name="InSyn"
                     type="ORG"
                     descID="IEC61850_7_4.AbstractLNsCommon::StatisticsLN.InSyn.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="NonProcessInterfaceLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::NonProcessInterfaceLN.cl.title"
                       base="StatisticsLN">
            <DataObject name="EEName"
                     type="DPL"
                     descID="IEC61850_7_4.AbstractLNsCommon::NonProcessInterfaceLN.EEName.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EEHealth"
                     type="ENS"
                     underlyingType="HealthKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::NonProcessInterfaceLN.EEHealth.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmh"
                     type="INS"
                     descID="IEC61850_7_4.AbstractLNsCommon::NonProcessInterfaceLN.OpTmh.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="NonProcessControllingEquipmentInterfaceLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::NonProcessControllingEquipmentInterfaceLN.cl.title"
                       base="NonProcessInterfaceLN">
            <DataObject name="Loc"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::NonProcessControllingEquipmentInterfaceLN.Loc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LocKey"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::NonProcessControllingEquipmentInterfaceLN.LocKey.desc"
                     presCond="OF"
                     presCondArgs="Loc"
                     dsPresCond="F"/>
            <DataObject name="LocSta"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::NonProcessControllingEquipmentInterfaceLN.LocSta.desc"
                     presCond="OF"
                     presCondArgs="Loc"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="FunctionLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::FunctionLN.cl.title"
                       base="StatisticsLN">
            <DataObject name="Blk"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::FunctionLN.Blk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkRef"
                     type="ORG"
                     descID="IEC61850_7_4.AbstractLNsCommon::FunctionLN.BlkRef.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="EquipmentInterfaceLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::EquipmentInterfaceLN.cl.title"
                       base="FunctionLN">
            <DataObject name="EEName"
                     type="DPL"
                     descID="IEC61850_7_4.AbstractLNsCommon::EquipmentInterfaceLN.EEName.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EEHealth"
                     type="ENS"
                     underlyingType="HealthKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::EquipmentInterfaceLN.EEHealth.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmh"
                     type="INS"
                     descID="IEC61850_7_4.AbstractLNsCommon::EquipmentInterfaceLN.OpTmh.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="CmdEquipmentInterfaceLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::CmdEquipmentInterfaceLN.cl.title"
                       base="EquipmentInterfaceLN">
            <DataObject name="CmdBlk"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::CmdEquipmentInterfaceLN.CmdBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ControllingLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::ControllingLN.cl.title"
                       base="FunctionLN">
            <DataObject name="Loc"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControllingLN.Loc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LocKey"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControllingLN.LocKey.desc"
                     presCond="OF"
                     presCondArgs="Loc"
                     dsPresCond="F"/>
            <DataObject name="LocSta"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControllingLN.LocSta.desc"
                     presCond="OF"
                     presCondArgs="Loc"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ControlledLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::ControlledLN.cl.title"
                       base="ControllingLN">
            <DataObject name="CmdBlk"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControlledLN.CmdBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControlledLN.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="ControlEquipmentInterfaceLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::ControlEquipmentInterfaceLN.cl.title"
                       base="ControlledLN">
            <DataObject name="EEName"
                     type="DPL"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControlEquipmentInterfaceLN.EEName.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EEHealth"
                     type="ENS"
                     underlyingType="HealthKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControlEquipmentInterfaceLN.EEHealth.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmh"
                     type="INS"
                     descID="IEC61850_7_4.AbstractLNsCommon::ControlEquipmentInterfaceLN.OpTmh.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="AutomaticControlLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::AutomaticControlLN.cl.title"
                       base="ControlledLN">
            <DataObject name="Auto"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::AutomaticControlLN.Auto.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="SynchronisationLN"
                       titleID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.cl.title"
                       base="ControlledLN">
            <DataObject name="Rel"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.Rel.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="VInd"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.VInd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AngInd"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.AngInd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzInd"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.HzInd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifVClc"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifVClc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DifHzClc"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifHzClc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DifAngClc"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifAngClc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="V1Clc"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.V1Clc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="V2Clc"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.V2Clc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Hz1Clc"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.Hz1Clc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Hz2Clc"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.Hz2Clc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SynPrg"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.SynPrg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LivLivBlk"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.LivLivBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VAdpFact"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.VAdpFact.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AdpAngDeg"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.AdpAngDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifVNg"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifVNg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifVPs"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifVPs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifHzNg"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifHzNg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifHzPs"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifHzPs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifAngNg"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifAngNg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifAngPs"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DifAngPs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinVSyn"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.MinVSyn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxVSyn"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.MaxVSyn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DetSyn"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DetSyn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LivDeaMod"
                     type="ENG"
                     underlyingType="LiveDeadModeKind"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.LivDeaMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DeaLinVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DeaLinVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LivLinVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.LivLinVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DeaBusVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.DeaBusVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LivBusVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.LivBusVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TotTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsCommon::SynchronisationLN.TotTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="SubscriptionSupervisionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupL::SubscriptionSupervisionLN.cl.title"
                       base="DomainLN">
            <DataObject name="NdsCom"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupL::SubscriptionSupervisionLN.NdsCom.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="St"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupL::SubscriptionSupervisionLN.St.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="SimSt"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupL::SubscriptionSupervisionLN.SimSt.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="ConfRevNum"
                     type="INS"
                     descID="IEC61850_7_4.AbstractLNsGroupL::SubscriptionSupervisionLN.ConfRevNum.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="RxConfRevNum"
                     type="INS"
                     descID="IEC61850_7_4.AbstractLNsGroupL::SubscriptionSupervisionLN.RxConfRevNum.desc"
                     presCond="O"
                     dsPresCond="na"/>
         </AbstractLNClass>
         <AbstractLNClass name="FunctionOutputLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupF::FunctionOutputLN.cl.title"
                       base="FunctionLN">
            <DataObject name="Out"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupF::FunctionOutputLN.Out.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="ThresholdLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupF::ThresholdLN.cl.title"
                       base="FunctionLN">
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupF::ThresholdLN.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupF::ThresholdLN.StrVal.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupF::ThresholdLN.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrCrv"
                     type="CSG"
                     descID="IEC61850_7_4.AbstractLNsGroupF::ThresholdLN.StrCrv.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupF::ThresholdLN.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="EnergyLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.cl.title"
                       base="FunctionLN">
            <DataObject name="TotVAh"
                     type="BCR"
                     descID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.TotVAh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TotWh"
                     type="BCR"
                     descID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.TotWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TotVArh"
                     type="BCR"
                     descID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.TotVArh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SupWh"
                     type="BCR"
                     descID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.SupWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SupVArh"
                     type="BCR"
                     descID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.SupVArh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DmdWh"
                     type="BCR"
                     descID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.DmdWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DmdVArh"
                     type="BCR"
                     descID="IEC61850_7_4.AbstractLNsGroupM::EnergyLN.DmdVArh.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="HarmonicsLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.cl.title"
                       base="FunctionLN">
            <DataObject name="Hz"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.Hz.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="HzSet"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.HzSet.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="F"/>
            <DataObject name="EvTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.EvTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NumCyc"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.NumCyc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ThdAVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.ThdAVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ThdVVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.ThdVVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ThdATmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.ThdATmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ThdVTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.ThdVTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NomA"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupM::HarmonicsLN.NomA.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::ProtectionLN.cl.title"
                       base="FunctionLN">
            <DataObject name="FltPhV"
                     type="WYE"
                     descID="IEC61850_7_4.AbstractLNsGroupP::ProtectionLN.FltPhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FltA"
                     type="WYE"
                     descID="IEC61850_7_4.AbstractLNsGroupP::ProtectionLN.FltA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.AbstractLNsGroupP::ProtectionLN.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FltValTyp"
                     type="ENG"
                     underlyingType="FaultMeasuredValueTypeKind"
                     descID="IEC61850_7_4.AbstractLNsGroupP::ProtectionLN.FltValTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="CurrentProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="TmASt"
                     type="CSD"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.TmASt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="TmACrv"
                     type="CURVE"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.TmACrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmAChr"
                     type="CSG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.TmAChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
            <DataObject name="TmMult"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.TmMult.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.MinOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.MaxOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TypRsCrv"
                     type="ENG"
                     underlyingType="ResetCurveKind"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.TypRsCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::CurrentProtectionLN.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="EarthfaultProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::EarthfaultProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="FltIndRs"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsGroupP::EarthfaultProtectionLN.FltIndRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndStr"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::EarthfaultProtectionLN.GndStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DirMod"
                     type="ENG"
                     underlyingType="DirectionModeKind"
                     descID="IEC61850_7_4.AbstractLNsGroupP::EarthfaultProtectionLN.DirMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="FrequencyProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BlkV"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.BlkV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.BlkVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::FrequencyProtectionLN.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="GeneratorProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::GeneratorProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.AbstractLNsGroupP::GeneratorProtectionLN.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupP::GeneratorProtectionLN.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::GeneratorProtectionLN.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="MotorStartupProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::MotorStartupProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupP::MotorStartupProtectionLN.Op.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SetA"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::MotorStartupProtectionLN.SetA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SetTms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::MotorStartupProtectionLN.SetTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="PowerProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::PowerProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerProtectionLN.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerProtectionLN.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="DirMod"
                     type="ENG"
                     underlyingType="DirectionModeKind"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerProtectionLN.DirMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerProtectionLN.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerProtectionLN.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerProtectionLN.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="PowerFactorProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BlkA"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.BlkA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkV"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.BlkV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkValA"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.BlkValA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkValV"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::PowerFactorProtectionLN.BlkValV.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="VoltageProtectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.cl.title"
                       base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmMult"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.TmMult.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.MinOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.MaxOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupP::VoltageProtectionLN.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="PowerQualityLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupQ::PowerQualityLN.cl.title"
                       base="FunctionLN">
            <DataObject name="VaStr"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupQ::PowerQualityLN.VaStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VaEnd"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.AbstractLNsGroupQ::PowerQualityLN.VaEnd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EvtCnt"
                     type="HST"
                     descID="IEC61850_7_4.AbstractLNsGroupQ::PowerQualityLN.EvtCnt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.AbstractLNsGroupQ::PowerQualityLN.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="UnbalanceDetectionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupQ::UnbalanceDetectionLN.cl.title"
                       base="PowerQualityLN">
            <DataObject name="UnbDetMth"
                     type="ENG"
                     underlyingType="UnbalanceDetectionKind"
                     descID="IEC61850_7_4.AbstractLNsGroupQ::UnbalanceDetectionLN.UnbDetMth.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupQ::UnbalanceDetectionLN.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="RecorderLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupR::RecorderLN.cl.title"
                       base="FunctionLN">
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.AbstractLNsGroupR::RecorderLN.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TrgMod"
                     type="ENG"
                     underlyingType="TriggerSourceKind"
                     descID="IEC61850_7_4.AbstractLNsGroupR::RecorderLN.TrgMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LevMod"
                     type="ENG"
                     underlyingType="LevelTriggerModeKind"
                     descID="IEC61850_7_4.AbstractLNsGroupR::RecorderLN.LevMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PreTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupR::RecorderLN.PreTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PstTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupR::RecorderLN.PstTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="DRChannelLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupR::DRChannelLN.cl.title"
                       base="RecorderLN">
            <DataObject name="ChTrg"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupR::DRChannelLN.ChTrg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChNum"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupR::DRChannelLN.ChNum.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="SrcRef"
                     type="ORG"
                     descID="IEC61850_7_4.AbstractLNsGroupR::DRChannelLN.SrcRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="SupervisionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupS::SupervisionLN.cl.title"
                       base="FunctionLN">
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SupervisionLN.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="LineSupervisionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.cl.title"
                       base="SupervisionLN">
            <DataObject name="InsAlm"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.InsAlm.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InsBlk"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.InsBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InsTr"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.InsTr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InsLevMax"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.InsLevMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InsLevMin"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.InsLevMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Pres"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.Pres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Tmp"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::LineSupervisionLN.Tmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="SwitchgearSupervisionLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.cl.title"
                       base="SupervisionLN">
            <DataObject name="OpCntAlm"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpCntAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpCntWrn"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpCntWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmAlm"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmWrn"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MechHealth"
                     type="ENS"
                     underlyingType="HealthKind"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.MechHealth.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmOpnAlm"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmOpnAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmClsAlm"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmClsAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AccmAbr"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.AccmAbr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AuxSwTmOpn"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.AuxSwTmOpn.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AuxSwTmCls"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.AuxSwTmCls.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RctTmOpn"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.RctTmOpn.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RctTmCls"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.RctTmCls.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpSpdOpn"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpSpdOpn.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpSpdCls"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpSpdCls.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpTmOpn"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmOpn.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpTmCls"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmCls.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Stk"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.Stk.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OvStkOpn"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OvStkOpn.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OvStkCls"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OvStkCls.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ColA"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.ColA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Tmp"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.Tmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpAlmTmh"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpAlmTmh.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpWrnTmh"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpWrnTmh.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpAlmNum"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpAlmNum.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpWrnNum"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpWrnNum.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmOpnSet"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmOpnSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpTmClsSet"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupS::SwitchgearSupervisionLN.OpTmClsSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="InstrumentTransformerLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.cl.title"
                       base="SensorLN">
            <DataObject name="HzRtg"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.HzRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Rat"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.Rat.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Cor"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.Cor.desc"
                     presCond="MFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN__(_MFcond(3)_=__((_Cor,_AngCor_))__)_.cond.AbstractLNsGroupT::InstrumentTransformerLN.Cor"
                     dsPresCond="F"/>
            <DataObject name="AngCor"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.AngCor.desc"
                     presCond="MFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN__(_MFcond(3)_=__((_Cor,_AngCor_))__)_.cond.AbstractLNsGroupT::InstrumentTransformerLN.AngCor"
                     dsPresCond="F"/>
            <DataObject name="CorCrv"
                     type="CSG"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.CorCrv.desc"
                     presCond="MFcond"
                     presCondArgs="4"
                     presCondArgsID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN__(_MFcond(4)_=__((_CorCrv_))__)_.cond.AbstractLNsGroupT::InstrumentTransformerLN.CorCrv"
                     dsPresCond="F"/>
            <DataObject name="Clip"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.Clip.desc"
                     presCond="MOcond"
                     presCondArgs="5"
                     presCondArgsID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN__(_MOcond(5)_=__((_Clip_))__)_.cond.AbstractLNsGroupT::InstrumentTransformerLN.Clip"
                     dsPresCond="F"/>
            <DataObject name="AccMeas"
                     type="ENG"
                     underlyingType="InstrumentTransformerMeasurementRatingKind"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.AccMeas.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AccPro"
                     type="ENG"
                     underlyingType="InstrumentTransformerProtectionRatingKind"
                     descID="IEC61850_7_4.AbstractLNsGroupT::InstrumentTransformerLN.AccPro.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="SensorLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupT::SensorLN.cl.title"
                       base="EquipmentInterfaceLN">
            <DataObject name="SmpRte"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupT::SensorLN.SmpRte.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HoldTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupT::SensorLN.HoldTmms.desc"
                     presCond="MOcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.AbstractLNsGroupT::SensorLN__(_MOcond(2)_=__((_HoldTmms_))__)_.cond.AbstractLNsGroupT::SensorLN.HoldTmms"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="SwitchingEquipmentLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.cl.title"
                       base="EquipmentInterfaceLN">
            <DataObject name="Loc"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.Loc.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="LocKey"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.LocKey.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpCnt"
                     type="INS"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.OpCnt.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="Dsc"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.Dsc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LocSta"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.LocSta.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Pos"
                     type="DPC"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.Pos.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BlkOpn"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.BlkOpn.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BlkCls"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.BlkCls.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ChaMotEna"
                     type="SPC"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.ChaMotEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DscDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.AbstractLNsGroupX::SwitchingEquipmentLN.DscDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="BaseConverterLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupZ::BaseConverterLN.cl.title"
                       base="EquipmentInterfaceLN">
            <DataObject name="VArRtg"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BaseConverterLN.VArRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BaseConverterLN.VRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="BatteryLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.cl.title"
                       base="EquipmentInterfaceLN">
            <DataObject name="BatHi"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.BatHi.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BatLo"
                     type="SPS"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.BatLo.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VolChgRte"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.VolChgRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Vol"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.Vol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Amp"
                     type="MV"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.Amp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HiBatVol"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.HiBatVol.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LoBatVol"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::BatteryLN.LoBatVol.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ConductorLN"
                       titleID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.cl.title"
                       base="EquipmentInterfaceLN">
            <DataObject name="LinLenkm"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.LinLenkm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RPs"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.RPs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="XPs"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.XPs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ZPsMag"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.ZPsMag.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ZPsAng"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.ZPsAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RZer"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.RZer.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="XZer"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.XZer.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ZZerMag"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.ZZerMag.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ZZerAng"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.ZZerAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RmZer"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.RmZer.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="XmZer"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.XmZer.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ZmZerMag"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.ZmZerMag.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ZmZerAng"
                     type="ASG"
                     descID="IEC61850_7_4.AbstractLNsGroupZ::ConductorLN.ZmZerAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <LNClass name="LPHD" titleID="IEC61850_7_4.LNGroupL::LPHD.cl.title">
            <DataObject name="NamPlt"
                     type="LPL"
                     descID="IEC61850_7_4.LNGroupL::LPHD.NamPlt.desc"
                     presCond="MONamPlt"
                     presCondArgsID="IEC61850_7_4.LNGroupL::LPHD__(_MONamPlt_=__((_NamPlt_))__)_.cond.LNGroupL::LPHD.NamPlt"
                     dsPresCond="na"/>
            <DataObject name="PhyNam"
                     type="DPL"
                     descID="IEC61850_7_4.LNGroupL::LPHD.PhyNam.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="PhyHealth"
                     type="ENS"
                     underlyingType="HealthKind"
                     descID="IEC61850_7_4.LNGroupL::LPHD.PhyHealth.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="OutOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.OutOv.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="Proxy"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.Proxy.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="InOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.InOv.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="OpTmh"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.OpTmh.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="NumPwrUp"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.NumPwrUp.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="WrmStr"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.WrmStr.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="WacTrg"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.WacTrg.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="PwrUp"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupL::LPHD.PwrUp.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="PwrDn"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupL::LPHD.PwrDn.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="PwrSupAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LPHD.PwrSupAlm.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="RsStat"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupL::LPHD.RsStat.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="Sim"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupL::LPHD.Sim.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="MaxDl"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupL::LPHD.MaxDl.desc"
                     presCond="MOcond"
                     presCondArgs="1"
                     presCondArgsID="IEC61850_7_4.LNGroupL::LPHD__(_MOcond(1)_=__((_MaxDl_))__)_.cond.LNGroupL::LPHD.MaxDl"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="LLN0"
               titleID="IEC61850_7_4.LNGroupL::LLN0.cl.title"
               canHaveLOG="true">
            <DataObject name="NamPlt"
                     type="LPL"
                     descID="IEC61850_7_4.LNGroupL::LLN0.NamPlt.desc"
                     presCond="MOrootLD"
                     dsPresCond="na"/>
            <DataObject name="Beh"
                     type="ENS"
                     underlyingType="BehaviourModeKind"
                     descID="IEC61850_7_4.LNGroupL::LLN0.Beh.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="Health"
                     type="ENS"
                     underlyingType="HealthKind"
                     descID="IEC61850_7_4.LNGroupL::LLN0.Health.desc"
                     presCond="MOrootLD"
                     dsPresCond="na"/>
            <DataObject name="LocKey"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LLN0.LocKey.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="Loc"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LLN0.Loc.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="Mod"
                     type="ENC"
                     underlyingType="BehaviourModeKind"
                     descID="IEC61850_7_4.LNGroupL::LLN0.Mod.desc"
                     presCond="MOrootLD"
                     dsPresCond="na"/>
            <DataObject name="LocSta"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupL::LLN0.LocSta.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="Diag"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupL::LLN0.Diag.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="LEDRs"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupL::LLN0.LEDRs.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="SwModKey"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupL::LLN0.SwModKey.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="InRef"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupL::LLN0.InRef.desc"
                     presCond="Omulti"
                     dsPresCond="na"/>
            <DataObject name="GrRef"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupL::LLN0.GrRef.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="MltLev"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupL::LLN0.MltLev.desc"
                     presCond="O"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="LCCH"
               titleID="IEC61850_7_4.LNGroupL::LCCH.cl.title"
               base="DomainLN">
            <DataObject name="ChLiv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LCCH.ChLiv.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="RedChLiv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LCCH.RedChLiv.desc"
                     presCond="MFcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupL::LCCH__(_MFcond(2)_=__((_RedChLiv_))__)_.cond.LNGroupL::LCCH.RedChLiv"
                     dsPresCond="na"/>
            <DataObject name="OutOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LCCH.OutOv.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="InOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LCCH.InOv.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="FerCh"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LCCH.FerCh.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="RedFerCh"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LCCH.RedFerCh.desc"
                     presCond="OF"
                     presCondArgs="RedChLiv"
                     dsPresCond="na"/>
            <DataObject name="RxCnt"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupL::LCCH.RxCnt.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="RedRxCnt"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupL::LCCH.RedRxCnt.desc"
                     presCond="OF"
                     presCondArgs="RedChLiv"
                     dsPresCond="na"/>
            <DataObject name="TxCnt"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupL::LCCH.TxCnt.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="ApNam"
                     type="VSG"
                     descID="IEC61850_7_4.LNGroupL::LCCH.ApNam.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="ChLivTms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupL::LCCH.ChLivTms.desc"
                     presCond="O"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="LGOS"
               titleID="IEC61850_7_4.LNGroupL::LGOS.cl.title"
               base="SubscriptionSupervisionLN">
            <DataObject name="LastStNum"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LGOS.LastStNum.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="GoCBRef"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupL::LGOS.GoCBRef.desc"
                     presCond="M"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="LSVS"
               titleID="IEC61850_7_4.LNGroupL::LSVS.cl.title"
               base="SubscriptionSupervisionLN">
            <DataObject name="SvCBRef"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupL::LSVS.SvCBRef.desc"
                     presCond="M"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="LTIM"
               titleID="IEC61850_7_4.LNGroupL::LTIM.cl.title"
               base="DomainLN">
            <DataObject name="TmDT"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LTIM.TmDT.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="Leap"
                     type="ENS"
                     underlyingType="LeapSecondKind"
                     descID="IEC61850_7_4.LNGroupL::LTIM.Leap.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="TmOfsTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupL::LTIM.TmOfsTmm.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="TmUseDT"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupL::LTIM.TmUseDT.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="TmChgDT"
                     type="TSG"
                     descID="IEC61850_7_4.LNGroupL::LTIM.TmChgDT.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="TmChgST"
                     type="TSG"
                     descID="IEC61850_7_4.LNGroupL::LTIM.TmChgST.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="StrWeekDay"
                     type="ENG"
                     underlyingType="StrWeekDayKind"
                     descID="IEC61850_7_4.LNGroupL::LTIM.StrWeekDay.desc"
                     presCond="O"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="LTMS"
               titleID="IEC61850_7_4.LNGroupL::LTMS.cl.title"
               base="DomainLN">
            <DataObject name="TmAcc"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupL::LTMS.TmAcc.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="TmSrc"
                     type="VSS"
                     descID="IEC61850_7_4.LNGroupL::LTMS.TmSrc.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="TmSrcTyp"
                     type="ENS"
                     underlyingType="ClockSourceKind"
                     descID="IEC61850_7_4.LNGroupL::LTMS.TmSrcTyp.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="TmSyn"
                     type="ENS"
                     underlyingType="ClockSyncKind"
                     descID="IEC61850_7_4.LNGroupL::LTMS.TmSyn.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="TmChSt"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupL::LTMS.TmChSt.desc"
                     presCond="Omulti"
                     dsPresCond="na"/>
            <DataObject name="TmSynLkd"
                     type="ENS"
                     underlyingType="ClockSyncLockingKind"
                     descID="IEC61850_7_4.LNGroupL::LTMS.TmSynLkd.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="TmSrcSet"
                     type="VSG"
                     descID="IEC61850_7_4.LNGroupL::LTMS.TmSrcSet.desc"
                     presCond="Omulti"
                     dsPresCond="na"/>
            <DataObject name="HoldTms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupL::LTMS.HoldTms.desc"
                     presCond="O"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="LTRK"
               titleID="IEC61850_7_4.LNGroupL::LTRK.cl.title"
               base="DomainLN">
            <DataObject name="SpcTrk"
                     type="CTS"
                     underlyingTypeKind="BASIC"
                     underlyingType="BOOLEAN"
                     descID="IEC61850_7_4.LNGroupL::LTRK.SpcTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="DpcTrk"
                     type="CTS"
                     underlyingTypeKind="BASIC"
                     underlyingType="BOOLEAN"
                     descID="IEC61850_7_4.LNGroupL::LTRK.DpcTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="IncTrk"
                     type="CTS"
                     underlyingTypeKind="BASIC"
                     underlyingType="INT32"
                     descID="IEC61850_7_4.LNGroupL::LTRK.IncTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="EncTrk"
                     type="CTS"
                     underlyingTypeKind="ENUMERATED"
                     descID="IEC61850_7_4.LNGroupL::LTRK.EncTrk.desc"
                     presCond="Omulti"
                     dsPresCond="na"/>
            <DataObject name="ApcFTrk"
                     type="CTS"
                     underlyingTypeKind="CONSTRUCTED"
                     underlyingType="AnalogueValueCtlF"
                     descID="IEC61850_7_4.LNGroupL::LTRK.ApcFTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="ApcIntTrk"
                     type="CTS"
                     underlyingTypeKind="CONSTRUCTED"
                     underlyingType="AnalogueValueCtlInt"
                     descID="IEC61850_7_4.LNGroupL::LTRK.ApcIntTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="BscTrk"
                     type="CTS"
                     underlyingTypeKind="BASIC"
                     underlyingType="Tcmd"
                     descID="IEC61850_7_4.LNGroupL::LTRK.BscTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="IscTrk"
                     type="CTS"
                     underlyingTypeKind="BASIC"
                     underlyingType="INT8"
                     descID="IEC61850_7_4.LNGroupL::LTRK.IscTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="BacTrk"
                     type="CTS"
                     underlyingTypeKind="BASIC"
                     underlyingType="Tcmd"
                     descID="IEC61850_7_4.LNGroupL::LTRK.BacTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="GenTrk"
                     type="CST"
                     descID="IEC61850_7_4.LNGroupL::LTRK.GenTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="UrcbTrk"
                     type="UTS"
                     descID="IEC61850_7_4.LNGroupL::LTRK.UrcbTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="BrcbTrk"
                     type="BTS"
                     descID="IEC61850_7_4.LNGroupL::LTRK.BrcbTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="LocbTrk"
                     type="LTS"
                     descID="IEC61850_7_4.LNGroupL::LTRK.LocbTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="GocbTrk"
                     type="GTS"
                     descID="IEC61850_7_4.LNGroupL::LTRK.GocbTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="MsvcbTrk"
                     type="MTS"
                     descID="IEC61850_7_4.LNGroupL::LTRK.MsvcbTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="UsvcbTrk"
                     type="NTS"
                     descID="IEC61850_7_4.LNGroupL::LTRK.UsvcbTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="SgcbTrk"
                     type="STS"
                     descID="IEC61850_7_4.LNGroupL::LTRK.SgcbTrk.desc"
                     presCond="O"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="ANCR"
               titleID="IEC61850_7_4.LNGroupA::ANCR.cl.title"
               base="AutomaticControlLN">
            <DataObject name="HiColPos"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.HiColPos.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LoColPos"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.LoColPos.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ColChgOp"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ColChgOp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StFixCol"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.StFixCol.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StClcTun"
                     type="ENS"
                     underlyingType="TuningKind"
                     descID="IEC61850_7_4.LNGroupA::ANCR.StClcTun.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PotAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.PotAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.MotAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotWrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.MotWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ClcSeqWrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ClcSeqWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ColPosA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ColPosA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AResoPt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.AResoPt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AWatt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.AWatt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ADetun"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ADetun.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Damp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.Damp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CapacImb"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.CapacImb.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VolResoPt"
                     type="CMV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.VolResoPt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="NeutVol"
                     type="CMV"
                     descID="IEC61850_7_4.LNGroupA::ANCR.NeutVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TapChg"
                     type="BSC"
                     descID="IEC61850_7_4.LNGroupA::ANCR.TapChg.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ColTapPos"
                     type="ISC"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ColTapPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ColPos"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ColPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ColChg"
                     type="BAC"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ColChg.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="StrClc"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupA::ANCR.StrClc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ParOp"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ParOp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FixCol"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ANCR.FixCol.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ParColMod"
                     type="ENG"
                     underlyingType="ParallelCoilModeKind"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ParColMod.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ParMod"
                     type="ENG"
                     underlyingType="ParallelCtrlModeKind"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ParMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ADetunSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ANCR.ADetunSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BndWid"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ANCR.BndWid.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ARCO"
               titleID="IEC61850_7_4.LNGroupA::ARCO.cl.title"
               base="AutomaticControlLN">
            <DataObject name="VOvSt"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ARCO.VOvSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NeutAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ARCO.NeutAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschBlk"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ARCO.DschBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapChg"
                     type="BSC"
                     descID="IEC61850_7_4.LNGroupA::ARCO.TapChg.desc"
                     presCond="M"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="ARIS"
               titleID="IEC61850_7_4.LNGroupA::ARIS.cl.title"
               base="AutomaticControlLN">
            <DataObject name="ZBlk"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ARIS.ZBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmpAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ARIS.TmpAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NeutVol"
                     type="CMV"
                     descID="IEC61850_7_4.LNGroupA::ARIS.NeutVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RisTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ARIS.RisTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RisTmpClc"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ARIS.RisTmpClc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StrSeq"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupA::ARIS.StrSeq.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ATCC"
               titleID="IEC61850_7_4.LNGroupA::ATCC.cl.title"
               base="AutomaticControlLN">
            <DataObject name="HiTapPos"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.HiTapPos.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LoTapPos"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LoTapPos.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TapOpR"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapOpR.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapOpL"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapOpL.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapOpStop"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapOpStop.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapOpErr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapOpErr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LTCBlkVLo"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LTCBlkVLo.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LTCBlkVHi"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LTCBlkVHi.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LTCBlkAHi"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LTCBlkAHi.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EndPosR"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.EndPosR.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EndPosL"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.EndPosL.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ErrPar"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::ATCC.ErrPar.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtlV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ATCC.CtlV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LodA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LodA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CircA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ATCC.CircA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhAng"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ATCC.PhAng.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HiCtlV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ATCC.HiCtlV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LoCtlV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LoCtlV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HiDmdA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupA::ATCC.HiDmdA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TapChg"
                     type="BSC"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapChg.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="TapPos"
                     type="ISC"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="VolSpt"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupA::ATCC.VolSpt.desc"
                     presCond="AtLeastOne"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="BndCtrChg"
                     type="BAC"
                     descID="IEC61850_7_4.LNGroupA::ATCC.BndCtrChg.desc"
                     presCond="AtLeastOne"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="ParOp"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupA::ATCC.ParOp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LTCBlk"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LTCBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LTCDragRs"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LTCDragRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRed"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupA::ATCC.VRed.desc"
                     deprecated="true"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="BndCtr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.BndCtr.desc"
                     presCond="AtLeastOne"
                     presCondArgs="2"
                     dsPresCond="F"/>
            <DataObject name="BndWid"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.BndWid.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtlDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupA::ATCC.CtlDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LDCR"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LDCR.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LDCX"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LDCX.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkLV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.BlkLV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkRV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.BlkRV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkVLo"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.BlkVLo.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkVHi"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.BlkVHi.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RnbkRV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.RnbkRV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LimLodA"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LimLodA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LDC"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LDC.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ParTrfMod"
                     type="ENG"
                     underlyingType="ParallelTransfModeKind"
                     descID="IEC61850_7_4.LNGroupA::ATCC.ParTrfMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmDlChr"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TmDlChr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LDCZ"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.LDCZ.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRedVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::ATCC.VRedVal.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapBlkR"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapBlkR.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapBlkL"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupA::ATCC.TapBlkL.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="AVCO"
               titleID="IEC61850_7_4.LNGroupA::AVCO.cl.title"
               base="AutomaticControlLN">
            <DataObject name="BlkEF"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::AVCO.BlkEF.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkAOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::AVCO.BlkAOv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkVOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupA::AVCO.BlkVOv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapChg"
                     type="BSC"
                     descID="IEC61850_7_4.LNGroupA::AVCO.TapChg.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VolSpt"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupA::AVCO.VolSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LimAOv"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::AVCO.LimAOv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LimVOv"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupA::AVCO.LimVOv.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="CALH"
               titleID="IEC61850_7_4.LNGroupC::CALH.cl.title"
               base="FunctionLN">
            <DataObject name="GrAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CALH.GrAlm.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="GrWrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CALH.GrWrn.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="GrInd"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CALH.GrInd.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="AlmLstOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CALH.AlmLstOv.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="CCGR"
               titleID="IEC61850_7_4.LNGroupC::CCGR.cl.title"
               base="AutomaticControlLN">
            <DataObject name="OpTmh"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupC::CCGR.OpTmh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FanOvCur"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CCGR.FanOvCur.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PmpOvCur"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CCGR.PmpOvCur.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PmpAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CCGR.PmpAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EnvTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.EnvTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OilTmpIn"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.OilTmpIn.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="OilTmpOut"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.OilTmpOut.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="OilMotA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.OilMotA.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ClTmpIn"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.ClTmpIn.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="ClTmpOut"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.ClTmpOut.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="ClMotA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.ClMotA.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="FanFlw"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.FanFlw.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CETmpIn"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.CETmpIn.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CETmpOut"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.CETmpOut.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CEPres"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.CEPres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CEFlw"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.CEFlw.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FanA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CCGR.FanA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CEBlk"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupC::CCGR.CEBlk.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CECtl"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupC::CCGR.CECtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PmpCtlGen"
                     type="ENC"
                     underlyingType="StageControlKind"
                     descID="IEC61850_7_4.LNGroupC::CCGR.PmpCtlGen.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PmpCtl"
                     type="ENC"
                     underlyingType="StageControlKind"
                     descID="IEC61850_7_4.LNGroupC::CCGR.PmpCtl.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="FanCtlGen"
                     type="ENC"
                     underlyingType="StageControlKind"
                     descID="IEC61850_7_4.LNGroupC::CCGR.FanCtlGen.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FanCtl"
                     type="ENC"
                     underlyingType="StageControlKind"
                     descID="IEC61850_7_4.LNGroupC::CCGR.FanCtl.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="OilTmpSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupC::CCGR.OilTmpSet.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="ClTmpSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupC::CCGR.ClTmpSet.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="CILO"
               titleID="IEC61850_7_4.LNGroupC::CILO.cl.title"
               base="FunctionLN">
            <DataObject name="EnaOpn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CILO.EnaOpn.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="EnaCls"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CILO.EnaCls.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="CPOW"
               titleID="IEC61850_7_4.LNGroupC::CPOW.cl.title"
               base="FunctionLN">
            <DataObject name="TmExc"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CPOW.TmExc.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrPOW"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CPOW.StrPOW.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpOpn"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupC::CPOW.OpOpn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpCls"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupC::CPOW.OpCls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Pos"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CPOW.Pos.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosA"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CPOW.PosA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosB"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CPOW.PosB.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosC"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CPOW.PosC.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CPOW.MaxDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="CSWI"
               titleID="IEC61850_7_4.LNGroupC::CSWI.cl.title"
               base="ControlledLN">
            <DataObject name="OpOpn"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupC::CSWI.OpOpn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SelOpn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CSWI.SelOpn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpCls"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupC::CSWI.OpCls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SelCls"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CSWI.SelCls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Pos"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CSWI.Pos.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="PosA"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CSWI.PosA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosB"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CSWI.PosB.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosC"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupC::CSWI.PosC.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwModKey"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupC::CSWI.SwModKey.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DscDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSWI.DscDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="CSYN"
               titleID="IEC61850_7_4.LNGroupC::CSYN.cl.title"
               base="SynchronisationLN">
            <DataObject name="Cmd"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CSYN.Cmd.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="RV"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CSYN.RV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LV"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CSYN.LV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RHz"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CSYN.RHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LHz"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupC::CSYN.LHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RotDir"
                     type="ENS"
                     underlyingType="RotationalDirectionKind"
                     descID="IEC61850_7_4.LNGroupC::CSYN.RotDir.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AccClc"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CSYN.AccClc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AccClcDev"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupC::CSYN.AccClcDev.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RelDeaBus"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupC::CSYN.RelDeaBus.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpModSyn"
                     type="ENC"
                     underlyingType="SynchOperationModeKind"
                     descID="IEC61850_7_4.LNGroupC::CSYN.OpModSyn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VNom"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.VNom.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzNom"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.HzNom.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.DlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MltCmd"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.MltCmd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VAdj"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.VAdj.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VChr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.VChr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VIntvTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.VIntvTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinVTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.MinVTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxVTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.MaxVTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzAdj"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.HzAdj.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzChr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.HzChr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzIntvTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.HzIntvTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinHzTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.MinHzTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxHzTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.MaxHzTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzTgtVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.HzTgtVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="KckPls"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupC::CSYN.KckPls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DlSynTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupC::CSYN.DlSynTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="FCNT"
               titleID="IEC61850_7_4.LNGroupF::FCNT.cl.title"
               base="FunctionLN">
            <DataObject name="Up"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FCNT.Up.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Dn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FCNT.Dn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CntVal"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupF::FCNT.CntVal.desc"
                     presCond="M"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="FCSD"
               titleID="IEC61850_7_4.LNGroupF::FCSD.cl.title"
               base="FunctionOutputLN">
            <DataObject name="Crv"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupF::FCSD.Crv.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="FFIL"
               titleID="IEC61850_7_4.LNGroupF::FFIL.cl.title"
               base="FunctionOutputLN">
            <DataObject name="ErrTerm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FFIL.ErrTerm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FilTyp"
                     type="ENG"
                     underlyingType="FilterFunctionKind"
                     descID="IEC61850_7_4.LNGroupF::FFIL.FilTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="KP"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FFIL.KP.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="KLd"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FFIL.KLd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="KLg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FFIL.KLg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Tm1Tmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FFIL.Tm1Tmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Tm1LdTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FFIL.Tm1LdTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Tm2Tmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FFIL.Tm2Tmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Tm2LdTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FFIL.Tm2LdTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Tm3Tmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FFIL.Tm3Tmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Db"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FFIL.Db.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="FLIM"
               titleID="IEC61850_7_4.LNGroupF::FLIM.cl.title"
               base="FunctionOutputLN">
            <DataObject name="HiLim"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FLIM.HiLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LoLim"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FLIM.LoLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HiLimSpt"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FLIM.HiLimSpt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LoLimSpt"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FLIM.LoLimSpt.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="FPID"
               titleID="IEC61850_7_4.LNGroupF::FPID.cl.title"
               base="FunctionOutputLN">
            <DataObject name="PAct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FPID.PAct.desc"
                     presCond="OFcond"
                     presCondArgs="1"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_OFcond(1)_=__((_PAct_))__)_.cond.LNGroupF::FPID.PAct"
                     dsPresCond="O"/>
            <DataObject name="IAct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FPID.IAct.desc"
                     presCond="OFcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_OFcond(2)_=__((_IAct_))__)_.cond.LNGroupF::FPID.IAct"
                     dsPresCond="O"/>
            <DataObject name="DAct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FPID.DAct.desc"
                     presCond="OFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_OFcond(3)_=__((_DAct_))__)_.cond.LNGroupF::FPID.DAct"
                     dsPresCond="O"/>
            <DataObject name="ErrTerm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FPID.ErrTerm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PIDAlg"
                     type="ENG"
                     underlyingType="PIDAlgorithmKind"
                     descID="IEC61850_7_4.LNGroupF::FPID.PIDAlg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="KP"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FPID.KP.desc"
                     presCond="MFcond"
                     presCondArgs="1"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_MFcond(1)_=__((_KP_))__)_.cond.LNGroupF::FPID.KP"
                     dsPresCond="F"/>
            <DataObject name="KI"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FPID.KI.desc"
                     presCond="MFcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_MFcond(2)_=__((_KI,_ITmms_))__)_.cond.LNGroupF::FPID.KI"
                     dsPresCond="F"/>
            <DataObject name="ITmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FPID.ITmms.desc"
                     presCond="MFcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_MFcond(2)_=__((_KI,_ITmms_))__)_.cond.LNGroupF::FPID.ITmms"
                     dsPresCond="F"/>
            <DataObject name="KD"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FPID.KD.desc"
                     presCond="MFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_MFcond(3)_=__((_KD,_DTmms,_DFilTmms_))__)_.cond.LNGroupF::FPID.KD"
                     dsPresCond="F"/>
            <DataObject name="DTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FPID.DTmms.desc"
                     presCond="MFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_MFcond(3)_=__((_KD,_DTmms,_DFilTmms_))__)_.cond.LNGroupF::FPID.DTmms"
                     dsPresCond="F"/>
            <DataObject name="DFilTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FPID.DFilTmms.desc"
                     presCond="MFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.LNGroupF::FPID__(_MFcond(3)_=__((_KD,_DTmms,_DFilTmms_))__)_.cond.LNGroupF::FPID.DFilTmms"
                     dsPresCond="F"/>
            <DataObject name="Bias"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FPID.Bias.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ILim"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FPID.ILim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Drp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FPID.Drp.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="FRMP"
               titleID="IEC61850_7_4.LNGroupF::FRMP.cl.title"
               base="FunctionOutputLN">
            <DataObject name="AdjSt"
                     type="ENS"
                     underlyingType="AdjustmentKind"
                     descID="IEC61850_7_4.LNGroupF::FRMP.AdjSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ErrTerm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FRMP.ErrTerm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RmpUp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FRMP.RmpUp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RmpDn"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FRMP.RmpDn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StepPs"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FRMP.StepPs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StepNg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FRMP.StepNg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="FSCC"
               titleID="IEC61850_7_4.LNGroupF::FSCC.cl.title"
               base="DomainLN">
            <DataObject name="ActSchdRef"
                     type="ORS"
                     descID="IEC61850_7_4.LNGroupF::FSCC.ActSchdRef.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="ValINS"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupF::FSCC.ValINS.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="ValSPS"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FSCC.ValSPS.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="ValENS"
                     type="ENS"
                     underlyingType="EnumDA"
                     descID="IEC61850_7_4.LNGroupF::FSCC.ValENS.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="ValMV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FSCC.ValMV.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="CtlEnt"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupF::FSCC.CtlEnt.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="Schd"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupF::FSCC.Schd.desc"
                     presCond="Mmulti"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="FSCH"
               titleID="IEC61850_7_4.LNGroupF::FSCH.cl.title"
               base="DomainLN">
            <DataObject name="SchdSt"
                     type="ENS"
                     underlyingType="ScheduleStateKind"
                     descID="IEC61850_7_4.LNGroupF::FSCH.SchdSt.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="SchdEntr"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupF::FSCH.SchdEntr.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="ValINS"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValINS.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="ValSPS"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValSPS.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="ValENS"
                     type="ENS"
                     underlyingType="EnumDA"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValENS.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="ActStrTm"
                     type="TCS"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ActStrTm.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="NxtStrTm"
                     type="TCS"
                     descID="IEC61850_7_4.LNGroupF::FSCH.NxtStrTm.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="SchdEnaErr"
                     type="ENS"
                     underlyingType="ScheduleEnablingErrorKind"
                     descID="IEC61850_7_4.LNGroupF::FSCH.SchdEnaErr.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="ValMV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValMV.desc"
                     presCond="AtMostOne"
                     dsPresCond="na"/>
            <DataObject name="EnaReq"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupF::FSCH.EnaReq.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="DsaReq"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupF::FSCH.DsaReq.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="SchdPrio"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FSCH.SchdPrio.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="NumEntr"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FSCH.NumEntr.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="SchdIntv"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FSCH.SchdIntv.desc"
                     presCond="M"
                     dsPresCond="na"/>
            <DataObject name="ValASG"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValASG.desc"
                     presCond="MmultiF"
                     presCondArgs="ValMV"
                     dsPresCond="na"/>
            <DataObject name="ValING"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValING.desc"
                     presCond="MmultiF"
                     presCondArgs="ValINS"
                     dsPresCond="na"/>
            <DataObject name="ValSPG"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValSPG.desc"
                     presCond="MmultiF"
                     presCondArgs="ValSPS"
                     dsPresCond="na"/>
            <DataObject name="ValENG"
                     type="ENG"
                     underlyingType="EnumDA"
                     descID="IEC61850_7_4.LNGroupF::FSCH.ValENG.desc"
                     presCond="MmultiF"
                     presCondArgs="ValENS"
                     dsPresCond="na"/>
            <DataObject name="StrTm"
                     type="TSG"
                     descID="IEC61850_7_4.LNGroupF::FSCH.StrTm.desc"
                     presCond="Omulti"
                     dsPresCond="na"/>
            <DataObject name="EvtTrg"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupF::FSCH.EvtTrg.desc"
                     presCond="O"
                     dsPresCond="na"/>
            <DataObject name="InSyn"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupF::FSCH.InSyn.desc"
                     presCond="MF"
                     presCondArgs="EvtTrg"
                     dsPresCond="na"/>
            <DataObject name="SchdReuse"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupF::FSCH.SchdReuse.desc"
                     presCond="M"
                     dsPresCond="na"/>
         </LNClass>
         <LNClass name="FSPT"
               titleID="IEC61850_7_4.LNGroupF::FSPT.cl.title"
               base="AutomaticControlLN">
            <DataObject name="SptDvAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptDvAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SptUp"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptUp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SptDn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptDn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SptDir"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptDir.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SptEndSt"
                     type="ENS"
                     underlyingType="SetpointEndKind"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptEndSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AdjSt"
                     type="ENS"
                     underlyingType="AdjustmentKind"
                     descID="IEC61850_7_4.LNGroupF::FSPT.AdjSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Out"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FSPT.Out.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SptMem"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptMem.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ErrTerm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupF::FSPT.ErrTerm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SptChg"
                     type="BAC"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptChg.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SptVal"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupF::FSPT.SptVal.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxRst"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FSPT.MaxRst.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinRst"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FSPT.MinRst.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DvAlm"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupF::FSPT.DvAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="FXOT"
               titleID="IEC61850_7_4.LNGroupF::FXOT.cl.title"
               base="ThresholdLN"/>
         <LNClass name="FXUT"
               titleID="IEC61850_7_4.LNGroupF::FXUT.cl.title"
               base="ThresholdLN"/>
         <LNClass name="GAPC"
               titleID="IEC61850_7_4.LNGroupG::GAPC.cl.title"
               base="AutomaticControlLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupG::GAPC.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupG::GAPC.Op.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupG::GAPC.Alm.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="Wrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupG::GAPC.Wrn.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="Ind"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupG::GAPC.Ind.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="SPCSO"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupG::GAPC.SPCSO.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="DPCSO"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupG::GAPC.DPCSO.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="ISCSO"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupG::GAPC.ISCSO.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupG::GAPC.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="GGIO"
               titleID="IEC61850_7_4.LNGroupG::GGIO.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="IntIn"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupG::GGIO.IntIn.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupG::GGIO.Alm.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="Wrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupG::GGIO.Wrn.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="Ind"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupG::GGIO.Ind.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="CntVal"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupG::GGIO.CntVal.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="AnIn"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupG::GGIO.AnIn.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="AnOut"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupG::GGIO.AnOut.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="SPCSO"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupG::GGIO.SPCSO.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="DPCSO"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupG::GGIO.DPCSO.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="ISCSO"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupG::GGIO.ISCSO.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="GLOG"
               titleID="IEC61850_7_4.LNGroupG::GLOG.cl.title"
               base="FunctionLN">
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupG::GLOG.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LogTrg"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupG::GLOG.LogTrg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LogRef"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupG::GLOG.LogRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrgRef"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupG::GLOG.TrgRef.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="GSAL"
               titleID="IEC61850_7_4.LNGroupG::GSAL.cl.title"
               base="FunctionLN">
            <DataObject name="AuthFail"
                     type="SEC"
                     descID="IEC61850_7_4.LNGroupG::GSAL.AuthFail.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="AcsCtlFail"
                     type="SEC"
                     descID="IEC61850_7_4.LNGroupG::GSAL.AcsCtlFail.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="SvcViol"
                     type="SEC"
                     descID="IEC61850_7_4.LNGroupG::GSAL.SvcViol.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Ina"
                     type="SEC"
                     descID="IEC61850_7_4.LNGroupG::GSAL.Ina.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="NumCntRs"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupG::GSAL.NumCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupG::GSAL.OpCntRs.desc"
                     presCond="M"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="IARC"
               titleID="IEC61850_7_4.LNGroupI::IARC.cl.title"
               base="NonProcessInterfaceLN">
            <DataObject name="MemOv"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupI::IARC.MemOv.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="MemUsed"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupI::IARC.MemUsed.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="NumRcd"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupI::IARC.NumRcd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InTrg"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupI::IARC.InTrg.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="InLog"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupI::IARC.InLog.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="MaxNumRcd"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupI::IARC.MaxNumRcd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RcdMod"
                     type="ENG"
                     underlyingType="RecordingModeKind"
                     descID="IEC61850_7_4.LNGroupI::IARC.RcdMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MemFull"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupI::IARC.MemFull.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="IHMI"
               titleID="IEC61850_7_4.LNGroupI::IHMI.cl.title"
               base="NonProcessControllingEquipmentInterfaceLN"/>
         <LNClass name="ISAF"
               titleID="IEC61850_7_4.LNGroupI::ISAF.cl.title"
               base="NonProcessInterfaceLN">
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupI::ISAF.Alm.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupI::ISAF.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AlmRs"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupI::ISAF.AlmRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ITCI"
               titleID="IEC61850_7_4.LNGroupI::ITCI.cl.title"
               base="NonProcessControllingEquipmentInterfaceLN">
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupI::ITCI.Alm.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ITMI"
               titleID="IEC61850_7_4.LNGroupI::ITMI.cl.title"
               base="NonProcessInterfaceLN"/>
         <LNClass name="ITPC"
               titleID="IEC61850_7_4.LNGroupI::ITPC.cl.title"
               base="NonProcessInterfaceLN">
            <DataObject name="GrdRxCmd"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupI::ITPC.GrdRxCmd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LosSig"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupI::ITPC.LosSig.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TxCmdCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupI::ITPC.TxCmdCnt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="RxCmdCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupI::ITPC.RxCmdCnt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="LosSyn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupI::ITPC.LosSyn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Ber"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupI::ITPC.Ber.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Fer"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupI::ITPC.Fer.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CarLev"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupI::ITPC.CarLev.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Snr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupI::ITPC.Snr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LoopTestTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupI::ITPC.LoopTestTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="NumTxCmd"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupI::ITPC.NumTxCmd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NumRxCmd"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupI::ITPC.NumRxCmd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TpcTxMod"
                     type="ENG"
                     underlyingType="TpcAppModeKind"
                     descID="IEC61850_7_4.LNGroupI::ITPC.TpcTxMod.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="TpcRxMod"
                     type="ENG"
                     underlyingType="TpcAppModeKind"
                     descID="IEC61850_7_4.LNGroupI::ITPC.TpcRxMod.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="SecTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupI::ITPC.SecTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BstRat"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupI::ITPC.BstRat.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TxPwr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupI::ITPC.TxPwr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TxCtrHz"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupI::ITPC.TxCtrHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RxCtrHz"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupI::ITPC.RxCtrHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TxBndWid"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupI::ITPC.TxBndWid.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RxBndWid"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupI::ITPC.RxBndWid.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="KFAN"
               titleID="IEC61850_7_4.LNGroupK::KFAN.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="Spd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupK::KFAN.Spd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpCtl"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupK::KFAN.OpCtl.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="SpdSpt"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupK::KFAN.SpdSpt.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="MinOpTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupK::KFAN.MinOpTmm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxOpTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupK::KFAN.MaxOpTmm.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="KFIL"
               titleID="IEC61850_7_4.LNGroupK::KFIL.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="ACAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KFIL.ACAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotPro"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KFIL.MotPro.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Flush"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KFIL.Flush.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FilAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KFIL.FilAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifPresHi"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupK::KFIL.DifPresHi.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FlushCnt"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupK::KFIL.FlushCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpCtl"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupK::KFIL.OpCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AlmSpt"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupK::KFIL.AlmSpt.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="KPMP"
               titleID="IEC61850_7_4.LNGroupK::KPMP.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="Spd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupK::KPMP.Spd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpCtl"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupK::KPMP.OpCtl.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="SpdSpt"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupK::KPMP.SpdSpt.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="MinOpTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupK::KPMP.MinOpTmm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxOpTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupK::KPMP.MaxOpTmm.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="KTNK"
               titleID="IEC61850_7_4.LNGroupK::KTNK.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="LevPct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupK::KTNK.LevPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Vlm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupK::KTNK.Vlm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VlmCap"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupK::KTNK.VlmCap.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TnkTyp"
                     type="ENG"
                     underlyingType="TankFillKind"
                     descID="IEC61850_7_4.LNGroupK::KTNK.TnkTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="KVLV"
               titleID="IEC61850_7_4.LNGroupK::KVLV.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="OpCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupK::KVLV.OpCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClsPos"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KVLV.ClsPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="OpnPos"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KVLV.OpnPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="Mvm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KVLV.Mvm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Stuck"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupK::KVLV.Stuck.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosVlv"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupK::KVLV.PosVlv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Flw"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupK::KVLV.Flw.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PosSpt"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupK::KVLV.PosSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Pos"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupK::KVLV.Pos.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosChg"
                     type="BSC"
                     descID="IEC61850_7_4.LNGroupK::KVLV.PosChg.desc"
                     presCond="AtMostOne"
                     dsPresCond="O"/>
            <DataObject name="PosChgIncr"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupK::KVLV.PosChgIncr.desc"
                     presCond="AtMostOne"
                     dsPresCond="O"/>
            <DataObject name="BlkOpn"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupK::KVLV.BlkOpn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkCls"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupK::KVLV.BlkCls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpnLim"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupK::KVLV.OpnLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ClsLim"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupK::KVLV.ClsLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Incr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupK::KVLV.Incr.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="MENV"
               titleID="IEC61850_7_4.LNGroupM::MENV.cl.title"
               base="FunctionLN">
            <DataObject name="SmokAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupM::MENV.SmokAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FloodAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupM::MENV.FloodAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CO2Em"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.CO2Em.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="COEm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.COEm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="NOxEm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.NOxEm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SOxEm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.SOxEm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Dust"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.Dust.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Snd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.Snd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="O2CmbuGas"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.O2CmbuGas.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="O3Air"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MENV.O3Air.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SmokLev"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MENV.SmokLev.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FloodLev"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MENV.FloodLev.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="MFLK"
               titleID="IEC61850_7_4.LNGroupM::MFLK.cl.title"
               base="FunctionLN">
            <DataObject name="PPPcbLs"
                     type="HST"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPcbLs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhPcbLs"
                     type="HST"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPcbLs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PPPcbLl"
                     type="HST"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPcbLl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhPcbLl"
                     type="HST"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPcbLl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PPPst"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPst.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhPst"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPst.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PPPlt"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPlt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhPlt"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPlt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PPPiMax"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPiMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhPiMax"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPiMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PPPiLoFil"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPiLoFil.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhPiLoFil"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPiLoFil.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PPPiRoot"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPiRoot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhPiRoot"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPiRoot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PPPdmWav"
                     type="HDEL"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPdmWav.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhPdmWav"
                     type="HWYE"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPdmWav.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PPPdmSpec"
                     type="HDEL"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PPPdmSpec.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhPdmSpec"
                     type="HWYE"
                     descID="IEC61850_7_4.LNGroupM::MFLK.PhPdmSpec.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MFLW"
               titleID="IEC61850_7_4.LNGroupM::MFLW.cl.title"
               base="FunctionLN">
            <DataObject name="VlmCnt"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupM::MFLW.VlmCnt.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="FlwRte"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FlwRte.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="FanSpd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FanSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FlwHorDir"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FlwHorDir.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FlwVerDir"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FlwVerDir.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MatDen"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.MatDen.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MatCndct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.MatCndct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MatLev"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.MatLev.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FlwVlvPct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FlwVlvPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MatTyp"
                     type="ENG"
                     underlyingType="MaterialKind"
                     descID="IEC61850_7_4.LNGroupM::MFLW.MatTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="MatSt"
                     type="ENG"
                     underlyingType="MaterialStateKind"
                     descID="IEC61850_7_4.LNGroupM::MFLW.MatSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="FlwRteSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FlwRteSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinXsecArea"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MFLW.MinXsecArea.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FlwVlvTgt"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FlwVlvTgt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FanSpdSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MFLW.FanSpdSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="MHAI"
               titleID="IEC61850_7_4.LNGroupM::MHAI.cl.title"
               base="HarmonicsLN">
            <DataObject name="HA"
                     type="HWYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HPhV"
                     type="HWYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HPhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HPPV"
                     type="HDEL"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HW"
                     type="HWYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HVAr"
                     type="HWYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HVAr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HVA"
                     type="HWYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HVA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HRmsA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HRmsA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HRmsPhV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HRmsPhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HRmsPPV"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HRmsPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HTuW"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HTuW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HTsW"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HTsW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HATm"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HATm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HKFact"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HKFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HTdf"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HTdf.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdOddA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdOddA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdEvnA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdEvnA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TddA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.TddA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TddOddA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.TddOddA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TddEvnA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.TddEvnA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdPhV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdPhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdOddPhV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdOddPhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdEvnPhV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdEvnPhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdPPV"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdOddPPV"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdOddPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdEvnPPV"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MHAI.ThdEvnPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HCfPhV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HCfPhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HCfPPV"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HCfPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HCfA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HCfA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HTiFact"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MHAI.HTiFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MHAN"
               titleID="IEC61850_7_4.LNGroupM::MHAN.cl.title"
               base="HarmonicsLN">
            <DataObject name="HaAmp"
                     type="HMV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaVol"
                     type="HMV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaWatt"
                     type="HMV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaWatt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaVolAmpr"
                     type="HMV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaVolAmpr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaVolAmp"
                     type="HMV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaVolAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaRmsAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaRmsAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaRmsVol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaRmsVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaTuWatt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaTuWatt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaTsWatt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaTsWatt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaAmpTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaAmpTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaKFact"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaKFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaTdFact"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaTdFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.ThdAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdOddAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.ThdOddAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdEvnAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.ThdEvnAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TddAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.TddAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TddOddAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.TddOddAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TddEvnAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.TddEvnAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdVol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.ThdVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdOddVol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.ThdOddVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThdEvnVol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.ThdEvnVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaCfAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaCfAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaCfVol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaCfVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HaTiFact"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHAN.HaTiFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MHET"
               titleID="IEC61850_7_4.LNGroupM::MHET.cl.title"
               base="FunctionLN">
            <DataObject name="MatVlm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHET.MatVlm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MatPct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHET.MatPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MatCal"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHET.MatCal.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HeatOut"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHET.HeatOut.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AccmHeatOut"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHET.AccmHeatOut.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AccmHeatRs"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupM::MHET.AccmHeatRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MatTyp"
                     type="ENG"
                     underlyingType="MaterialKind"
                     descID="IEC61850_7_4.LNGroupM::MHET.MatTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="HeatSpcf"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MHET.HeatSpcf.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxMatCal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MHET.MaxMatCal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxHeatOut"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupM::MHET.MaxHeatOut.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="MHYD"
               titleID="IEC61850_7_4.LNGroupM::MHYD.cl.title"
               base="FunctionLN">
            <DataObject name="FishCnt"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupM::MHYD.FishCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Lev"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHYD.Lev.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Flw"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHYD.Flw.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SpdSrfc"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHYD.SpdSrfc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Tmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHYD.Tmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Cndct"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHYD.Cndct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HydPH"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHYD.HydPH.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Slnt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MHYD.Slnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MMDC"
               titleID="IEC61850_7_4.LNGroupM::MMDC.cl.title"
               base="FunctionLN">
            <DataObject name="Watt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.Watt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Amp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.Amp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Vol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.Vol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VolPsGnd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.VolPsGnd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VolNgGnd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.VolNgGnd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Ris"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.Ris.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RisPsGnd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.RisPsGnd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RisNgGnd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMDC.RisNgGnd.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MMET"
               titleID="IEC61850_7_4.LNGroupM::MMET.cl.title"
               base="FunctionLN">
            <DataObject name="EnvTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.EnvTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WetBlbTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.WetBlbTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CloudCvr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.CloudCvr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EnvHum"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.EnvHum.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DewPt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.DewPt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DffInsol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.DffInsol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DctInsol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.DctInsol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DlDur"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.DlDur.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HorInsol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.HorInsol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HorWdDir"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.HorWdDir.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HorWdSpd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.HorWdSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VerWdDir"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.VerWdDir.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VerWdSpd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.VerWdSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WdGustSpd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.WdGustSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EnvPres"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.EnvPres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RnFll"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.RnFll.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SnwDen"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.SnwDen.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SnwTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.SnwTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SnwCvr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.SnwCvr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SnwFll"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.SnwFll.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SnwEq"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMET.SnwEq.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MMTN"
               titleID="IEC61850_7_4.LNGroupM::MMTN.cl.title"
               base="EnergyLN"/>
         <LNClass name="MMTR"
               titleID="IEC61850_7_4.LNGroupM::MMTR.cl.title"
               base="EnergyLN"/>
         <LNClass name="MMXN"
               titleID="IEC61850_7_4.LNGroupM::MMXN.cl.title"
               base="FunctionLN">
            <DataObject name="Amp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.Amp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Vol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.Vol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Watt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.Watt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VolAmpr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.VolAmpr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VolAmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.VolAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PwrFact"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.PwrFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Imp"
                     type="CMV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.Imp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Hz"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXN.Hz.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MMXU"
               titleID="IEC61850_7_4.LNGroupM::MMXU.cl.title"
               base="FunctionLN">
            <DataObject name="TotW"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.TotW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TotVAr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.TotVAr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TotVA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.TotVA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TotPF"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.TotPF.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Hz"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.Hz.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PPV"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MMXU.PPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PNV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.PNV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PhV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.PhV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="A"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.A.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="W"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.W.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VAr"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.VAr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.VA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PF"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.PF.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Z"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MMXU.Z.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvAPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvAPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvPPVPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvPPVPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvPhVPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvPhVPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvWPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvWPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvVAPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvVAPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvVArPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvVArPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvPFPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvPFPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvZPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.AvZPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxAPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxAPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxPPVPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxPPVPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxPhVPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxPhVPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxWPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxWPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxVAPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxVAPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxVArPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxVArPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxPFPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxPFPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxZPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MaxZPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinAPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinAPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinPPVPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinPPVPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinPhVPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinPhVPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinWPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinWPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinVAPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinVAPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinVArPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinVArPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinPFPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinPFPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MinZPhs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.MinZPhs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HzRte"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MMXU.HzRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClcTotVA"
                     type="ENG"
                     underlyingType="STotalCalcMethodKind"
                     descID="IEC61850_7_4.LNGroupM::MMXU.ClcTotVA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PFSign"
                     type="ENG"
                     underlyingType="PFSignKind"
                     descID="IEC61850_7_4.LNGroupM::MMXU.PFSign.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="MSQI"
               titleID="IEC61850_7_4.LNGroupM::MSQI.cl.title"
               base="FunctionLN">
            <DataObject name="SeqA"
                     type="SEQ"
                     descID="IEC61850_7_4.LNGroupM::MSQI.SeqA.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="SeqV"
                     type="SEQ"
                     descID="IEC61850_7_4.LNGroupM::MSQI.SeqV.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="DQ0Seq"
                     type="SEQ"
                     descID="IEC61850_7_4.LNGroupM::MSQI.DQ0Seq.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MSQI.ImbA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbNgA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MSQI.ImbNgA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbNgV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MSQI.ImbNgV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbPPV"
                     type="DEL"
                     descID="IEC61850_7_4.LNGroupM::MSQI.ImbPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbV"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupM::MSQI.ImbV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbZroA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MSQI.ImbZroA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbZroV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MSQI.ImbZroV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxImbA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MSQI.MaxImbA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxImbPPV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MSQI.MaxImbPPV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxImbV"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupM::MSQI.MaxImbV.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="PDIF"
               titleID="IEC61850_7_4.LNGroupP::PDIF.cl.title"
               base="ProtectionLN">
            <DataObject name="TmASt"
                     type="CSD"
                     descID="IEC61850_7_4.LNGroupP::PDIF.TmASt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PDIF.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PDIF.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="DifAClc"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupP::PDIF.DifAClc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RstA"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupP::PDIF.RstA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TmACrv"
                     type="CURVE"
                     descID="IEC61850_7_4.LNGroupP::PDIF.TmACrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmAChr"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupP::PDIF.TmAChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
            <DataObject name="LinCapac"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIF.LinCapac.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LoSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIF.LoSet.desc"
                     presCond="AtMostOne"
                     dsPresCond="F"/>
            <DataObject name="HiSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIF.HiSet.desc"
                     presCond="AtMostOne"
                     dsPresCond="F"/>
            <DataObject name="MinOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIF.MinOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIF.MaxOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RstMod"
                     type="ENG"
                     underlyingType="RestraintModeKind"
                     descID="IEC61850_7_4.LNGroupP::PDIF.RstMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIF.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PDIR"
               titleID="IEC61850_7_4.LNGroupP::PDIR.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PDIR.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PDIR.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIR.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PDIS"
               titleID="IEC61850_7_4.LNGroupP::PDIS.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PDIS.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PDIS.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="PoRch"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.PoRch.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhStr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.PhStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndStr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.GndStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DirMod"
                     type="ENG"
                     underlyingType="DirectionModeKind"
                     descID="IEC61850_7_4.LNGroupP::PDIS.DirMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PctRch"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.PctRch.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Ofs"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.Ofs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PctOfs"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.PctOfs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RisLod"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.RisLod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AngLod"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.AngLod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmDlMod"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.TmDlMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIS.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhDlMod"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.PhDlMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIS.PhDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndDlMod"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.GndDlMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIS.GndDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="X1"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.X1.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LinAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.LinAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RisGndRch"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.RisGndRch.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RisPhRch"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.RisPhRch.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="K0Fact"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.K0Fact.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="K0FactAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PDIS.K0FactAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PDIS.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PDOP"
               titleID="IEC61850_7_4.LNGroupP::PDOP.cl.title"
               base="PowerProtectionLN"/>
         <LNClass name="PDUP"
               titleID="IEC61850_7_4.LNGroupP::PDUP.cl.title"
               base="PowerProtectionLN"/>
         <LNClass name="PFRC"
               titleID="IEC61850_7_4.LNGroupP::PFRC.cl.title"
               base="FrequencyProtectionLN"/>
         <LNClass name="PHAR"
               titleID="IEC61850_7_4.LNGroupP::PHAR.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PHAR.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="HaRst"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PHAR.HaRst.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhStr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PHAR.PhStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhStop"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PHAR.PhStop.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PHAR.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PHAR.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PHIZ"
               titleID="IEC61850_7_4.LNGroupP::PHIZ.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PHIZ.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PHIZ.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="AStr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PHIZ.AStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VStr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PHIZ.VStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HVStr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PHIZ.HVStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PHIZ.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PHIZ.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PIOC"
               titleID="IEC61850_7_4.LNGroupP::PIOC.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PIOC.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PIOC.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PIOC.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PMRI"
               titleID="IEC61850_7_4.LNGroupP::PMRI.cl.title"
               base="MotorStartupProtectionLN">
            <DataObject name="StrInh"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupP::PMRI.StrInh.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrInhTmm"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupP::PMRI.StrInhTmm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxNumStr"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PMRI.MaxNumStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxWrmStr"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PMRI.MaxWrmStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxStrTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PMRI.MaxStrTmm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EqTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PMRI.EqTmm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InhTmm"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PMRI.InhTmm.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PMSS"
               titleID="IEC61850_7_4.LNGroupP::PMSS.cl.title"
               base="MotorStartupProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PMSS.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotStr"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PMSS.MotStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LokRotTms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PMSS.LokRotTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="POPF"
               titleID="IEC61850_7_4.LNGroupP::POPF.cl.title"
               base="PowerFactorProtectionLN"/>
         <LNClass name="PPAM"
               titleID="IEC61850_7_4.LNGroupP::PPAM.cl.title"
               base="GeneratorProtectionLN"/>
         <LNClass name="PRTR"
               titleID="IEC61850_7_4.LNGroupP::PRTR.cl.title"
               base="GeneratorProtectionLN"/>
         <LNClass name="PSCH"
               titleID="IEC61850_7_4.LNGroupP::PSCH.cl.title"
               base="ProtectionLN">
            <DataObject name="TxPrm"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSCH.TxPrm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TxBlk"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSCH.TxBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TxTr"
                     type="ACT"
                     descID="IEC61850_7_4.LNGroupP::PSCH.TxTr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RxPrm"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSCH.RxPrm.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="RxBlk"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSCH.RxBlk.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="RxTr"
                     type="ACT"
                     descID="IEC61850_7_4.LNGroupP::PSCH.RxTr.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSCH.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="EchoWei"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSCH.EchoWei.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EchoWeiOp"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSCH.EchoWeiOp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RxSrc"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupP::PSCH.RxSrc.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="RxSrcTr"
                     type="ORG"
                     descID="IEC61850_7_4.LNGroupP::PSCH.RxSrcTr.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSCH.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CrdTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSCH.CrdTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DurTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSCH.DurTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnBlkMod"
                     type="ENG"
                     underlyingType="UnblockModeKind"
                     descID="IEC61850_7_4.LNGroupP::PSCH.UnBlkMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnBlkTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSCH.UnBlkTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WeiMod"
                     type="ENG"
                     underlyingType="WeakEndInfeedModeKind"
                     descID="IEC61850_7_4.LNGroupP::PSCH.WeiMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WeiTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSCH.WeiTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PSDE"
               titleID="IEC61850_7_4.LNGroupP::PSDE.cl.title"
               base="EarthfaultProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PSDE.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSDE.Op.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Ang"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PSDE.Ang.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndOp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PSDE.GndOp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSDE.StrDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSDE.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PSOF"
               titleID="IEC61850_7_4.LNGroupP::PSOF.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PSOF.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PSOF.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpAccEx"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupP::PSOF.OpAccEx.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkRec"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupP::PSOF.BlkRec.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EnaTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSOF.EnaTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EnaMod"
                     type="ENG"
                     underlyingType="SOFEnablingModeKind"
                     descID="IEC61850_7_4.LNGroupP::PSOF.EnaMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpModSof"
                     type="ENG"
                     underlyingType="SOFOperationModeKind"
                     descID="IEC61850_7_4.LNGroupP::PSOF.OpModSof.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SetPhV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PSOF.SetPhV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PSOF.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkValV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PSOF.BlkValV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkValA"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PSOF.BlkValA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PSOF.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTDV"
               titleID="IEC61850_7_4.LNGroupP::PTDV.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PTDV.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PTDV.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PTDV.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PTDV.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTEF"
               titleID="IEC61850_7_4.LNGroupP::PTEF.cl.title"
               base="EarthfaultProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PTEF.Str.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PTEF.Op.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTHF"
               titleID="IEC61850_7_4.LNGroupP::PTHF.cl.title"
               base="GeneratorProtectionLN"/>
         <LNClass name="PTOC"
               titleID="IEC61850_7_4.LNGroupP::PTOC.cl.title"
               base="CurrentProtectionLN">
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PTOC.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DirMod"
                     type="ENG"
                     underlyingType="DirectionModeKind"
                     descID="IEC61850_7_4.LNGroupP::PTOC.DirMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTOF"
               titleID="IEC61850_7_4.LNGroupP::PTOF.cl.title"
               base="FrequencyProtectionLN"/>
         <LNClass name="PTOV"
               titleID="IEC61850_7_4.LNGroupP::PTOV.cl.title"
               base="VoltageProtectionLN">
            <DataObject name="TmVSt"
                     type="CSD"
                     descID="IEC61850_7_4.LNGroupP::PTOV.TmVSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PTOV.Op.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmVCrv"
                     type="CURVE"
                     descID="IEC61850_7_4.LNGroupP::PTOV.TmVCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmVChr"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupP::PTOV.TmVChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTRC"
               titleID="IEC61850_7_4.LNGroupP::PTRC.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PTRC.Str.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PTRC.Op.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="Tr"
                     type="ACT"
                     descID="IEC61850_7_4.LNGroupP::PTRC.Tr.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="TrMod"
                     type="ENG"
                     underlyingType="TripModeKind"
                     descID="IEC61850_7_4.LNGroupP::PTRC.TrMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrPlsTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PTRC.TrPlsTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTTR"
               titleID="IEC61850_7_4.LNGroupP::PTTR.cl.title"
               base="ProtectionLN">
            <DataObject name="TmTmpSt"
                     type="CSD"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmTmpSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmASt"
                     type="CSD"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmASt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PTTR.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PTTR.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="AlmThm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupP::PTTR.AlmThm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkThm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupP::PTTR.BlkThm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Amp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupP::PTTR.Amp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Tmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupP::PTTR.Tmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TmpRl"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmpRl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LodRsvAlm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupP::PTTR.LodRsvAlm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LodRsvTr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupP::PTTR.LodRsvTr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TmTmpCrv"
                     type="CURVE"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmTmpCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTmpChr"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmTmpChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
            <DataObject name="TmACrv"
                     type="CURVE"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmACrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmAChr"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmAChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
            <DataObject name="TmpMax"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PTTR.TmpMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PTTR.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PTTR.MinOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxOpTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PTTR.MaxOpTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PTTR.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PTTR.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ConsTms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PTTR.ConsTms.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="AlmVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PTTR.AlmVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DropoutVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PTTR.DropoutVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTUC"
               titleID="IEC61850_7_4.LNGroupP::PTUC.cl.title"
               base="CurrentProtectionLN">
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PTUC.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DirMod"
                     type="ENG"
                     underlyingType="DirectionModeKind"
                     descID="IEC61850_7_4.LNGroupP::PTUC.DirMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PTUF"
               titleID="IEC61850_7_4.LNGroupP::PTUF.cl.title"
               base="FrequencyProtectionLN"/>
         <LNClass name="PTUV"
               titleID="IEC61850_7_4.LNGroupP::PTUV.cl.title"
               base="VoltageProtectionLN">
            <DataObject name="TmVSt"
                     type="CSD"
                     descID="IEC61850_7_4.LNGroupP::PTUV.TmVSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PTUV.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="TmVCrv"
                     type="CURVE"
                     descID="IEC61850_7_4.LNGroupP::PTUV.TmVCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmVChr"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupP::PTUV.TmVChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PUPF"
               titleID="IEC61850_7_4.LNGroupP::PUPF.cl.title"
               base="PowerFactorProtectionLN"/>
         <LNClass name="PVOC"
               titleID="IEC61850_7_4.LNGroupP::PVOC.cl.title"
               base="CurrentProtectionLN">
            <DataObject name="AVSt"
                     type="CSD"
                     descID="IEC61850_7_4.LNGroupP::PVOC.AVSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AVCrv"
                     type="CURVE"
                     descID="IEC61850_7_4.LNGroupP::PVOC.AVCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AVChr"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupP::PVOC.AVChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PVPH"
               titleID="IEC61850_7_4.LNGroupP::PVPH.cl.title"
               base="VoltageProtectionLN">
            <DataObject name="VHzSt"
                     type="CSD"
                     descID="IEC61850_7_4.LNGroupP::PVPH.VHzSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PVPH.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VHzCrv"
                     type="CURVE"
                     descID="IEC61850_7_4.LNGroupP::PVPH.VHzCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VHzChr"
                     type="CSG"
                     descID="IEC61850_7_4.LNGroupP::PVPH.VHzChr.desc"
                     presCond="OmultiRange"
                     presCondArgs="33, 48"
                     dsPresCond="F"/>
            <DataObject name="TypRsCrv"
                     type="ENG"
                     underlyingType="ResetCurveKind"
                     descID="IEC61850_7_4.LNGroupP::PVPH.TypRsCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="PZSU"
               titleID="IEC61850_7_4.LNGroupP::PZSU.cl.title"
               base="ProtectionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupP::PZSU.Str.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupP::PZSU.Op.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupP::PZSU.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PZSU.OpDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RsDlTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupP::PZSU.RsDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="QFVR"
               titleID="IEC61850_7_4.LNGroupQ::QFVR.cl.title"
               base="PowerQualityLN">
            <DataObject name="UnHzStr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupQ::QFVR.UnHzStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OvHzStr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupQ::QFVR.OvHzStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzVaTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QFVR.HzVaTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HzVaMag"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QFVR.HzVaMag.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="UnHzStrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupQ::QFVR.UnHzStrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OvHzStrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupQ::QFVR.OvHzStrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="QITR"
               titleID="IEC61850_7_4.LNGroupQ::QITR.cl.title"
               base="PowerQualityLN">
            <DataObject name="ATrsTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QITR.ATrsTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxATrs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QITR.MaxATrs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupQ::QITR.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="QIUB"
               titleID="IEC61850_7_4.LNGroupQ::QIUB.cl.title"
               base="UnbalanceDetectionLN">
            <DataObject name="AVaTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QIUB.AVaTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxAVa"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QIUB.MaxAVa.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="QVTR"
               titleID="IEC61850_7_4.LNGroupQ::QVTR.cl.title"
               base="PowerQualityLN">
            <DataObject name="VTrsTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QVTR.VTrsTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxVTrs"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QVTR.MaxVTrs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupQ::QVTR.StrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="QVUB"
               titleID="IEC61850_7_4.LNGroupQ::QVUB.cl.title"
               base="UnbalanceDetectionLN">
            <DataObject name="VVaTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QVUB.VVaTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxVVa"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QVUB.MaxVVa.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="QVVR"
               titleID="IEC61850_7_4.LNGroupQ::QVVR.cl.title"
               base="PowerQualityLN">
            <DataObject name="DipStr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.DipStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwlStr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.SwlStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntrStr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.IntrStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AffPhs"
                     type="ENS"
                     underlyingType="AffectedPhasesKind"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.AffPhs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VVa"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.VVa.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VVaTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.VVaTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DipStrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.DipStrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwlStrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.SwlStrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntrStrVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.IntrStrVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntrDetMth"
                     type="ENG"
                     underlyingType="VoltInterruptDetectionKind"
                     descID="IEC61850_7_4.LNGroupQ::QVVR.IntrDetMth.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RADR"
               titleID="IEC61850_7_4.LNGroupR::RADR.cl.title"
               base="DRChannelLN">
            <DataObject name="HiTrgLev"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RADR.HiTrgLev.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LoTrgLev"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RADR.LoTrgLev.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RBDR"
               titleID="IEC61850_7_4.LNGroupR::RBDR.cl.title"
               base="DRChannelLN"/>
         <LNClass name="RBRF"
               titleID="IEC61850_7_4.LNGroupR::RBRF.cl.title"
               base="FunctionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupR::RBRF.Str.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpEx"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RBRF.OpEx.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="OpIn"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RBRF.OpIn.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupR::RBRF.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FailMod"
                     type="ENG"
                     underlyingType="FailureDetectionKind"
                     descID="IEC61850_7_4.LNGroupR::RBRF.FailMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FailTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RBRF.FailTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SPlTrTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RBRF.SPlTrTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TPTrTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RBRF.TPTrTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DetValA"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RBRF.DetValA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ReTrMod"
                     type="ENG"
                     underlyingType="RetripModeKind"
                     descID="IEC61850_7_4.LNGroupR::RBRF.ReTrMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RDIR"
               titleID="IEC61850_7_4.LNGroupR::RDIR.cl.title"
               base="FunctionLN">
            <DataObject name="Dir"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupR::RDIR.Dir.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ChrAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.ChrAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinFwdAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.MinFwdAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinRvAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.MinRvAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxFwdAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.MaxFwdAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxRvAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.MaxRvAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkValA"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.BlkValA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkValV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.BlkValV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PolQty"
                     type="ENG"
                     underlyingType="PolarizingQuantityKind"
                     descID="IEC61850_7_4.LNGroupR::RDIR.PolQty.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MinPPV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RDIR.MinPPV.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RDRE"
               titleID="IEC61850_7_4.LNGroupR::RDRE.cl.title"
               base="RecorderLN">
            <DataObject name="RcdMade"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RDRE.RcdMade.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="FltNum"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupR::RDRE.FltNum.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="GriFltNum"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupR::RDRE.GriFltNum.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RcdStr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupR::RDRE.RcdStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MemUsed"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupR::RDRE.MemUsed.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RcdTrg"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RDRE.RcdTrg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MemRs"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RDRE.MemRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MemClr"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RDRE.MemClr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MemFull"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RDRE.MemFull.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxNumRcd"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RDRE.MaxNumRcd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ReTrgMod"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupR::RDRE.ReTrgMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PerTrgTms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RDRE.PerTrgTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExclTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RDRE.ExclTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RcdMod"
                     type="ENG"
                     underlyingType="RecordingModeKind"
                     descID="IEC61850_7_4.LNGroupR::RDRE.RcdMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StoRte"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RDRE.StoRte.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RDRS"
               titleID="IEC61850_7_4.LNGroupR::RDRS.cl.title"
               base="FunctionLN">
            <DataObject name="AutoUpLod"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupR::RDRS.AutoUpLod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DltRcd"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RDRS.DltRcd.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RFLO"
               titleID="IEC61850_7_4.LNGroupR::RFLO.cl.title"
               base="FunctionLN">
            <DataObject name="FltLoop"
                     type="ENS"
                     underlyingType="FaultLoopKind"
                     descID="IEC61850_7_4.LNGroupR::RFLO.FltLoop.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FltZ"
                     type="CMV"
                     descID="IEC61850_7_4.LNGroupR::RFLO.FltZ.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FltDiskm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupR::RFLO.FltDiskm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupR::RFLO.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="RMXU"
               titleID="IEC61850_7_4.LNGroupR::RMXU.cl.title"
               base="FunctionLN">
            <DataObject name="ALoc"
                     type="WYE"
                     descID="IEC61850_7_4.LNGroupR::RMXU.ALoc.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="AmpLocPhsA"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupR::RMXU.AmpLocPhsA.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="AmpLocPhsB"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupR::RMXU.AmpLocPhsB.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="AmpLocPhsC"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupR::RMXU.AmpLocPhsC.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="AmpLocRes"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupR::RMXU.AmpLocRes.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="RPSB"
               titleID="IEC61850_7_4.LNGroupR::RPSB.cl.title"
               base="FunctionLN">
            <DataObject name="Str"
                     type="ACD"
                     descID="IEC61850_7_4.LNGroupR::RPSB.Str.desc"
                     presCond="MOcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupR::RPSB__(_MOcond(2)_=__((_Str,_BlkZn_))__)_.cond.LNGroupR::RPSB.Str"
                     dsPresCond="F"/>
            <DataObject name="Op"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RPSB.Op.desc"
                     presCond="MOcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.LNGroupR::RPSB__(_MOcond(3)_=__((_Op_))__)_.cond.LNGroupR::RPSB.Op"
                     dsPresCond="F"/>
            <DataObject name="BlkZn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupR::RPSB.BlkZn.desc"
                     presCond="MOcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupR::RPSB__(_MOcond(2)_=__((_Str,_BlkZn_))__)_.cond.LNGroupR::RPSB.BlkZn"
                     dsPresCond="F"/>
            <DataObject name="OpCntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupR::RPSB.OpCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ZeroEna"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupR::RPSB.ZeroEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NgEna"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupR::RPSB.NgEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxEna"
                     type="SPG"
                     descID="IEC61850_7_4.LNGroupR::RPSB.MaxEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwgVal"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RPSB.SwgVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwgRis"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RPSB.SwgRis.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwgReact"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RPSB.SwgReact.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwgTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RPSB.SwgTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnBlkTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RPSB.UnBlkTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxNumSlp"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RPSB.MaxNumSlp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EvTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RPSB.EvTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RREC"
               titleID="IEC61850_7_4.LNGroupR::RREC.cl.title"
               base="FunctionLN">
            <DataObject name="TrBeh"
                     type="ENS"
                     underlyingType="TripBehaviourKind"
                     descID="IEC61850_7_4.LNGroupR::RREC.TrBeh.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RecCyc"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupR::RREC.RecCyc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpCls"
                     type="ACT"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupR::RREC.OpCls.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="AutoRecSt"
                     type="ENS"
                     underlyingType="AutoReclosingKind"
                     descID="IEC61850_7_4.LNGroupR::RREC.AutoRecSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Rec1PhCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupR::RREC.Rec1PhCnt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="Rec3PhCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupR::RREC.Rec3PhCnt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="CycTrMod"
                     type="ENG"
                     underlyingType="TripModeKind"
                     descID="IEC61850_7_4.LNGroupR::RREC.CycTrMod.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="MaxCyc"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.MaxCyc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UseCyc"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.UseCyc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.MaxTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Rec1Tmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.Rec1Tmms.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="Rec13Tmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.Rec13Tmms.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="Rec3Tmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.Rec3Tmms.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="RclTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.RclTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RdyTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupR::RREC.RdyTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="RSYN"
               titleID="IEC61850_7_4.LNGroupR::RSYN.cl.title"
               base="SynchronisationLN">
            <DataObject name="DifV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RSYN.DifV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifHz"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RSYN.DifHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifAng"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupR::RSYN.DifAng.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SARC"
               titleID="IEC61850_7_4.LNGroupS::SARC.cl.title"
               base="SupervisionLN">
            <DataObject name="FADet"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SARC.FADet.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="SwArcDet"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SARC.SwArcDet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FACntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupS::SARC.FACntRs.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="ArcCntRs"
                     type="INC"
                     descID="IEC61850_7_4.LNGroupS::SARC.ArcCntRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="SCBR"
               titleID="IEC61850_7_4.LNGroupS::SCBR.cl.title"
               base="SwitchgearSupervisionLN">
            <DataObject name="ColOpn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SCBR.ColOpn.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ColAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SCBR.ColAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AbrAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SCBR.AbrAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AbrWrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SCBR.AbrWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SCBR.SwA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ActAbr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SCBR.ActAbr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AbrAlmLev"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SCBR.AbrAlmLev.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AbrWrnLev"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SCBR.AbrWrnLev.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SIMG"
               titleID="IEC61850_7_4.LNGroupS::SIMG.cl.title"
               base="LineSupervisionLN">
            <DataObject name="PresAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIMG.PresAlm.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="DenAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIMG.DenAlm.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="TmpAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIMG.TmpAlm.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="InsBlkTmh"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupS::SIMG.InsBlkTmh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Den"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIMG.Den.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="SIML"
               titleID="IEC61850_7_4.LNGroupS::SIML.cl.title"
               base="LineSupervisionLN">
            <DataObject name="TmpAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.TmpAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GasInsAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.GasInsAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GasInsTr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.GasInsTr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GasFlwTr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.GasFlwTr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="H2Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.H2Alm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="H2Wrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.H2Wrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MstAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.MstAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MstWrn"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SIML.MstWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Lev"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.Lev.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="H2O"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.H2O.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="H2OPap"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.H2OPap.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="H2OAir"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.H2OAir.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="H2OTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.H2OTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="H2ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.H2ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="N2ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.N2ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="COppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.COppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CO2ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.CO2ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CH4ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.CH4ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="C2H2ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.C2H2ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="C2H4ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.C2H4ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="C2H6ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.C2H6ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="O2ppm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.O2ppm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CmbuGas"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.CmbuGas.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FltGas"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SIML.FltGas.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="SLTC"
               titleID="IEC61850_7_4.LNGroupS::SLTC.cl.title"
               base="SupervisionLN">
            <DataObject name="OilFil"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SLTC.OilFil.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotDrvBlk"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SLTC.MotDrvBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VacCelAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SLTC.VacCelAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OilFilTr"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SLTC.OilFilTr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Torq"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SLTC.Torq.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MotDrvA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SLTC.MotDrvA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AbrPrt"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SLTC.AbrPrt.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="SOPM"
               titleID="IEC61850_7_4.LNGroupS::SOPM.cl.title"
               base="SupervisionLN">
            <DataObject name="MotOp"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotOp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotStrAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotStrAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HyAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.HyAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HyBlk"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.HyBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EnBlk"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.EnBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EnAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.EnAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HeatAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.HeatAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaIntvTms"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.ChaIntvTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MotStrNum"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotStrNum.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="En"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SOPM.En.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HyPres"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SOPM.HyPres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HyTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SOPM.HyTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MotTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MotA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Tmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SOPM.Tmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MotAlmTms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotAlmTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotAlmNum"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotAlmNum.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotStrTms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupS::SOPM.MotStrTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SPDC"
               titleID="IEC61850_7_4.LNGroupS::SPDC.cl.title"
               base="SupervisionLN">
            <DataObject name="PaDschAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPDC.PaDschAlm.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="OpCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupS::SPDC.OpCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AcuPaDsch"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPDC.AcuPaDsch.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="AppPaDsch"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPDC.AppPaDsch.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="NQS"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPDC.NQS.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="UhfPaDsch"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPDC.UhfPaDsch.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="CtrHz"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SPDC.CtrHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BndWid"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SPDC.BndWid.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SPRS"
               titleID="IEC61850_7_4.LNGroupS::SPRS.cl.title"
               base="SupervisionLN">
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPRS.Alm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPRS.RteAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Trip"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPRS.Trip.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteTrip"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPRS.RteTrip.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Pres"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPRS.Pres.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="PresRte"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPRS.PresRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AlmSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SPRS.AlmSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteAlmSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SPRS.RteAlmSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TripSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SPRS.TripSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteTripSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SPRS.RteTripSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SPTR"
               titleID="IEC61850_7_4.LNGroupS::SPTR.cl.title"
               base="SupervisionLN">
            <DataObject name="HPTmpAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPTR.HPTmpAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HPTmpOp"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPTR.HPTmpOp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HPTmpTr"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupS::SPTR.HPTmpTr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MbrAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPTR.MbrAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CGAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPTR.CGAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HeatAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SPTR.HeatAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AgeRte"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPTR.AgeRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="BotTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPTR.BotTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CoreTmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPTR.CoreTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HPTmpClc"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SPTR.HPTmpClc.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="SSWI"
               titleID="IEC61850_7_4.LNGroupS::SSWI.cl.title"
               base="SwitchgearSupervisionLN"/>
         <LNClass name="STMP"
               titleID="IEC61850_7_4.LNGroupS::STMP.cl.title"
               base="SupervisionLN">
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::STMP.Alm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::STMP.RteAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Trip"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::STMP.Trip.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteTrip"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::STMP.RteTrip.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Tmp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::STMP.Tmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TmpRte"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::STMP.TmpRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AlmSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::STMP.AlmSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteAlmSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::STMP.RteAlmSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TripSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::STMP.TripSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RteTripSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::STMP.RteTripSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SVBR"
               titleID="IEC61850_7_4.LNGroupS::SVBR.cl.title"
               base="SupervisionLN">
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SVBR.Alm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AxDspAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SVBR.AxDspAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Trip"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SVBR.Trip.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AxDspTrip"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupS::SVBR.AxDspTrip.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Vbr"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SVBR.Vbr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VbrPer"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SVBR.VbrPer.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AxDsp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupS::SVBR.AxDsp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VbrAlmSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SVBR.VbrAlmSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AxDspAlmSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SVBR.AxDspAlmSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VbrTripSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SVBR.VbrTripSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AxDspTripSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupS::SVBR.AxDspTripSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="TANG"
               titleID="IEC61850_7_4.LNGroupT::TANG.cl.title"
               base="SensorLN">
            <DataObject name="AngSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TANG.AngSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TAXD"
               titleID="IEC61850_7_4.LNGroupT::TAXD.cl.title"
               base="SensorLN">
            <DataObject name="AxDspSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TAXD.AxDspSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TCTR"
               titleID="IEC61850_7_4.LNGroupT::TCTR.cl.title"
               base="InstrumentTransformerLN">
            <DataObject name="AmpSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TCTR.AmpSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupT::TCTR.ARtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Trp"
                     type="ENG"
                     underlyingType="TransientPerformanceClassKind"
                     descID="IEC61850_7_4.LNGroupT::TCTR.Trp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ScndTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupT::TCTR.ScndTmms.desc"
                     presCond="MOcond"
                     presCondArgs="6"
                     presCondArgsID="IEC61850_7_4.LNGroupT::TCTR__(_MOcond(6)_=__((_ScndTmms_))__)_.cond.LNGroupT::TCTR.ScndTmms"
                     dsPresCond="F"/>
            <DataObject name="DynRngMin"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupT::TCTR.DynRngMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DynRngMax"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupT::TCTR.DynRngMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="TDST"
               titleID="IEC61850_7_4.LNGroupT::TDST.cl.title"
               base="SensorLN">
            <DataObject name="DisSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TDST.DisSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TFLW"
               titleID="IEC61850_7_4.LNGroupT::TFLW.cl.title"
               base="SensorLN">
            <DataObject name="FlwSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TFLW.FlwSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TFRQ"
               titleID="IEC61850_7_4.LNGroupT::TFRQ.cl.title"
               base="SensorLN">
            <DataObject name="HzSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TFRQ.HzSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TGSN"
               titleID="IEC61850_7_4.LNGroupT::TGSN.cl.title"
               base="SensorLN">
            <DataObject name="GenSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TGSN.GenSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="THUM"
               titleID="IEC61850_7_4.LNGroupT::THUM.cl.title"
               base="SensorLN">
            <DataObject name="HumSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::THUM.HumSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TLVL"
               titleID="IEC61850_7_4.LNGroupT::TLVL.cl.title"
               base="SensorLN">
            <DataObject name="LevPctSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TLVL.LevPctSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TMGF"
               titleID="IEC61850_7_4.LNGroupT::TMGF.cl.title"
               base="SensorLN">
            <DataObject name="MagFldSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TMGF.MagFldSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TMVM"
               titleID="IEC61850_7_4.LNGroupT::TMVM.cl.title"
               base="SensorLN">
            <DataObject name="MvmRteSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TMVM.MvmRteSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TPOS"
               titleID="IEC61850_7_4.LNGroupT::TPOS.cl.title"
               base="SensorLN">
            <DataObject name="PosPctSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TPOS.PosPctSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TPRS"
               titleID="IEC61850_7_4.LNGroupT::TPRS.cl.title"
               base="SensorLN">
            <DataObject name="PresSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TPRS.PresSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TRTN"
               titleID="IEC61850_7_4.LNGroupT::TRTN.cl.title"
               base="SensorLN">
            <DataObject name="RotSpdSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TRTN.RotSpdSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TSND"
               titleID="IEC61850_7_4.LNGroupT::TSND.cl.title"
               base="SensorLN">
            <DataObject name="SndSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TSND.SndSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TTMP"
               titleID="IEC61850_7_4.LNGroupT::TTMP.cl.title"
               base="SensorLN">
            <DataObject name="TmpSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TTMP.TmpSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TTNS"
               titleID="IEC61850_7_4.LNGroupT::TTNS.cl.title"
               base="SensorLN">
            <DataObject name="TnsSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TTNS.TnsSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TVBR"
               titleID="IEC61850_7_4.LNGroupT::TVBR.cl.title"
               base="SensorLN">
            <DataObject name="VbrSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TVBR.VbrSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="TVTR"
               titleID="IEC61850_7_4.LNGroupT::TVTR.cl.title"
               base="InstrumentTransformerLN">
            <DataObject name="FuFail"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupT::TVTR.FuFail.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VolSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TVTR.VolSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupT::TVTR.VRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="TWPH"
               titleID="IEC61850_7_4.LNGroupT::TWPH.cl.title"
               base="SensorLN">
            <DataObject name="H2OPHSv"
                     type="SAV"
                     descID="IEC61850_7_4.LNGroupT::TWPH.H2OPHSv.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="XCBR"
               titleID="IEC61850_7_4.LNGroupX::XCBR.cl.title"
               base="SwitchingEquipmentLN">
            <DataObject name="CBOpCap"
                     type="ENS"
                     underlyingType="BreakerOpCapabilityKind"
                     descID="IEC61850_7_4.LNGroupX::XCBR.CBOpCap.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="POWCap"
                     type="ENS"
                     underlyingType="POWSwitchingCapabilityKind"
                     descID="IEC61850_7_4.LNGroupX::XCBR.POWCap.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxOpCap"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupX::XCBR.MaxOpCap.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SumSwARs"
                     type="BCR"
                     descID="IEC61850_7_4.LNGroupX::XCBR.SumSwARs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CBTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupX::XCBR.CBTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="POWOpnTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupX::XCBR.POWOpnTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="POWClsTmms"
                     type="ING"
                     descID="IEC61850_7_4.LNGroupX::XCBR.POWClsTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="XFUS"
               titleID="IEC61850_7_4.LNGroupX::XFUS.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="FuSt"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupX::XFUS.FuSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuTyp"
                     type="ENG"
                     underlyingType="FuseFunctionKind"
                     descID="IEC61850_7_4.LNGroupX::XFUS.FuTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupX::XFUS.ARtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupX::XFUS.VRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="XSWI"
               titleID="IEC61850_7_4.LNGroupX::XSWI.cl.title"
               base="SwitchingEquipmentLN">
            <DataObject name="SwTyp"
                     type="ENS"
                     underlyingType="SwitchFunctionKind"
                     descID="IEC61850_7_4.LNGroupX::XSWI.SwTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="SwOpCap"
                     type="ENS"
                     underlyingType="SwitchingCapabilityKind"
                     descID="IEC61850_7_4.LNGroupX::XSWI.SwOpCap.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="YEFN"
               titleID="IEC61850_7_4.LNGroupY::YEFN.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="EndPosR"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YEFN.EndPosR.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EndPosL"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YEFN.EndPosL.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PotAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YEFN.PotAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MotAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YEFN.MotAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ColPosA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupY::YEFN.ColPosA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ColAEFN"
                     type="CMV"
                     descID="IEC61850_7_4.LNGroupY::YEFN.ColAEFN.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="NeutVol"
                     type="CMV"
                     descID="IEC61850_7_4.LNGroupY::YEFN.NeutVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TapChg"
                     type="BSC"
                     descID="IEC61850_7_4.LNGroupY::YEFN.TapChg.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ColTapPos"
                     type="ISC"
                     descID="IEC61850_7_4.LNGroupY::YEFN.ColTapPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ColPos"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupY::YEFN.ColPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ColChg"
                     type="BAC"
                     descID="IEC61850_7_4.LNGroupY::YEFN.ColChg.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="YLTC"
               titleID="IEC61850_7_4.LNGroupY::YLTC.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="OpCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupY::YLTC.OpCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EndPosR"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YLTC.EndPosR.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="EndPosL"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YLTC.EndPosL.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OoStep"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YLTC.OoStep.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LTCCycAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YLTC.LTCCycAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkLoVisc"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YLTC.BlkLoVisc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TapPos"
                     type="ISC"
                     descID="IEC61850_7_4.LNGroupY::YLTC.TapPos.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="TapChg"
                     type="BSC"
                     descID="IEC61850_7_4.LNGroupY::YLTC.TapChg.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="YPSH"
               titleID="IEC61850_7_4.LNGroupY::YPSH.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="ShOpCap"
                     type="ENS"
                     underlyingType="SwitchingCapabilityKind"
                     descID="IEC61850_7_4.LNGroupY::YPSH.ShOpCap.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Pos"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupY::YPSH.Pos.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BlkOpn"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupY::YPSH.BlkOpn.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BlkCls"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupY::YPSH.BlkCls.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ChaMotEna"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupY::YPSH.ChaMotEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="YPTR"
               titleID="IEC61850_7_4.LNGroupY::YPTR.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="OpNoLod"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OpNoLod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpOvA"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OpOvA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpOvV"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OpOvV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpUnV"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OpUnV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LodFact"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupY::YPTR.LodFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaxVA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupY::YPTR.MaxVA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OvlTm"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OvlTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OvlTmEmg"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OvlTmEmg.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HiVRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupY::YPTR.HiVRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LoVRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupY::YPTR.LoVRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupY::YPTR.VARtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxVASet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupY::YPTR.MaxVASet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OvlTmSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OvlTmSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OvlTmEmgSet"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupY::YPTR.OvlTmEmgSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZAXN"
               titleID="IEC61850_7_4.LNGroupZ::ZAXN.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="Vol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZAXN.Vol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Amp"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZAXN.Amp.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="ZBAT"
               titleID="IEC61850_7_4.LNGroupZ::ZBAT.cl.title"
               base="BatteryLN">
            <DataObject name="TestRsl"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZBAT.TestRsl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BatTest"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupZ::ZBAT.BatTest.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZBSH"
               titleID="IEC61850_7_4.LNGroupZ::ZBSH.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="React"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.React.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AbsReact"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.AbsReact.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LosFact"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.LosFact.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Vol"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.Vol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DspA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.DspA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LkgA"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.LkgA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RefReact"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.RefReact.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RefPF"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.RefPF.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RefV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZBSH.RefV.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZCAB"
               titleID="IEC61850_7_4.LNGroupZ::ZCAB.cl.title"
               base="ConductorLN"/>
         <LNClass name="ZCAP"
               titleID="IEC61850_7_4.LNGroupZ::ZCAP.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="DschBlk"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZCAP.DschBlk.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="CapDS"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZCAP.CapDS.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZCON"
               titleID="IEC61850_7_4.LNGroupZ::ZCON.cl.title"
               base="BaseConverterLN"/>
         <LNClass name="ZGEN"
               titleID="IEC61850_7_4.LNGroupZ::ZGEN.cl.title"
               base="CmdEquipmentInterfaceLN">
            <DataObject name="GnSt"
                     type="ENS"
                     underlyingType="RotatingMachineStateKind"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.GnSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpNoLod"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.OpNoLod.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="RotDir"
                     type="ENS"
                     underlyingType="RotationalDirectionKind"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.RotDir.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpUnExt"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.OpUnExt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpOvExt"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.OpOvExt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="LosOil"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.LosOil.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LosVac"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.LosVac.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PresAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.PresAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GnSpd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.GnSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnCtl"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.GnCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DExt"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.DExt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AuxSco"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.AuxSco.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArR"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.VArR.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArL"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.VArL.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DmdW"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.DmdW.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.WRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.VARtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZGEN.VRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZGIL"
               titleID="IEC61850_7_4.LNGroupZ::ZGIL.cl.title"
               base="EquipmentInterfaceLN"/>
         <LNClass name="ZLIN"
               titleID="IEC61850_7_4.LNGroupZ::ZLIN.cl.title"
               base="ConductorLN"/>
         <LNClass name="ZMOT"
               titleID="IEC61850_7_4.LNGroupZ::ZMOT.cl.title"
               base="CmdEquipmentInterfaceLN">
            <DataObject name="MotSt"
                     type="ENS"
                     underlyingType="RotatingMachineStateKind"
                     descID="IEC61850_7_4.LNGroupZ::ZMOT.MotSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RotThmSt"
                     type="ENS"
                     underlyingType="RotorThermalStateKind"
                     descID="IEC61850_7_4.LNGroupZ::ZMOT.RotThmSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LosOil"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZMOT.LosOil.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LosVac"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZMOT.LosVac.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PresAlm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZMOT.PresAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DExt"
                     type="SPC"
                     descID="IEC61850_7_4.LNGroupZ::ZMOT.DExt.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZREA"
               titleID="IEC61850_7_4.LNGroupZ::ZREA.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZREA.VRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZREA.ARtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZREA.VARtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZREA.VArRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZRES"
               titleID="IEC61850_7_4.LNGroupZ::ZRES.cl.title"
               base="EquipmentInterfaceLN"/>
         <LNClass name="ZRRC"
               titleID="IEC61850_7_4.LNGroupZ::ZRRC.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="GnSt"
                     type="ENS"
                     underlyingType="RotatingMachineStateKind"
                     descID="IEC61850_7_4.LNGroupZ::ZRRC.GnSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GnSpd"
                     type="MV"
                     descID="IEC61850_7_4.LNGroupZ::ZRRC.GnSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnCtl"
                     type="DPC"
                     descID="IEC61850_7_4.LNGroupZ::ZRRC.GnCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZSAR"
               titleID="IEC61850_7_4.LNGroupZ::ZSAR.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="OpCnt"
                     type="INS"
                     descID="IEC61850_7_4.LNGroupZ::ZSAR.OpCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpSar"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_4.LNGroupZ::ZSAR.OpSar.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZSCR"
               titleID="IEC61850_7_4.LNGroupZ::ZSCR.cl.title"
               base="CmdEquipmentInterfaceLN">
            <DataObject name="Alm"
                     type="SPS"
                     descID="IEC61850_7_4.LNGroupZ::ZSCR.Alm.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="AmpSpt"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupZ::ZSCR.AmpSpt.desc"
                     presCond="MFcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupZ::ZSCR__(_MFcond(2)_=__((_SetV,_AmpSpt_))__)_.cond.LNGroupZ::ZSCR.AmpSpt"
                     dsPresCond="O"/>
            <DataObject name="VolSpt"
                     type="APC"
                     descID="IEC61850_7_4.LNGroupZ::ZSCR.VolSpt.desc"
                     presCond="MFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.LNGroupZ::ZSCR__(_MFcond(3)_=__((_SetA,_VolSpt_))__)_.cond.LNGroupZ::ZSCR.VolSpt"
                     dsPresCond="O"/>
            <DataObject name="OpModRect"
                     type="ENG"
                     underlyingType="RectifierControlModeKind"
                     descID="IEC61850_7_4.LNGroupZ::ZSCR.OpModRect.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="SetA"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSCR.SetA.desc"
                     presCond="MFcond"
                     presCondArgs="3"
                     presCondArgsID="IEC61850_7_4.LNGroupZ::ZSCR__(_MFcond(3)_=__((_SetA,_VolSpt_))__)_.cond.LNGroupZ::ZSCR.SetA"
                     dsPresCond="F"/>
            <DataObject name="SetV"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSCR.SetV.desc"
                     presCond="MFcond"
                     presCondArgs="2"
                     presCondArgsID="IEC61850_7_4.LNGroupZ::ZSCR__(_MFcond(2)_=__((_SetV,_AmpSpt_))__)_.cond.LNGroupZ::ZSCR.SetV"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZSMC"
               titleID="IEC61850_7_4.LNGroupZ::ZSMC.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="RotDir"
                     type="ENS"
                     underlyingType="RotationalDirectionKind"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.RotDir.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.VRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.ARtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="WRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.WRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VARtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.VARtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="SpdRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.SpdRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="SpdCrit"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.SpdCrit.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FldRisTmp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.FldRisTmp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SttRisTmp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.SttRisTmp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SttRis"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.SttRis.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PFRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.PFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Iner"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.Iner.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FldAmpRtg"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.FldAmpRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FldAmpRtgZer"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.FldAmpRtgZer.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FldRis"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.FldRis.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BaseImp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.BaseImp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SttLkgX"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.SttLkgX.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xd"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.Xd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xdp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.Xdp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xds"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.Xds.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xq"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.Xq.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xqp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.Xqp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xqs"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.Xqs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="X0"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.X0.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="X2"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.X2.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTdp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTdp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTds"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTds.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTd0p"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTd0p.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTd0s"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTd0s.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTqp"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTqp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTqs"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTqs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTq0p"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTq0p.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTq0s"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTq0s.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmTa"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.TmTa.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SatCffS10"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.SatCffS10.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SatCffS12"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZSMC.SatCffS12.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZTCF"
               titleID="IEC61850_7_4.LNGroupZ::ZTCF.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="PwrHz"
                     type="ASG"
                     descID="IEC61850_7_4.LNGroupZ::ZTCF.PwrHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="ZTCR"
               titleID="IEC61850_7_4.LNGroupZ::ZTCR.cl.title"
               base="EquipmentInterfaceLN"/>
      </LNClasses>
</NS>
`;
const nsd7420 = `<?xml version="1.0" encoding="UTF-8"?>
<NS xmlns="http://www.iec.ch/61850/2016/NSD"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.iec.ch/61850/2016/NSD NSD.xsd"
    id="IEC 61850-7-420"
    version="2019"
    revision="A"
    release="4"
    umlVersion="WG17build8"
    umlDate="2021-09-09T00:00:00Z"
    publicationStage="IS">
   <Copyright>
         <Notice>
			COPYRIGHT (c) IEC, www.iec.ch/tc57/supportdocuments. This version of this NSD is part of IEC_61850-7-420:2020 Edition 2.0; see the IEC_61850-7-420:2020 Edition 2.0 for full legal notices. In case of any differences between the here-below code and the IEC published content, the here-below definition supersedes the IEC publication; it may contain updates. See history files. The whole document has to be taken into account to have a full description of this code component.
			See www.iec.ch/CCv1 for copyright details.
			</Notice>
         <License uri="www.iec.ch/CCv1" kind="Standard"/>
      </Copyright>
   <Changes version="2009"
            revision="A"
            tissues="642-646, 648, 651, 654, 666, 701, 703, 704, 888-889, 903-907, 916, 917, 921-923, 945-947, 955-960, 975-976, 978-989, 992-995, 999-1001, 1003-1006, 1008-1024, 1027-1028, 1031-1033, 1035, 1073-1074, 1087-1090, 1094-1115, 1124, 1126, 1132, 1134, 1153, 1158, 1182, 1183, 1206, 1210, 1215-1219, 1225, 1314, 1320, 1323, 1366, 1392-1394, 1414"/>
   <DependsOn id="IEC 61850-7-4" version="2007" revision="B"/>
   <Abbreviations>
         <Abbreviation name="Add"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Add.desc"/>
         <Abbreviation name="Ava"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Ava.desc"/>
         <Abbreviation name="Avar"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Avar.desc"/>
         <Abbreviation name="Cea"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Cea.desc"/>
         <Abbreviation name="Cnst"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Cnst.desc"/>
         <Abbreviation name="Ctb"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Ctb.desc"/>
         <Abbreviation name="Eff"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Eff.desc"/>
         <Abbreviation name="Egz"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Egz.desc"/>
         <Abbreviation name="Elc"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Elc.desc"/>
         <Abbreviation name="Eps"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Eps.desc"/>
         <Abbreviation name="Esp"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Esp.desc"/>
         <Abbreviation name="Expc"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Expc.desc"/>
         <Abbreviation name="Fct"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Fct.desc"/>
         <Abbreviation name="Frm"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Frm.desc"/>
         <Abbreviation name="Iva"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Iva.desc"/>
         <Abbreviation name="Ivar"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Ivar.desc"/>
         <Abbreviation name="Mn"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Mn.desc"/>
         <Abbreviation name="Ms"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Ms.desc"/>
         <Abbreviation name="Mx"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Mx.desc"/>
         <Abbreviation name="Opl"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Opl.desc"/>
         <Abbreviation name="Ple"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Ple.desc"/>
         <Abbreviation name="Poa"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Poa.desc"/>
         <Abbreviation name="Ren"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Ren.desc"/>
         <Abbreviation name="Rnt"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Rnt.desc"/>
         <Abbreviation name="Rpd"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Rpd.desc"/>
         <Abbreviation name="Rpu"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Rpu.desc"/>
         <Abbreviation name="Rsp"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Rsp.desc"/>
         <Abbreviation name="Rtn"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Rtn.desc"/>
         <Abbreviation name="Sink"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Sink.desc"/>
         <Abbreviation name="Snpt"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Snpt.desc"/>
         <Abbreviation name="Soe"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Soe.desc"/>
         <Abbreviation name="Soh"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Soh.desc"/>
         <Abbreviation name="Susc"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Susc.desc"/>
         <Abbreviation name="Thr"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Thr.desc"/>
         <Abbreviation name="Unit"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Unit.desc"/>
         <Abbreviation name="Wst"
                    descID="IEC61850_7_420.Abbreviations_7_420::Abbr_7_420Term.Wst.desc"/>
      </Abbreviations>
   <Enumerations>
         <Enumeration name="ACSystemKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ACSystemKind.cl.title">
            <Literal name="Single phase" literalVal="1"/>
            <Literal name="Two phases" literalVal="2"/>
            <Literal name="Three phases" literalVal="3"/>
         </Enumeration>
         <Enumeration name="ACToDCConversionKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ACToDCConversionKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="AC to DC" literalVal="1"/>
            <Literal name="AC to AC to DC" literalVal="2"/>
            <Literal name="AC to DC to DC" literalVal="3"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="BatteryTypeKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Lead-acid"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Lead-acid.desc"/>
            <Literal name="Nickel-metal hydrate (NiMH)"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Nickel-metal_hydrate_(NiMH).desc"/>
            <Literal name="Nickel-cadmium (NiCd)"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Nickel-cadmium_(NiCd).desc"/>
            <Literal name="Carbon zinc"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Carbon_zinc.desc"/>
            <Literal name="Lithium ion"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Lithium_ion.desc"/>
            <Literal name="Zinc chloride"
                  literalVal="6"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Zinc_chloride.desc"/>
            <Literal name="Alkaline"
                  literalVal="7"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Alkaline.desc"/>
            <Literal name="Rechargeable alkaline"
                  literalVal="8"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Rechargeable_alkaline.desc"/>
            <Literal name="Sodium sulphur (NaS)" literalVal="9"/>
            <Literal name="Flow" literalVal="10"/>
            <Literal name="Not applicable or not known"
                  literalVal="98"
                  descID="IEC61850_7_420.DOEnums_7_420::BatteryTypeKind.Not_applicable_or_not_known.desc"/>
            <Literal name="Unknown" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="BoilerKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::BoilerKind.cl.title">
            <Literal name="Regular boiler" literalVal="1"/>
            <Literal name="Condensing boiler" literalVal="2"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
         </Enumeration>
         <Enumeration name="CeasetoEnergizeStateKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateKind.cl.title">
            <Literal name="CTE not authorized"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateKind.CTE_not_authorized.desc"/>
            <Literal name="CTE authorized but not requested"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateKind.CTE_authorized_but_not_requested.desc"/>
            <Literal name="CTE auth and requested but DER not in CTE mode"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateKind.CTE_auth_and_requested_but_DER_not_in_CTE_mode.desc"/>
            <Literal name="DER in CTE mode but RTS not authorized"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateKind.DER_in_CTE_mode_but_RTS_not_authorized.desc"/>
            <Literal name="DER in CTE, RTS auth and not requested"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateKind.DER_in_CTE,_RTS_auth_and_not_requested.desc"/>
            <Literal name="RTS authorized and requested"
                  literalVal="6"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateKind.RTS_authorized_and_requested.desc"/>
         </Enumeration>
         <Enumeration name="CeasetoEnergizeStateTransitionKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateTransitionKind.cl.title">
            <Literal name="Cease to energize"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateTransitionKind.Cease_to_energize.desc"/>
            <Literal name="Return to service"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::CeasetoEnergizeStateTransitionKind.Return_to_service.desc"/>
         </Enumeration>
         <Enumeration name="ChargeSourceKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ChargeSourceKind.cl.title">
            <Literal name="Mode A"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::ChargeSourceKind.Mode_A.desc"/>
            <Literal name="Mode B"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::ChargeSourceKind.Mode_B.desc"/>
            <Literal name="Mode C"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::ChargeSourceKind.Mode_C.desc"/>
         </Enumeration>
         <Enumeration name="CHPEnergyConverterKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::CHPEnergyConverterKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Gas turbine" literalVal="1"/>
            <Literal name="Fuel cell" literalVal="2"/>
            <Literal name="Reciprocating engine" literalVal="3"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Unknown" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="CHPGeneratorKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::CHPGeneratorKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Rotating" literalVal="1"/>
            <Literal name="Inverter" literalVal="2"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Unknown" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="CHPOperatingModeKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::CHPOperatingModeKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Heat-production driven" literalVal="1"/>
            <Literal name="Electrical generation driven" literalVal="2"/>
            <Literal name="Combined heat and generation driven" literalVal="3"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Unknown" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="CoolingMethodKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::CoolingMethodKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Passive air cooling (heatsink)" literalVal="1"/>
            <Literal name="Forced air cooling (fan + heatsink)" literalVal="2"/>
            <Literal name="Fluid cooling (water)" literalVal="3"/>
            <Literal name="Heat pipe" literalVal="4"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="DERStateKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::DERStateKind.cl.title">
            <Literal name="on but disconnected and not ready" literalVal="1"/>
            <Literal name="starting up" literalVal="2"/>
            <Literal name="disconnected and available" literalVal="3"/>
            <Literal name="disconnected and authorized" literalVal="4"/>
            <Literal name="synchronizing" literalVal="5"/>
            <Literal name="running" literalVal="6"/>
            <Literal name="stopping and disconnecting under emergency conditions"
                  literalVal="7"/>
            <Literal name="stopping" literalVal="8"/>
            <Literal name="disconnected and blocked"
                  literalVal="9"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateKind.disconnected_and_blocked.desc"/>
            <Literal name="disconnected and in maintenance"
                  literalVal="10"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateKind.disconnected_and_in_maintenance.desc"/>
            <Literal name="failed" literalVal="11"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
         </Enumeration>
         <Enumeration name="DERStateTransitionKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.cl.title">
            <Literal name="Start"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Start.desc"/>
            <Literal name="Connect"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Connect.desc"/>
            <Literal name="Disconnect"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Disconnect.desc"/>
            <Literal name="Disconnect under emergency conditions"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Disconnect_under_emergency_conditions.desc"/>
            <Literal name="Get blocked"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Get_blocked.desc"/>
            <Literal name="Get unblocked"
                  literalVal="6"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Get_unblocked.desc"/>
            <Literal name="Go to maintenance"
                  literalVal="7"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Go_to_maintenance.desc"/>
            <Literal name="Go out of maintenance"
                  literalVal="8"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Go_out_of_maintenance.desc"/>
            <Literal name="Stop"
                  literalVal="9"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Stop.desc"/>
            <Literal name="Turn off controller"
                  literalVal="10"
                  descID="IEC61850_7_420.DOEnums_7_420::DERStateTransitionKind.Turn_off_controller.desc"/>
         </Enumeration>
         <Enumeration name="DERSynchronizationKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::DERSynchronizationKind.cl.title">
            <Literal name="Unavailable to connect" literalVal="1"/>
            <Literal name="Not synchronized, available to connect" literalVal="2"/>
            <Literal name="In synchronization process" literalVal="3"/>
            <Literal name="Synchronized and not connected" literalVal="4"/>
            <Literal name="Synchronized and connected" literalVal="5"/>
            <Literal name="Synchronization failure" literalVal="6"/>
            <Literal name="Disconnecting from grid" literalVal="7"/>
            <Literal name="Not applicable or Unknown" literalVal="98"/>
         </Enumeration>
         <Enumeration name="DERUnitKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::DERUnitKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Diesel / gas engine" literalVal="1"/>
            <Literal name="Gas Turbine engine" literalVal="2"/>
            <Literal name="PV" literalVal="3"/>
            <Literal name="PV plus Storage" literalVal="4"/>
            <Literal name="Lithium Ion Battery Storage" literalVal="5"/>
            <Literal name="Fuel cell" literalVal="6"/>
            <Literal name="Hydro generator" literalVal="7"/>
            <Literal name="Wind turbine" literalVal="8"/>
            <Literal name="Flow battery storage" literalVal="9"/>
            <Literal name="Air compression storage" literalVal="10"/>
            <Literal name="Flywheel storage" literalVal="11"/>
            <Literal name="Capacitor storage" literalVal="12"/>
            <Literal name="Vehicle-to-Grid (V2G)" literalVal="13"/>
            <Literal name="Mixed, hybrid DER" literalVal="50"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="ECPConnKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ECPConnKind.cl.title">
            <Literal name="PoC: Electric point positioned at the connection of the DER to its local EPS"
                  literalVal="1"/>
            <Literal name="IntDER: Electric point positioned internally to the DER"
                  literalVal="2"/>
            <Literal name="PCC: Electric point positioned at the connection of local EPS to area EPS - the EPS contains DERs including local loads"
                  literalVal="3"/>
            <Literal name="PCCD: specific PCC when the EPS contains only DERs with no loads"
                  literalVal="4"/>
            <Literal name="PoCoL: Electric point positioned at the connection of load within the DER local EPS"
                  literalVal="5"/>
            <Literal name="ExtPCC: Electric point positioned at the connection to a PCC external to the area EPS"
                  literalVal="6"/>
            <Literal name="ExtPoC: Electric point positioned at the connection of DER within local EPS outside of the DER local EPS"
                  literalVal="7"/>
            <Literal name="AuxLoad: Connection of auxilliary load to DER" literalVal="8"/>
            <Literal name="PoCG: Connection of group of possibly different types of DERs to local EPS"
                  literalVal="9"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
         </Enumeration>
         <Enumeration name="ECPIslandStateKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ECPIslandStateKind.cl.title">
            <Literal name="Factory configuration (from vendor)" literalVal="1"/>
            <Literal name="Default configuration (after installation)" literalVal="2"/>
            <Literal name="Normal grid-connected configuration" literalVal="3"/>
            <Literal name="Islanded condition 1 (local island behind the PCC)"
                  literalVal="4"/>
            <Literal name="Islanded condition 2 (islanded at PCC)" literalVal="5"/>
            <Literal name="Islanded condition 3 (multiple PCC regional island)"
                  literalVal="6"/>
            <Literal name="1st Alternate grid-connected configuration" literalVal="7"/>
            <Literal name="2nd Alternate grid-connected configuration" literalVal="8"/>
            <Literal name="3rd Alternate grid-connected configuration" literalVal="9"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
         </Enumeration>
         <Enumeration name="EquipmentTestResultKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::EquipmentTestResultKind.cl.title">
            <Literal name="unavailable"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::EquipmentTestResultKind.unavailable.desc"/>
            <Literal name="success"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::EquipmentTestResultKind.success.desc"/>
            <Literal name="fault (bad)"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::EquipmentTestResultKind.fault_(bad).desc"/>
            <Literal name="test running"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::EquipmentTestResultKind.test_running.desc"/>
            <Literal name="test aborted" literalVal="5"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
         </Enumeration>
         <Enumeration name="ExciterKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ExciterKind.cl.title">
            <Literal name="DC"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::ExciterKind.DC.desc"/>
            <Literal name="AC"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::ExciterKind.AC.desc"/>
         </Enumeration>
         <Enumeration name="FrequencyActivePowerRefParamKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::FrequencyActivePowerRefParamKind.cl.title">
            <Literal name="Active power as absolute value" literalVal="1"/>
            <Literal name="Active power as percent of maximum active power"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::FrequencyActivePowerRefParamKind.Active_power_as_percent_of_maximum_active_power.desc"/>
            <Literal name="Active power as percent of snapshot active power reference"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::FrequencyActivePowerRefParamKind.Active_power_as_percent_of_snapshot_active_power_reference.desc"/>
            <Literal name="Active power as percent of the available range active power"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::FrequencyActivePowerRefParamKind.Active_power_as_percent_of_the_available_range_active_power.desc"/>
            <Literal name="Active power as percent of the full range active power"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::FrequencyActivePowerRefParamKind.Active_power_as_percent_of_the_full_range_active_power.desc"/>
         </Enumeration>
         <Enumeration name="FuelDeliveryKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::FuelDeliveryKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Passive" literalVal="1"/>
            <Literal name="Pump" literalVal="2"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="FuelKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::FuelKind.cl.title">
            <Literal name="BIT"
                  literalVal="0"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.BIT.desc"/>
            <Literal name="LIG"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.LIG.desc"/>
            <Literal name="SUB"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.SUB.desc"/>
            <Literal name="WC"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.WC.desc"/>
            <Literal name="SC"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.SC.desc"/>
            <Literal name="DFO"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.DFO.desc"/>
            <Literal name="JF"
                  literalVal="6"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.JF.desc"/>
            <Literal name="KER"
                  literalVal="7"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.KER.desc"/>
            <Literal name="PC"
                  literalVal="8"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.PC.desc"/>
            <Literal name="RFO"
                  literalVal="9"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.RFO.desc"/>
            <Literal name="WO"
                  literalVal="10"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.WO.desc"/>
            <Literal name="NG"
                  literalVal="11"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.NG.desc"/>
            <Literal name="BFG"
                  literalVal="12"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.BFG.desc"/>
            <Literal name="OG"
                  literalVal="13"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.OG.desc"/>
            <Literal name="PG"
                  literalVal="14"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.PG.desc"/>
            <Literal name="NUC"
                  literalVal="15"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.NUC.desc"/>
            <Literal name="AB"
                  literalVal="16"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.AB.desc"/>
            <Literal name="MSW"
                  literalVal="17"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.MSW.desc"/>
            <Literal name="OBS"
                  literalVal="18"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.OBS.desc"/>
            <Literal name="TDF"
                  literalVal="19"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.TDF.desc"/>
            <Literal name="WDS"
                  literalVal="20"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.WDS.desc"/>
            <Literal name="OBL"
                  literalVal="21"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.OBL.desc"/>
            <Literal name="BLQ"
                  literalVal="22"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.BLQ.desc"/>
            <Literal name="SLW"
                  literalVal="23"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.SLW.desc"/>
            <Literal name="WDL"
                  literalVal="24"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.WDL.desc"/>
            <Literal name="LFG"
                  literalVal="25"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.LFG.desc"/>
            <Literal name="OBG"
                  literalVal="26"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.OBG.desc"/>
            <Literal name="GEO"
                  literalVal="27"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.GEO.desc"/>
            <Literal name="WAT"
                  literalVal="28"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.WAT.desc"/>
            <Literal name="SUN"
                  literalVal="29"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.SUN.desc"/>
            <Literal name="WND"
                  literalVal="30"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.WND.desc"/>
            <Literal name="HPS" literalVal="31"/>
            <Literal name="PUR"
                  literalVal="32"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.PUR.desc"/>
            <Literal name="WH"
                  literalVal="33"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.WH.desc"/>
            <Literal name="OTH"
                  literalVal="34"
                  descID="IEC61850_7_420.DOEnums_7_420::FuelKind.OTH.desc"
                  deprecated="true"/>
         </Enumeration>
         <Enumeration name="FuelProcessingInFuelKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::FuelProcessingInFuelKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Hydrogen plus pure oxygen" literalVal="1"/>
            <Literal name="Hydrogen" literalVal="2"/>
            <Literal name="Methanol" literalVal="3"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="FuelProcessingKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::FuelProcessingKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Steam reforming" literalVal="1"/>
            <Literal name="Partial oxidation" literalVal="2"/>
            <Literal name="Autothermal reforming" literalVal="3"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="FuelProcessingOutFuelKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::FuelProcessingOutFuelKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Hydrogen" literalVal="1"/>
            <Literal name="Reformate" literalVal="2"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="GroundingSystemKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::GroundingSystemKind.cl.title">
            <Literal name="IT"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::GroundingSystemKind.IT.desc"/>
            <Literal name="TN-S"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::GroundingSystemKind.TN-S.desc"/>
            <Literal name="TN-C"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::GroundingSystemKind.TN-C.desc"/>
            <Literal name="TN-C-S"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::GroundingSystemKind.TN-C-S.desc"/>
            <Literal name="TT"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::GroundingSystemKind.TT.desc"/>
         </Enumeration>
         <Enumeration name="InverterControlSourceKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::InverterControlSourceKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Current-source inverter (CSI)" literalVal="1"/>
            <Literal name="Voltage-controlled voltage-source inverter (VC-VSI)"
                  literalVal="2"/>
            <Literal name="Current-controlled voltage-source inverter (CC-VSI)"
                  literalVal="3"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="InverterSwitchKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::InverterSwitchKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Field effect transistor" literalVal="1"/>
            <Literal name="Insulated gate bipolar transistor" literalVal="2"/>
            <Literal name="Thyristor" literalVal="3"/>
            <Literal name="Gate turn off thyristor" literalVal="4"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="IsolationKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::IsolationKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Low frequency transformer isolated" literalVal="1"/>
            <Literal name="Hi frequency transformer isolated" literalVal="2"/>
            <Literal name="Non-isolated, grounded" literalVal="3"/>
            <Literal name="Non-isolated, isolated DC source" literalVal="4"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="OutputFilterKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::OutputFilterKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="None" literalVal="1"/>
            <Literal name="Series filter (L)" literalVal="2"/>
            <Literal name="Parallel filter (LC)" literalVal="3"/>
            <Literal name="Series-Parallel (LCL)" literalVal="4"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PhaseFeedKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PhaseFeedKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Feeding from N to A" literalVal="1"/>
            <Literal name="Feeding from N to B" literalVal="2"/>
            <Literal name="Feeding from N to C" literalVal="3"/>
            <Literal name="Feeding from A to B" literalVal="4"/>
            <Literal name="Feeding from A to C" literalVal="5"/>
            <Literal name="Feeding from B to A" literalVal="6"/>
            <Literal name="Feeding from B to C" literalVal="7"/>
            <Literal name="Feeding from C to A" literalVal="8"/>
            <Literal name="Feeding from C to B" literalVal="9"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PhaseKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PhaseKind.cl.title">
            <Literal name="Single phase to neutral" literalVal="1"/>
            <Literal name="Split phase" literalVal="2"/>
            <Literal name="2-phase" literalVal="3"/>
            <Literal name="3-phase delta" literalVal="4"/>
            <Literal name="3-phase wye / 4-wires" literalVal="5"/>
            <Literal name="3-phase wye / 5-wires"
                  literalVal="6"
                  descID="IEC61850_7_420.DOEnums_7_420::PhaseKind.3-phase_wye__per__5-wires.desc"/>
            <Literal name="DC" literalVal="9"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
         </Enumeration>
         <Enumeration name="PVArrayControlModeKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVArrayControlModeKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Maximum power point tracking (MPPT)" literalVal="1"/>
            <Literal name="Power limiter controller" literalVal="2"/>
            <Literal name="DC current limit" literalVal="3"/>
            <Literal name="Array voltage control" literalVal="4"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PVAssemblyKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVAssemblyKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Array" literalVal="1"/>
            <Literal name="Sub-array" literalVal="2"/>
            <Literal name="String" literalVal="3"/>
            <Literal name="Module" literalVal="4"/>
            <Literal name="Plant" literalVal="5"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PVConfigKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVConfigKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Flat plate" literalVal="1"/>
            <Literal name="Concentrating" literalVal="2"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PVControlStateKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVControlStateKind.cl.title">
            <Literal name="Not ready" literalVal="1"/>
            <Literal name="Asleep" literalVal="2"/>
            <Literal name="Awaking up" literalVal="3"/>
            <Literal name="Awake" literalVal="4"/>
            <Literal name="Shutdown / Sleep test" literalVal="5"/>
            <Literal name="Under test" literalVal="6"/>
         </Enumeration>
         <Enumeration name="PVGroundingKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVGroundingKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Positive ground" literalVal="1"/>
            <Literal name="Negative ground" literalVal="2"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Not grounded" literalVal="3"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PVTrackingControlKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVTrackingControlKind.cl.title">
            <Literal name="Stop" literalVal="1"/>
            <Literal name="Start tracking" literalVal="2"/>
            <Literal name="Start reference run" literalVal="3"/>
            <Literal name="Go to manual mode" literalVal="4"/>
            <Literal name="Go to stow position" literalVal="5"/>
            <Literal name="Go to storm position" literalVal="6"/>
            <Literal name="Go to snow position" literalVal="7"/>
            <Literal name="Go to night position" literalVal="8"/>
            <Literal name="Go to maintenance position" literalVal="9"/>
         </Enumeration>
         <Enumeration name="PVTrackingKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Fixed"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.Fixed.desc"/>
            <Literal name="Vertical"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.Vertical.desc"/>
            <Literal name="Inclined"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.Inclined.desc"/>
            <Literal name="Hor Ver"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.Hor_Ver.desc"/>
            <Literal name="Horizontal"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.Horizontal.desc"/>
            <Literal name="Hor Hor NS"
                  literalVal="6"
                  descID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.Hor_Hor_NS.desc"/>
            <Literal name="Hor Hor ES"
                  literalVal="7"
                  descID="IEC61850_7_420.DOEnums_7_420::PVTrackingKind.Hor_Hor_ES.desc"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PVTrackingStatusKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVTrackingStatusKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Stopped" literalVal="1"/>
            <Literal name="Automatic tracking in progress" literalVal="2"/>
            <Literal name="Reference run completed" literalVal="4"/>
            <Literal name="Manual mode" literalVal="5"/>
            <Literal name="Reference run in progress" literalVal="3"/>
            <Literal name="Going to position" literalVal="6"/>
            <Literal name="In target position" literalVal="7"/>
            <Literal name="In stow position" literalVal="8"/>
            <Literal name="In storm position" literalVal="9"/>
            <Literal name="In snow position" literalVal="10"/>
            <Literal name="In night position" literalVal="11"/>
            <Literal name="In maintenance position" literalVal="12"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="PVTrackingTechnologyKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::PVTrackingTechnologyKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Sensory tracking" literalVal="1"/>
            <Literal name="Astronomical tracking" literalVal="2"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="QuadrantRunningStateKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::QuadrantRunningStateKind.cl.title">
            <Literal name="P greater than zero, Q greater than zero" literalVal="1"/>
            <Literal name="P less than zero, Q greater than zero" literalVal="2"/>
            <Literal name="P less than zero, Q less than zero" literalVal="3"/>
            <Literal name="P greater than zero, Q less than zero" literalVal="4"/>
            <Literal name="P equals zero, Q greater than zero" literalVal="5"/>
            <Literal name="P equals zero, Q less than zero" literalVal="6"/>
            <Literal name="P greater than zero, Q equals zero" literalVal="7"/>
            <Literal name="P less than zero, Q equals zero" literalVal="8"/>
            <Literal name="P equals zero, Q equals zero"
                  literalVal="9"
                  descID="IEC61850_7_420.DOEnums_7_420::QuadrantRunningStateKind.P_equals_zero,_Q_equals_zero.desc"/>
         </Enumeration>
         <Enumeration name="ReactivePowerRefParamKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ReactivePowerRefParamKind.cl.title">
            <Literal name="Reactive power in percent of WMax"
                  literalVal="1"
                  descID="IEC61850_7_420.DOEnums_7_420::ReactivePowerRefParamKind.Reactive_power_in_percent_of_WMax.desc"/>
            <Literal name="Reactive power in percent of VArMax"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::ReactivePowerRefParamKind.Reactive_power_in_percent_of_VArMax.desc"/>
            <Literal name="Reactive power in percent of VArAvl"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::ReactivePowerRefParamKind.Reactive_power_in_percent_of_VArAvl.desc"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
         </Enumeration>
         <Enumeration name="ThermalEnergyMediumKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ThermalEnergyMediumKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Water" literalVal="1"/>
            <Literal name="Steam" literalVal="2"/>
            <Literal name="Air" literalVal="3"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="ThermalEnergyStorageKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::ThermalEnergyStorageKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="For heating with storage" literalVal="1"/>
            <Literal name="For heating without storage" literalVal="2"/>
            <Literal name="For cooling with storage" literalVal="3"/>
            <Literal name="For cooling without storage" literalVal="4"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="VoltageActivePowerRefParamKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::VoltageActivePowerRefParamKind.cl.title">
            <Literal name="Active power as absolute value" literalVal="1"/>
            <Literal name="Active power as percent of maximum active power"
                  literalVal="2"
                  descID="IEC61850_7_420.DOEnums_7_420::VoltageActivePowerRefParamKind.Active_power_as_percent_of_maximum_active_power.desc"/>
            <Literal name="Active power as percent of snapshot active power reference"
                  literalVal="3"
                  descID="IEC61850_7_420.DOEnums_7_420::VoltageActivePowerRefParamKind.Active_power_as_percent_of_snapshot_active_power_reference.desc"/>
            <Literal name="Active power as percent of the available range active power"
                  literalVal="4"
                  descID="IEC61850_7_420.DOEnums_7_420::VoltageActivePowerRefParamKind.Active_power_as_percent_of_the_available_range_active_power.desc"/>
            <Literal name="Active power as percent of the full range active power"
                  literalVal="5"
                  descID="IEC61850_7_420.DOEnums_7_420::VoltageActivePowerRefParamKind.Active_power_as_percent_of_the_full_range_active_power.desc"/>
         </Enumeration>
         <Enumeration name="VoltageRegulationKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::VoltageRegulationKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="Regulated output: fixed voltage" literalVal="1"/>
            <Literal name="Regulated output: variable voltage" literalVal="2"/>
            <Literal name="Filtered output: load dependent" literalVal="3"/>
            <Literal name="Unregulated and unfiltered" literalVal="4"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
         <Enumeration name="WaveformConditioningKind"
                   titleID="IEC61850_7_420.DOEnums_7_420::WaveformConditioningKind.cl.title">
            <Literal name="Not applicable or Unknown" literalVal="0" deprecated="true"/>
            <Literal name="None" literalVal="1"/>
            <Literal name="EMI filter" literalVal="2"/>
            <Literal name="Line filter" literalVal="3"/>
            <Literal name="EMI/Line filter" literalVal="4"/>
            <Literal name="Unified power factor" literalVal="5"/>
            <Literal name="Not applicable or not known" literalVal="98"/>
            <Literal name="Other" literalVal="99" deprecated="true"/>
         </Enumeration>
      </Enumerations>
   <LNClasses>
         <AbstractLNClass name="DEResourceLN"
                       titleID="IEC61850_7_420.AbstractDerLNs_7_420::DEResourceLN.cl.title"
                       base="AllEnergyDEResourceLN"/>
         <AbstractLNClass name="AllEnergyDEResourceLN"
                       titleID="IEC61850_7_420.AbstractDerLNs_7_420::AllEnergyDEResourceLN.cl.title"
                       base="ControlEquipmentInterfaceLN">
            <DataObject name="DERId"
                     type="VSG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::AllEnergyDEResourceLN.DERId.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="DER_NameplateRatingsLN"
                       titleID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.cl.title"
                       base="DEResourceLN">
            <DataObject name="OutEcpRef"
                     type="ORG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.OutEcpRef.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="EcpConnTyp"
                     type="ENG"
                     underlyingType="ECPConnKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.EcpConnTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhsConnTyp"
                     type="ENG"
                     underlyingType="PhaseKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.PhsConnTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="DERTyp"
                     type="ENG"
                     underlyingType="DERUnitKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.DERTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OvPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.OvPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.UnPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TmpMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.TmpMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FltRtgPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.FltRtgPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndReactRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.GndReactRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FltAMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.FltAMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SelfVRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.SelfVRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FltDurMaxTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.FltDurMaxTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SelfWRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.SelfWRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SelfPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.SelfPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RvSeq"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.RvSeq.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SelfVRngRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.SelfVRngRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EfcRtgPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.EfcRtgPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndRisRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.GndRisRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SuscRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.SuscRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RegClas"
                     type="VSG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.RegClas.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="HzNomRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.HzNomRtg.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="HzMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.HzMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_NameplateRatingsLN.HzMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="DER_StateAbstractLN"
                       titleID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.cl.title"
                       base="DER_ActualPowerInformationLN">
            <DataObject name="DEROpSt"
                     type="ENS"
                     underlyingType="DERStateKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.DEROpSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="TestRsl"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.TestRsl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TestAddRsl"
                     type="ENS"
                     underlyingType="EquipmentTestResultKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.TestAddRsl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AuthConn"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.AuthConn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DEROpStCtl"
                     type="ENC"
                     underlyingType="DERStateTransitionKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.DEROpStCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CeaEgzCtl"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.CeaEgzCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WSpt"
                     type="APC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.WSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VArSpt"
                     type="APC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.VArSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EmgMod"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.EmgMod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AuthDscon"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.AuthDscon.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TestEna"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.TestEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Test"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.Test.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrMaxTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.StrMaxTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OffMinTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.OffMinTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OnMinTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.OnMinTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StopDlMinTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.StopDlMinTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StopMaxTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.StopMaxTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrDlMinTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.StrDlMinTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AutoStr"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.AutoStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AutoConn"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_StateAbstractLN.AutoConn.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="DER_ActualPowerInformationLN"
                       titleID="IEC61850_7_420.AbstractDerLNs_7_420::DER_ActualPowerInformationLN.cl.title"
                       base="DER_OperationalSettingsLN">
            <DataObject name="SelfSvcWh"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_ActualPowerInformationLN.SelfSvcWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VAPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_ActualPowerInformationLN.VAPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlUpW"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_ActualPowerInformationLN.AvlUpW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlDnW"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_ActualPowerInformationLN.AvlDnW.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="DER_OperationalSettingsLN"
                       titleID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.cl.title"
                       base="DER_NameplateRatingsLN">
            <DataObject name="PFSign"
                     type="ENG"
                     underlyingType="PFSignKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.PFSign.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OplPct"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.OplPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OvPF"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.OvPF.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PFExtSet"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.PFExtSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IsldCtlFol"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.IsldCtlFol.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ClcTotVA"
                     type="ENG"
                     underlyingType="STotalCalcMethodKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.ClcTotVA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FllBckTmExp"
                     type="ING"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.FllBckTmExp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AvarZerWMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.AvarZerWMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IvarZerWMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::DER_OperationalSettingsLN.IvarZerWMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="NonStorageOperationalSettingsLN"
                       titleID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.cl.title"
                       base="DER_StateAbstractLN">
            <DataObject name="VArTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.VArTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvarTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.AvarTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="IvarTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.IvarTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VArAvl"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.VArAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvarAvl"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.AvarAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="IvarAvl"
                     type="MV"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.IvarAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.WMax.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="WOvPFMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.WOvPFMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WUnPFMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.WUnPFMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRmp"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.WRmp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VArMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.VArMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AvarMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.AvarMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IvarMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.IvarMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.VMax.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.VMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.AMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VAMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.VAMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AvaMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.AvaMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IvaMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.IvaMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArSptRef"
                     type="ENG"
                     underlyingType="ReactivePowerRefParamKind"
                     descID="IEC61850_7_420.AbstractDerLNs_7_420::NonStorageOperationalSettingsLN.VArSptRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ElectricalReferenceLN"
                       titleID="IEC61850_7_420.AbstractEcpLNs_7_420::ElectricalReferenceLN.cl.title"
                       base="FunctionLN">
            <DataObject name="ElcStCtlRef"
                     type="ORG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::ElectricalReferenceLN.ElcStCtlRef.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="ElcRefId"
                     type="VSG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::ElectricalReferenceLN.ElcRefId.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ElcMsRef"
                     type="ORG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::ElectricalReferenceLN.ElcMsRef.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="PhysicalElectricalConnectionPointLN"
                       titleID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.cl.title"
                       base="ElectricalReferenceLN">
            <DataObject name="EcpIsldSt"
                     type="ENS"
                     underlyingType="ECPIslandStateKind"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.EcpIsldSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhsConnTyp"
                     type="ENG"
                     underlyingType="PhaseKind"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.PhsConnTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GndSys"
                     type="ENG"
                     underlyingType="GroundingSystemKind"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.GndSys.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRef"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.VRef.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VRefPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.VRefPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.VArRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VARtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.VARtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.WRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.VRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzNom"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.HzNom.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.VMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.VMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DERMsIncl"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.DERMsIncl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RefFrm"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.RefFrm.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="EcpIsldAuto"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::PhysicalElectricalConnectionPointLN.EcpIsldAuto.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="VirtualElectricalReferenceLN"
                       titleID="IEC61850_7_420.AbstractEcpLNs_7_420::VirtualElectricalReferenceLN.cl.title"
                       base="ElectricalReferenceLN">
            <DataObject name="InclElcRef"
                     type="ORG"
                     descID="IEC61850_7_420.AbstractEcpLNs_7_420::VirtualElectricalReferenceLN.InclElcRef.desc"
                     presCond="Mmulti"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="DER_GeneratorLN"
                       titleID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.cl.title"
                       base="GeneratorNameplateRatingsLN">
            <DataObject name="GnSynSt"
                     type="ENS"
                     underlyingType="DERSynchronizationKind"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnSynSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RmpLodSw"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.RmpLodSw.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TotStrCnt"
                     type="INS"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.TotStrCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RemExpcOpTms"
                     type="INS"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.RemExpcOpTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CnstWMax"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.CnstWMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnOpTm"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnOpTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnStabTm"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnStabTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnClDnTm"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnClDnTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AutoVRegPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.AutoVRegPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnEnTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnEnTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnEnPer"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnEnPer.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RenWPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.RenWPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="RenVArPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.RenVArPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnOnCnt"
                     type="INC"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnOnCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PerStrCnt"
                     type="INC"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.PerStrCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OpTms"
                     type="INC"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.OpTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnEnPerRs"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::DER_GeneratorLN.GnEnPerRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="GeneratorUnitLN"
                       titleID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorUnitLN.cl.title"
                       base="ControlEquipmentInterfaceLN"/>
         <AbstractLNClass name="GeneratorNameplateRatingsLN"
                       titleID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.cl.title"
                       base="NonStorageOperationalSettingsLN">
            <DataObject name="WMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.WMaxRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="WOvPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.WOvPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WUnPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.WUnPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VAMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.VAMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.VArMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AvarMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.AvarMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IvarMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.IvarMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.AMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.VMaxRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.VMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ConsWMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.ConsWMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ConsWMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.ConsWMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EmgWMinRtg"
                     type="CSG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.EmgWMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EmgWMaxRtg"
                     type="CSG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.EmgWMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DsconWMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.DsconWMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRpuMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.WRpuMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRpdMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.WRpdMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtbWMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.CtbWMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtbVArMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.CtbVArMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WCtb"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.WCtb.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArCtb"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.VArCtb.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RenWMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.RenWMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RenVArMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractGenLNs_7_420::GeneratorNameplateRatingsLN.RenVArMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="StorageOperationalSettingsLN"
                       titleID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.cl.title"
                       base="DER_StateAbstractLN">
            <DataObject name="ChaAvarTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaAvarTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschAvarTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschAvarTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaIvarTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaIvarTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschIvarTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschIvarTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaAvarAvl"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaAvarAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschAvarAvl"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschAvarAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaIvarAvl"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaIvarAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschIvarAvl"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschIvarAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EffWh"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.EffWh.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="EffWhPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.EffWhPct.desc"
                     presCond="AtLeastOne"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="ChaWMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaWMax.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="DschWMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschWMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaWRmp"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaWRmp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWRmp"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschWRmp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVArMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaVArMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschVArMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschVArMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVAMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaVAMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschVAMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschVAMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAvarMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaAvarMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAvarMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschAvarMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaIvarMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaIvarMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschIvarMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschIvarMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaVMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschVMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschVMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaVMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschVMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschVMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaAMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschAMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaEfc"
                     type="CSG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaEfc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschEfc"
                     type="CSG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschEfc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UseWhMaxPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.UseWhMaxPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UseWhMinPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.UseWhMinPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UseWh"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.UseWh.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaSrc"
                     type="ENG"
                     underlyingType="ChargeSourceKind"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaSrc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaWOvPFMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaWOvPFMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWOvPFMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschWOvPFMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaWUnPFMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.ChaWUnPFMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWUnPFMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.DschWUnPFMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RenChaEna"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageOperationalSettingsLN.RenChaEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="StorageNameplateRatingsLN"
                       titleID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.cl.title"
                       base="StorageOperationalSettingsLN">
            <DataObject name="ChaWMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaWMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschWMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaWRmpRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaWRmpRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWRmpRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschWRmpRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaWOvPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaWOvPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWOvPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschWOvPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaWUnPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaWUnPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWUnPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschWUnPFRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVAMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaVAMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschVAMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschVAMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAvarRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaAvarRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAvarRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschAvarRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaIvarRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaIvarRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschIvarRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschIvarRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaVMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschVMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschVMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaVMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschVMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschVMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaAMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschAMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WhRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.WhRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WhMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.WhMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WhMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.WhMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaEfcRtg"
                     type="CSG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaEfcRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschEfcRtg"
                     type="CSG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.DschEfcRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaSrcRtg"
                     type="ENG"
                     underlyingType="ChargeSourceKind"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::StorageNameplateRatingsLN.ChaSrcRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="DER_StorageLN"
                       titleID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.cl.title"
                       base="StorageNameplateRatingsLN">
            <DataObject name="SocHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocHiWrn"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocHiWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocLoAlm"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocLoWrn"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocLoWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SohLoAlm"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SohLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaCycCnt"
                     type="INS"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.ChaCycCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InWh"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.InWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutWh"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.OutWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SocWh"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="UseSocPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.UseSocPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SocEffWhPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocEffWhPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaWhTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.ChaWhTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschWhTot"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.DschWhTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlDschW"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.AvlDschW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlChaW"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.AvlChaW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaVAPct"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.ChaVAPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlChaWTm"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.AvlChaWTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlDschWTm"
                     type="MV"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.AvlDschWTm.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaWhTotRs"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.ChaWhTotRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWhTotRs"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.DschWhTotRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EqGn"
                     type="ORG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.EqGn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EqLod"
                     type="ORG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.EqLod.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocHiAlsPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocHiAlsPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocHiWrsPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocHiWrsPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocLoAlsPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocLoAlsPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocLoWrsPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SocLoWrsPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SohLoAlsPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.SohLoAlsPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RntEffPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractStoLNs_7_420::DER_StorageLN.RntEffPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="StorageUnitLN"
                       titleID="IEC61850_7_420.AbstractStoLNs_7_420::StorageUnitLN.cl.title"
                       base="ControlEquipmentInterfaceLN"/>
         <AbstractLNClass name="DER_LoadLN"
                       titleID="IEC61850_7_420.AbstractLodLNs_7_420::DER_LoadLN.cl.title"
                       base="LoadNameplateRatingsLN"/>
         <AbstractLNClass name="LoadNameplateRatingsLN"
                       titleID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.cl.title"
                       base="NonStorageOperationalSettingsLN">
            <DataObject name="WMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.WMaxRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="WOvPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.WOvPFRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="WUnPFRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.WUnPFRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.VMaxRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.VMinRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="AMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.AMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VAMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.VAMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRpuMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.WRpuMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRpdMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLodLNs_7_420::LoadNameplateRatingsLN.WRpdMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="LoadUnitLN"
                       titleID="IEC61850_7_420.AbstractLodLNs_7_420::LoadUnitLN.cl.title"
                       base="ControlEquipmentInterfaceLN"/>
         <AbstractLNClass name="DERConverterLN"
                       titleID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.cl.title"
                       base="BaseConverterLN">
            <DataObject name="DCPwrSt"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.DCPwrSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TestRsl"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.TestRsl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TestAddRsl"
                     type="ENS"
                     underlyingType="EquipmentTestResultKind"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.TestAddRsl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DCPwrBlk"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.DCPwrBlk.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Test"
                     type="SPC"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.Test.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WSpt"
                     type="APC"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.WSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VArSpt"
                     type="APC"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.VArSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CmutSelf"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.CmutSelf.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ClMthTyp"
                     type="ENG"
                     underlyingType="CoolingMethodKind"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.ClMthTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IsoTyp"
                     type="ENG"
                     underlyingType="IsolationKind"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.IsoTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ACTyp"
                     type="ENG"
                     underlyingType="ACSystemKind"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.ACTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InAMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.InAMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InVMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.InVMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutWSet"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractOtherLNs_7_420::DERConverterLN.OutWSet.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="LowPassFilterOnFunctionInputLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::LowPassFilterOnFunctionInputLN.cl.title"
                       base="OperationalFunctionLN">
            <DataObject name="InFilByp"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::LowPassFilterOnFunctionInputLN.InFilByp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RspTmms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::LowPassFilterOnFunctionInputLN.RspTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="LowPassFilterOnFunctionOutputLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::LowPassFilterOnFunctionOutputLN.cl.title"
                       base="LowPassFilterOnFunctionInputLN">
            <DataObject name="OutFilByp"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::LowPassFilterOnFunctionOutputLN.OutFilByp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OplTmsMax"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::LowPassFilterOnFunctionOutputLN.OplTmsMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OplTmsMin"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::LowPassFilterOnFunctionOutputLN.OplTmsMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ElectricalContextReferenceLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ElectricalContextReferenceLN.cl.title"
                       base="ControlledLN">
            <DataObject name="InEcpRef"
                     type="ORG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ElectricalContextReferenceLN.InEcpRef.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="EcpConnTyp"
                     type="ENG"
                     underlyingType="ECPConnKind"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ElectricalContextReferenceLN.EcpConnTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="OperationalFunctionLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.cl.title"
                       base="ElectricalContextReferenceLN">
            <DataObject name="RvrtTmExp"
                     type="SPS"
                     transient="true"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.RvrtTmExp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ModPrio"
                     type="INC"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.ModPrio.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ActDlTmms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.ActDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WinTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.WinTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RvrtTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.RvrtTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RmpTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.RmpTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ModPsAcc"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.ModPsAcc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ModNgAcc"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.ModNgAcc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocUseMaxPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.SocUseMaxPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SocUseMinPct"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::OperationalFunctionLN.SocUseMinPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="RampRatesLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.cl.title"
                       base="LowPassFilterOnFunctionOutputLN">
            <DataObject name="RmpRteUse"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.RmpRteUse.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="RpuMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.RpuMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RpdMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.RpdMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaRpuMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.ChaRpuMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaRpdMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.ChaRpdMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EmgRpuMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.EmgRpuMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EmgRpdMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.EmgRpdMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaEmgRpuMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.ChaEmgRpuMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaEmgRpdMax"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.ChaEmgRpdMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RpuMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.RpuMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RpdMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::RampRatesLN.RpdMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ActivePowerLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ActivePowerLN.cl.title"
                       base="RampRatesLN">
            <DataObject name="SocExpcTms"
                     type="INS"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ActivePowerLN.SocExpcTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqW"
                     type="MV"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ActivePowerLN.ReqW.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="SocExpc"
                     type="MV"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ActivePowerLN.SocExpc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SocWhExpc"
                     type="MV"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ActivePowerLN.SocWhExpc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WSpt"
                     type="APC"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ActivePowerLN.WSpt.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="WSptPct"
                     type="APC"
                     descID="IEC61850_7_420.AbstractLNs7_420_Op_Functions::ActivePowerLN.WSptPct.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
         </AbstractLNClass>
         <AbstractLNClass name="HysteresisSnapshotLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.cl.title"
                       base="RampRatesLN">
            <DataObject name="WRef"
                     type="MV"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.WRef.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqW"
                     type="MV"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.ReqW.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="HysEna"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.HysEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SnptBarEna"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.SnptBarEna.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrDlTmms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.StrDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StopDlTmms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.StopDlTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WMaxRefEna"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.WMaxRefEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FilTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.FilTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RtnRmpRte"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::HysteresisSnapshotLN.RtnRmpRte.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="FrequencyActivePowerLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.cl.title"
                       base="HysteresisSnapshotLN">
            <DataObject name="HzWCrv"
                     type="CSG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.HzWCrv.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="HzWCrvRef"
                     type="ENG"
                     underlyingType="FrequencyActivePowerRefParamKind"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.HzWCrvRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WGra"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.WGra.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="F"/>
            <DataObject name="HzRef"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.HzRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzStr"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.HzStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzStop"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.HzStop.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaWGra"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.ChaWGra.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="F"/>
            <DataObject name="HzChgRteTms"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::FrequencyActivePowerLN.HzChgRteTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="RideThroughLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.cl.title"
                       base="OperationalFunctionLN">
            <DataObject name="ModRtSt"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.ModRtSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="TrZnSt"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.TrZnSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CeaZnSt"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.CeaZnSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PrmZnSt"
                     type="SPS"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.PrmZnSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RtRs"
                     type="INC"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.RtRs.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EvtStopTm"
                     type="ING"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.EvtStopTm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PreScCapMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.PreScCapMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PstScCapMin"
                     type="ASG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::RideThroughLN.PstScCapMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ReactivePowerLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::ReactivePowerLN.cl.title"
                       base="RampRatesLN">
            <DataObject name="ReqVAr"
                     type="MV"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::ReactivePowerLN.ReqVAr.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="VArTgtSpt"
                     type="APC"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::ReactivePowerLN.VArTgtSpt.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="VArTgtSptPct"
                     type="APC"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::ReactivePowerLN.VArTgtSptPct.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
            <DataObject name="VArSptRef"
                     type="ENG"
                     underlyingType="ReactivePowerRefParamKind"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::ReactivePowerLN.VArSptRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArAct"
                     type="SPG"
                     descID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::ReactivePowerLN.VArAct.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </AbstractLNClass>
         <AbstractLNClass name="ActivePowerLimitLN"
                       titleID="IEC61850_7_420.AbstractLNs7_420GridCodeModes::ActivePowerLimitLN.cl.title"
                       base="RampRatesLN"/>
         <LNClass name="DECP"
               titleID="IEC61850_7_420.ECP_LNs::DECP.cl.title"
               base="PhysicalElectricalConnectionPointLN"/>
         <LNClass name="DPCC"
               titleID="IEC61850_7_420.ECP_LNs::DPCC.cl.title"
               base="PhysicalElectricalConnectionPointLN">
            <DataObject name="AreaEpsEcpId"
                     type="VSG"
                     descID="IEC61850_7_420.ECP_LNs::DPCC.AreaEpsEcpId.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="AreaEpsWMax"
                     type="ASG"
                     descID="IEC61850_7_420.ECP_LNs::DPCC.AreaEpsWMax.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DVER"
               titleID="IEC61850_7_420.ECP_LNs::DVER.cl.title"
               base="VirtualElectricalReferenceLN"/>
         <LNClass name="DPMC"
               titleID="IEC61850_7_420.DERPowerManagementLN::DPMC.cl.title"
               base="ControllingLN">
            <DataObject name="PFExtQudEsp"
                     type="SPS"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.PFExtQudEsp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ReqPFExtQud"
                     type="SPS"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqPFExtQud.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="WTopFct"
                     type="ORS"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.WTopFct.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="VArTopFct"
                     type="ORS"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.VArTopFct.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="PQSt"
                     type="ENS"
                     underlyingType="QuadrantRunningStateKind"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.PQSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DifWEsp"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.DifWEsp.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="DifVArEsp"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.DifVArEsp.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="PFEsp"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.PFEsp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqPF"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqPF.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ReqW"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqW.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ReqTotW"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqTotW.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqWMin"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqWMin.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ReqWMax"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqWMax.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ReqTotWMin"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqTotWMin.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqTotWMax"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqTotWMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqVAr"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqVAr.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ReqTotVAr"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqTotVAr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqVArMin"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqVArMin.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ReqVArMax"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqVArMax.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ReqTotVArMin"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqTotVArMin.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ReqTotVArMax"
                     type="MV"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.ReqTotVArMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.WSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="DifWSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.DifWSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="WMinSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.WMinSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="WMaxSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.WMaxSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="VArSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.VArSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="DifVArSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.DifVArSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="VArMaxSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.VArMaxSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="VArMinSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.VArMinSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="PFSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.PFSpt.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="PFExtQudSpt"
                     type="SPC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.PFExtQudSpt.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="CeaEgzCtl"
                     type="SPC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.CeaEgzCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RenChaEna"
                     type="SPC"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.RenChaEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DERRef"
                     type="ORG"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.DERRef.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OutEcpRef"
                     type="ORG"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.OutEcpRef.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="FctRef"
                     type="ORG"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.FctRef.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="StrWRpuPct"
                     type="ASG"
                     descID="IEC61850_7_420.DERPowerManagementLN::DPMC.StrWRpuPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DMDR"
               titleID="IEC61850_7_420.DERMixedLNs::DMDR.cl.title"
               base="DER_StateAbstractLN">
            <DataObject name="InclDER"
                     type="ORG"
                     descID="IEC61850_7_420.DERMixedLNs::DMDR.InclDER.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="InclGn"
                     type="ORG"
                     descID="IEC61850_7_420.DERMixedLNs::DMDR.InclGn.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="InclSto"
                     type="ORG"
                     descID="IEC61850_7_420.DERMixedLNs::DMDR.InclSto.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="InclLod"
                     type="ORG"
                     descID="IEC61850_7_420.DERMixedLNs::DMDR.InclLod.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="EqGn"
                     type="ORG"
                     descID="IEC61850_7_420.DERMixedLNs::DMDR.EqGn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EqSto"
                     type="ORG"
                     descID="IEC61850_7_420.DERMixedLNs::DMDR.EqSto.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EqLod"
                     type="ORG"
                     descID="IEC61850_7_420.DERMixedLNs::DMDR.EqLod.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DGEN"
               titleID="IEC61850_7_420.DERGeneratorLNs::DGEN.cl.title"
               base="DER_GeneratorLN">
            <DataObject name="GnOpSt"
                     type="ENS"
                     underlyingType="DERGeneratorStateKind"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.GnOpSt.desc"
                     deprecated="true"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpTmsRs"
                     type="INS"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.OpTmsRs.desc"
                     deprecated="true"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="GnH"
                     type="HMV"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.GnH.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="GnCtl"
                     type="DPC"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.GnCtl.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GnRL"
                     type="DPC"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.GnRL.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GnBlk"
                     type="SPC"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.GnBlk.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GnOnCntRs"
                     type="SPC"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.GnOnCntRs.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PerStrCntRs"
                     type="SPC"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.PerStrCntRs.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InclGn"
                     type="ORG"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.InclGn.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="DERUnit"
                     type="ORG"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.DERUnit.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EqGn"
                     type="ORG"
                     descID="IEC61850_7_420.DERGeneratorLNs::DGEN.EqGn.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DSTO"
               titleID="IEC61850_7_420.DERStorageLNs::DSTO.cl.title"
               base="DER_StorageLN">
            <DataObject name="EqSto"
                     type="ORG"
                     descID="IEC61850_7_420.DERStorageLNs::DSTO.EqSto.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InclSto"
                     type="ORG"
                     descID="IEC61850_7_420.DERStorageLNs::DSTO.InclSto.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="DERUnit"
                     type="ORG"
                     descID="IEC61850_7_420.DERStorageLNs::DSTO.DERUnit.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DLOD"
               titleID="IEC61850_7_420.DERLoadLNs::DLOD.cl.title"
               base="DER_LoadLN">
            <DataObject name="InclLod"
                     type="ORG"
                     descID="IEC61850_7_420.DERLoadLNs::DLOD.InclLod.desc"
                     presCond="Omulti"
                     dsPresCond="F"/>
            <DataObject name="DERUnit"
                     type="ORG"
                     descID="IEC61850_7_420.DERLoadLNs::DLOD.DERUnit.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EqLod"
                     type="ORG"
                     descID="IEC61850_7_420.DERLoadLNs::DLOD.EqLod.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SBAT"
               titleID="IEC61850_7_420.Battery_LNs::SBAT.cl.title"
               base="SupervisionLN">
            <DataObject name="BatEF"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.BatEF.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CelVolLoAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelVolLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CelVolHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelVolHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAmpHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.DschAmpHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAmpHiWrn"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.DschAmpHiWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAmpHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ChaAmpHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAmpHiWrn"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ChaAmpHiWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpHiWrn"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpHiWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpLoAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpLoWrn"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpLoWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbTmpAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbTmpAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbTmpWrn"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbTmpWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbVolAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbVolAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbVolWrn"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbVolWrn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtTmpHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtTmpHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtTmpLoAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtTmpLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVolHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtVolHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVolLoAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtVolLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVolHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnVolHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVolLoAlm"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnVolLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnA"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="IntnV"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CelVolLo"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelVolLo.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CelVolHi"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelVolHi.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CelTmpMax"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelTmpMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CelTmpMin"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelTmpMin.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="IntnAmp"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnAmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="IntnTmp"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmp.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="ExtTmp"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ExtVol"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="IntnVol"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnVol.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CelVolRs"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelVolRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CelVolLoAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelVolLoAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CelVolHiAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.CelVolHiAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAmpHiAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.DschAmpHiAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAmpHiWrs"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.DschAmpHiWrs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAmpHiAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ChaAmpHiAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaAmpHiWrs"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ChaAmpHiWrs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpHiAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpHiAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpHiWrs"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpHiWrs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpLoAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpLoAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnTmpLoWrs"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnTmpLoWrs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbTmpAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbTmpAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbTmpWrs"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbTmpWrs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbVolAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbVolAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UnbVolWrs"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.UnbVolWrs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtTmpHiAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtTmpHiAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtTmpLoAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtTmpLoAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVolHiAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtVolHiAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVolLoAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.ExtVolLoAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVolMxLim"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnVolMxLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVolMnLim"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnVolMnLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVolHiAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnVolHiAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVolLoAls"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::SBAT.IntnVolLoAls.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DBAT"
               titleID="IEC61850_7_420.Battery_LNs::DBAT.cl.title"
               base="StorageUnitLN">
            <DataObject name="SocPro"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.SocPro.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaSt"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ChaSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschSt"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DschSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TestRsl"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.TestRsl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TestAddRsl"
                     type="ENS"
                     underlyingType="EquipmentTestResultKind"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.TestAddRsl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DCSwCls"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DCSwCls.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BatSt"
                     type="SPS"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.BatSt.desc"
                     deprecated="true"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Amp"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.Amp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="Watt"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.Watt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaAmpLim"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ChaAmpLim.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EffAhr"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.EffAhr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaVolLim"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ChaVolLim.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschAmpLim"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DschAmpLim.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CelStrgCnt"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.CelStrgCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlChaAhr"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.AvlChaAhr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AvlDschAhr"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.AvlDschAhr.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChaAhrTot"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ChaAhrTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschAhrTot"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DschAhrTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SocEffAhrPct"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.SocEffAhrPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SocDvPct"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.SocDvPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VolChgRte"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.VolChgRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DschVolLim"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DschVolLim.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CycSocRngPct"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.CycSocRngPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CycAmpAv"
                     type="MV"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.CycAmpAv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="BatTest"
                     type="SPC"
                     transient="true"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.BatTest.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BatOn"
                     type="SPC"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.BatOn.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BatTyp"
                     type="ENG"
                     underlyingType="BatteryTypeKind"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.BatTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ChaAmpMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ChaAmpMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AhrRtg"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.AhrRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EffAhrRtg"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.EffAhrRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AhrMinRtg"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.AhrMinRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ChaVolMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ChaVolMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschAmpMxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DschAmpMxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVolMaxRtg"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ExtVolMaxRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVolNom"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.ExtVolNom.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVolNom"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.IntnVolNom.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntnVNom"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.IntnVNom.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SelfDschWRte"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.SelfDschWRte.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CelParCnt"
                     type="ING"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.CelParCnt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CelSerCnt"
                     type="ING"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.CelSerCnt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWattCrv"
                     type="CSG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DschWattCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschWattTm"
                     type="CSG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.DschWattTm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BatVNom"
                     type="ASG"
                     descID="IEC61850_7_420.Battery_LNs::DBAT.BatVNom.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DPVA"
               titleID="IEC61850_7_420.PhotovoltaicLNs::DPVA.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="Typ"
                     type="ENG"
                     underlyingType="PVAssemblyKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.Typ.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="GndConn"
                     type="ENG"
                     underlyingType="PVGroundingKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.GndConn.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulCnt"
                     type="ING"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.MdulCnt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrgCnt"
                     type="ING"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.StrgCnt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SubArrCnt"
                     type="ING"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.SubArrCnt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ArrArea"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.ArrArea.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ArrWRtg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.ArrWRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Tilt"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.Tilt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Azi"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVA.Azi.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DPVM"
               titleID="IEC61850_7_420.PhotovoltaicLNs::DPVM.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="AVCrvIx"
                     type="INS"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.AVCrvIx.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MdulCfgTyp"
                     type="ENG"
                     underlyingType="PVConfigKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulCfgTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulAVCrv"
                     type="CSG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulAVCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulWRtg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulWRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulW200Rtg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulW200Rtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxMdulV"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MaxMdulV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxMdulA"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MaxMdulA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulOcV"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulOcV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulScA"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulScA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulWTmpDrt"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulWTmpDrt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulATmpDrt"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulATmpDrt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulVTmpDrt"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulVTmpDrt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MdulDrtPct"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVM.MdulDrtPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DPVC"
               titleID="IEC61850_7_420.PhotovoltaicLNs::DPVC.cl.title"
               base="GeneratorUnitLN">
            <DataObject name="CtlModSt"
                     type="INS"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.CtlModSt.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PVCtlSt"
                     type="ENS"
                     underlyingType="PVControlStateKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.PVCtlSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ArrModCtl"
                     type="ENC"
                     underlyingType="PVArrayControlModeKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.ArrModCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkRefV"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.TrkRefV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkWkupV"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.TrkWkupV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkDlWkupTms"
                     type="ING"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.TrkDlWkupTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkDlSlpTms"
                     type="ING"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.TrkDlSlpTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkSlpW"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.TrkSlpW.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkRte"
                     type="ING"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.TrkRte.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkVStep"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DPVC.TrkVStep.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DTRC"
               titleID="IEC61850_7_420.PhotovoltaicLNs::DTRC.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="TrkAlm"
                     type="SPS"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.TrkAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="TrkSt"
                     type="ENS"
                     underlyingType="PVTrackingStatusKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.TrkSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AziDeg"
                     type="MV"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.AziDeg.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ElDeg"
                     type="MV"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.ElDeg.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TrkCtl"
                     type="ENC"
                     underlyingType="PVTrackingControlKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.TrkCtl.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="TrkTyp"
                     type="ENG"
                     underlyingType="PVTrackingKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.TrkTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="TrkTech"
                     type="ENG"
                     underlyingType="PVTrackingTechnologyKind"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.TrkTech.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StowAziDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.StowAziDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StowElDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.StowElDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StormAziDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.StormAziDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StormElDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.StormElDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SnwAziDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.SnwAziDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SnwElDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.SnwElDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NightAziDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.NightAziDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NightElDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.NightElDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaintAziDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.MaintAziDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaintElDeg"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.MaintElDeg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntvAzi"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.IntvAzi.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntvEl"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.IntvEl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="IntvTm"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.IntvTm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AziDegTgt"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.AziDegTgt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ElDegTgt"
                     type="ASG"
                     descID="IEC61850_7_420.PhotovoltaicLNs::DTRC.ElDegTgt.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DCIP"
               titleID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.cl.title"
               base="GeneratorUnitLN">
            <DataObject name="EngOnOff"
                     type="SPS"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.EngOnOff.desc"
                     deprecated="true"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="EngSpd"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.EngSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EngTorq"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.EngTorq.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EngTmDeg"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.EngTmDeg.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImpactHzPct"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ImpactHzPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="BlowFlw"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.BlowFlw.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InOxFlwRte"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.InOxFlwRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WstGasFlwRte"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.WstGasFlwRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LubCsmp"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.LubCsmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TrsVLim"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.TrsVLim.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbALim"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ImbALim.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ImbVLim"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ImbVLim.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HACrvPct"
                     type="HMV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.HACrvPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HVCrvPct"
                     type="HMV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.HVCrvPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChgLimVPct"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ChgLimVPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChgLimAng"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ChgLimAng.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ChgLimRatAng"
                     type="MV"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ChgLimRatAng.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CrankCtl"
                     type="SPC"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.CrankCtl.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DiagEna"
                     type="DPC"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.DiagEna.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EmgCtl"
                     type="DPC"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.EmgCtl.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EngCtl"
                     type="DPC"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.EngCtl.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HeatRteCrv"
                     type="CSG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.HeatRteCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NumPle"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.NumPle.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SpdMin"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.SpdMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SpdMax"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.SpdMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SpdNom"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.SpdNom.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SpdTgt"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.SpdTgt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EngTorqTgt"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.EngTorqTgt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WMaxVArCrv"
                     type="CSG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.WMaxVArCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WMinVArCrv"
                     type="CSG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.WMinVArCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WVArVLimCrv"
                     type="CSG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.WVArVLimCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OcDirTms"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.OcDirTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OcSubDirTms"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.OcSubDirTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OcSubQudTms"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.OcSubQudTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ScDirTms"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ScDirTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ScSubDirTms"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ScSubDirTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ScSubQudTms"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ScSubQudTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InerTms"
                     type="ING"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.InerTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InOxFlwTgt"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.InOxFlwTgt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LubCsmpTgt"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.LubCsmpTgt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SttLkgX"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.SttLkgX.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="X0"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.X0.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="X2"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.X2.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xd"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.Xd.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xdp"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.Xdp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xds"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.Xds.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xqs"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.Xqs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xqp"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.Xqp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Xq"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.Xq.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ZerSeqRis"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.ZerSeqRis.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PosSeqRis"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.PosSeqRis.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NgSeqRis"
                     type="ASG"
                     descID="IEC61850_7_420.ReciprocatingEngineLNs::DCIP.NgSeqRis.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DFCL"
               titleID="IEC61850_7_420.FuelCellLNs::DFCL.cl.title"
               base="GeneratorUnitLN">
            <DataObject name="ConnGriCnt"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.ConnGriCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LifeEfcPct"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.LifeEfcPct.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="InstEfcPct"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.InstEfcPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaintTms"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.MaintTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StrCnt"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.StrCnt.desc"
                     deprecated="true"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="LifeTms"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.LifeTms.desc"
                     deprecated="true"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="FuelCsmp"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.FuelCsmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WtrCsmp"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.WtrCsmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InOxFlwRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.InOxFlwRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WtrLev"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.WtrLev.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutH2Rte"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.OutH2Rte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutH2Lev"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.OutH2Lev.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WtrCndct"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.WtrCndct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="LifeWh"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.LifeWh.desc"
                     deprecated="true"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="FuelStop"
                     type="SPC"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.FuelStop.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="StrCntRs"
                     type="SPC"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.StrCntRs.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EmgCtl"
                     type="SPC"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.EmgCtl.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GriIndpWRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.GriIndpWRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GriDepRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.GriDepRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HzRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.HzRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuelTyp"
                     type="ENG"
                     underlyingType="FuelKind"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.FuelTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EfcPct"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.EfcPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ALim"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.ALim.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VLim"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.VLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFCL.VRtg.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DSTK"
               titleID="IEC61850_7_420.FuelCellLNs::DSTK.cl.title"
               base="FunctionLN">
            <DataObject name="StcSt"
                     type="SPS"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="CelVTrCnt"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.CelVTrCnt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StcLodTms"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcLodTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="MaintTms"
                     type="INS"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.MaintTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StcWh"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StcEfcPct"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcEfcPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutDCV"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.OutDCV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutDCA"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.OutDCA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InClTmp"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.InClTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutClTmp"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.OutClTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClFlwRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.ClFlwRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ClPres"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.ClPres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="H2FlwRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.H2FlwRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InH2Pres"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.InH2Pres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InOxFlwRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.InOxFlwRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InOxPres"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.InOxPres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="StcWRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcWRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StcVRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcVRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StcARtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcARtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StcFuelTyp"
                     type="ENG"
                     underlyingType="FuelKind"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.StcFuelTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CelCnt"
                     type="ING"
                     descID="IEC61850_7_420.FuelCellLNs::DSTK.CelCnt.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DFPM"
               titleID="IEC61850_7_420.FuelCellLNs::DFPM.cl.title"
               base="FunctionLN">
            <DataObject name="FPMSt"
                     type="SPS"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.FPMSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InAccmWh"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.InAccmWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutAccmWh"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.OutAccmWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="CnvEfc"
                     type="MV"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.CnvEfc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ProcTyp"
                     type="ENG"
                     underlyingType="FuelProcessingKind"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.ProcTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ThmRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.ThmRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InFuelTyp"
                     type="ENG"
                     underlyingType="FuelProcessingInFuelKind"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.InFuelTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutFuelTyp"
                     type="ENG"
                     underlyingType="FuelProcessingOutFuelKind"
                     descID="IEC61850_7_420.FuelCellLNs::DFPM.OutFuelTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="KFUL"
               titleID="IEC61850_7_420.FuelSystemLNs::KFUL.cl.title"
               base="SupervisionLN">
            <DataObject name="AccmOpTms"
                     type="INS"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.AccmOpTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FuelCostAv"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.FuelCostAv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FuelEfcPct"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.FuelEfcPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AccmTotFuel"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.AccmTotFuel.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AccmFuel"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.AccmFuel.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FuelRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.FuelRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FuelCalAv"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.FuelCalAv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="AccmFuelRs"
                     type="SPC"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.AccmFuelRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="AccmOpTmRs"
                     type="SPC"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.AccmOpTmRs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuelTyp"
                     type="ENG"
                     underlyingType="FuelKind"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.FuelTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="Ccy"
                     type="CUG"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.Ccy.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuelCost"
                     type="ASG"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.FuelCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GrossCalVal"
                     type="ASG"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.GrossCalVal.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuelEfcRtg"
                     type="ASG"
                     descID="IEC61850_7_420.FuelSystemLNs::KFUL.FuelEfcRtg.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="KFLV"
               titleID="IEC61850_7_420.FuelSystemLNs::KFLV.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="FuelSt"
                     type="SPS"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.FuelSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InFuelRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.InFuelRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutFuelRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.OutFuelRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InFuelTmp"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.InFuelTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="OutFuelTmp"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.OutFuelTmp.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FuelRalA"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.FuelRalA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FuelRalPres"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.FuelRalPres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="EngFuelRte"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.EngFuelRte.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TmPres"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.TmPres.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="TmRalActrA"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.TmRalActrA.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="PmpActrA"
                     type="MV"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.PmpActrA.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FuelStr"
                     type="SPC"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.FuelStr.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuelStop"
                     type="SPC"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.FuelStop.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuelDlvTyp"
                     type="ENG"
                     underlyingType="FuelDeliveryKind"
                     descID="IEC61850_7_420.FuelSystemLNs::KFLV.FuelDlvTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DCHC"
               titleID="IEC61850_7_420.CHP_LNs::DCHC.cl.title"
               base="GeneratorUnitLN">
            <DataObject name="MaintTms"
                     type="INS"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.MaintTms.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HtPwrEfc"
                     type="MV"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.HtPwrEfc.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="HtTyp"
                     type="ENG"
                     underlyingType="ThermalEnergyMediumKind"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.HtTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="MaxHtCap"
                     type="ASG"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.MaxHtCap.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HtEfcPct"
                     type="ASG"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.HtEfcPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ClTyp"
                     type="ENG"
                     underlyingType="ThermalEnergyMediumKind"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.ClTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EnCnvTyp"
                     type="ENG"
                     underlyingType="CHPEnergyConverterKind"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.EnCnvTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="GnTyp"
                     type="ENG"
                     underlyingType="CHPGeneratorKind"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.GnTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FuelTyp"
                     type="ENG"
                     underlyingType="FuelKind"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.FuelTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OpModCHP"
                     type="ENG"
                     underlyingType="CHPOperatingModeKind"
                     descID="IEC61850_7_420.CHP_LNs::DCHC.OpModCHP.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DCTS"
               titleID="IEC61850_7_420.CHP_LNs::DCTS.cl.title"
               base="FunctionLN">
            <DataObject name="ThmCapTot"
                     type="MV"
                     descID="IEC61850_7_420.CHP_LNs::DCTS.ThmCapTot.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThmCapPct"
                     type="MV"
                     descID="IEC61850_7_420.CHP_LNs::DCTS.ThmCapPct.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThmIn"
                     type="MV"
                     descID="IEC61850_7_420.CHP_LNs::DCTS.ThmIn.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThmOut"
                     type="MV"
                     descID="IEC61850_7_420.CHP_LNs::DCTS.ThmOut.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThmLos"
                     type="MV"
                     descID="IEC61850_7_420.CHP_LNs::DCTS.ThmLos.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ThmStoTyp"
                     type="ENG"
                     underlyingType="ThermalEnergyStorageKind"
                     descID="IEC61850_7_420.CHP_LNs::DCTS.ThmStoTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ThmOutEst"
                     type="ORG"
                     descID="IEC61850_7_420.CHP_LNs::DCTS.ThmOutEst.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DCHB"
               titleID="IEC61850_7_420.CHP_LNs::DCHB.cl.title"
               base="ControlEquipmentInterfaceLN">
            <DataObject name="BoilRdy"
                     type="SPS"
                     descID="IEC61850_7_420.CHP_LNs::DCHB.BoilRdy.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BoilDnReg"
                     type="SPS"
                     descID="IEC61850_7_420.CHP_LNs::DCHB.BoilDnReg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BoilWh"
                     type="MV"
                     descID="IEC61850_7_420.CHP_LNs::DCHB.BoilWh.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="BoilCtl"
                     type="SPC"
                     descID="IEC61850_7_420.CHP_LNs::DCHB.BoilCtl.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="BoilTyp"
                     type="ENG"
                     underlyingType="BoilerKind"
                     descID="IEC61850_7_420.CHP_LNs::DCHB.BoilTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DEXC"
               titleID="IEC61850_7_420.DERExcitationLNs::DEXC.cl.title"
               base="EquipmentInterfaceLN">
            <DataObject name="ExtSt"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="DrpV"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.DrpV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PwrStab"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.PwrStab.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxHiVLim"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.MaxHiVLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="MaxLoVLim"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.MaxLoVLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FlshAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.FlshAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PwrSupAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.PwrSupAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DCAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.DCAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ACAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ACAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="UPSAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.UPSAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkA"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.BlkA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkV"
                     type="SPS"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.BlkV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtTyp"
                     type="ENG"
                     underlyingType="ExciterKind"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="NoLodExtV"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.NoLodExtV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="NoLodExtA"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.NoLodExtA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PFExtV"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.PFExtV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PFExtA"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.PFExtA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtForc"
                     type="SPG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtForc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtInerTms"
                     type="ING"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtInerTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtGain"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtGain.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhLdComp"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.PhLdComp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VSpt"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.VSpt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtlHzHiLim"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.CtlHzHiLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtlHzLoLim"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.CtlHzLoLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StabSigWash"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.StabSigWash.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StabGain"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.StabGain.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtlHzHiAlm"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.CtlHzHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtCeilV"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtCeilV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CtlHzLoAlm"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.CtlHzLoAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtCeilA"
                     type="ASG"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtCeilA.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVTms"
                     type="ING"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtVTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ExtVDurTms"
                     type="ING"
                     descID="IEC61850_7_420.DERExcitationLNs::DEXC.ExtVDurTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DINV"
               titleID="IEC61850_7_420.DERInverterLNs::DINV.cl.title"
               base="DERConverterLN">
            <DataObject name="InvACLosAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.InvACLosAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InvDCLosAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.InvDCLosAlm.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InvGriLosAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.InvGriLosAlm.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="InvSwAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.InvSwAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="Stdby"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.Stdby.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CurLev"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.CurLev.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InvManStopSt"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.InvManStopSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GriModSt"
                     type="ENS"
                     underlyingType="GridConnectStateKind"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.GriModSt.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArAvl"
                     type="MV"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.VArAvl.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DCVSpt"
                     type="APC"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.DCVSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="InvSwTyp"
                     type="ENG"
                     underlyingType="InverterSwitchKind"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.InvSwTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InvCtlSrc"
                     type="ENG"
                     underlyingType="InverterControlSourceKind"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.InvCtlSrc.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WRtg"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.WRtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VARtg"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.VARtg.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="WVArVLim"
                     type="CSG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.WVArVLim.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WVArVLimSet"
                     type="CSG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.WVArVLimSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="SwHz"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.SwHz.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhsACfg"
                     type="ENG"
                     underlyingType="PhaseFeedKind"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.PhsACfg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhsBCfg"
                     type="ENG"
                     underlyingType="PhaseFeedKind"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.PhsBCfg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PhsCCfg"
                     type="ENG"
                     underlyingType="PhaseFeedKind"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.PhsCCfg.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="GriMod"
                     type="ENG"
                     underlyingType="GridConnectModeKind"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.GriMod.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutHzSet"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.OutHzSet.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutPFSet"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.OutPFSet.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutVArSet"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DINV.OutVArSet.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DRTF"
               titleID="IEC61850_7_420.DERInverterLNs::DRTF.cl.title"
               base="DERConverterLN">
            <DataObject name="VRegTyp"
                     type="ENG"
                     underlyingType="VoltageRegulationKind"
                     descID="IEC61850_7_420.DERInverterLNs::DRTF.VRegTyp.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="CnvTyp"
                     type="ENG"
                     underlyingType="ACToDCConversionKind"
                     descID="IEC61850_7_420.DERInverterLNs::DRTF.CnvTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutFilTyp"
                     type="ENG"
                     underlyingType="OutputFilterKind"
                     descID="IEC61850_7_420.DERInverterLNs::DRTF.OutFilTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="InWavTyp"
                     type="ENG"
                     underlyingType="WaveformConditioningKind"
                     descID="IEC61850_7_420.DERInverterLNs::DRTF.InWavTyp.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutVSet"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DRTF.OutVSet.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="OutALim"
                     type="ASG"
                     descID="IEC61850_7_420.DERInverterLNs::DRTF.OutALim.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="SINV"
               titleID="IEC61850_7_420.DERInverterLNs::SINV.cl.title"
               base="SupervisionLN">
            <DataObject name="TmpHiAlm"
                     type="SPS"
                     descID="IEC61850_7_420.DERInverterLNs::SINV.TmpHiAlm.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="EnclTmp"
                     type="MV"
                     descID="IEC61850_7_420.DERInverterLNs::SINV.EnclTmp.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="HeatSinkTmp"
                     type="MV"
                     descID="IEC61850_7_420.DERInverterLNs::SINV.HeatSinkTmp.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="TrfTmp"
                     type="MV"
                     descID="IEC61850_7_420.DERInverterLNs::SINV.TrfTmp.desc"
                     presCond="Omulti"
                     dsPresCond="O"/>
            <DataObject name="FanSpd"
                     type="MV"
                     descID="IEC61850_7_420.DERInverterLNs::SINV.FanSpd.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="DCCT"
               titleID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.cl.title"
               base="FunctionLN">
            <DataObject name="Ccy"
                     type="CUG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.Ccy.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.OpCost.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="OpWhCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.OpWhCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.StrCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StopCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.StopCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RampCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.RampCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HeatRteCost"
                     type="CSG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.HeatRteCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CRteCost"
                     type="CSG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CRteCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CnttExptWLim"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CnttExptWLim.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CnttImptWLim"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CnttImptWLim.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CnttPF"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CnttPF.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CnttHiV"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CnttHiV.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CnttLoV"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CnttLoV.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CnttAnc"
                     type="ENG"
                     underlyingType="AncillaryServiceKind"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CnttAnc.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HeatRtePrc"
                     type="SCR"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.HeatRtePrc.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CRtePrc"
                     type="SCR"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCCT.CRtePrc.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DCST"
               titleID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.cl.title"
               base="FunctionLN">
            <DataObject name="Ccy"
                     type="CUG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.Ccy.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HeatRteAct"
                     type="CSG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.HeatRteAct.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="HeatRteCost"
                     type="CSG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.HeatRteCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RampCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.RampCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StrCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.StrCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="StopCost"
                     type="ASG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.StopCost.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CostRamp"
                     type="CSG"
                     descID="IEC61850_7_420.DERFinancialLNs_7_420::DCST.CostRamp.desc"
                     deprecated="true"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="MMET"
               titleID="IEC61850_7_420.MeasurementExtLN::MMETExt.cl.title"
               isExtension="true">
            <DataObject name="PoaInsol"
                     type="MV"
                     descID="IEC61850_7_420.MeasurementExtLN::MMETExt.PoaInsol.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="MMXU"
               titleID="IEC61850_7_420.MeasurementExtLN::MMXUExt.cl.title"
               isExtension="true">
            <DataObject name="PFExtQud"
                     type="SPS"
                     descID="IEC61850_7_420.MeasurementExtLN::MMXUExt.PFExtQud.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PQSt"
                     type="ENS"
                     underlyingType="QuadrantRunningStateKind"
                     descID="IEC61850_7_420.MeasurementExtLN::MMXUExt.PQSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DCTE"
               titleID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.cl.title"
               base="OperationalFunctionLN">
            <DataObject name="CeaEgzReqSt"
                     type="ENS"
                     underlyingType="CeasetoEnergizeStateKind"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.CeaEgzReqSt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="CeaEgzReq"
                     type="SPS"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.CeaEgzReq.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="CeaEgzAuth"
                     type="SPC"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.CeaEgzAuth.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="CeaEgzReqCtl"
                     type="ENC"
                     underlyingType="CeasetoEnergizeStateTransitionKind"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.CeaEgzReqCtl.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="RtnSvcAuth"
                     type="SPC"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.RtnSvcAuth.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="RtnSvcAuto"
                     type="SPG"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.RtnSvcAuto.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="RtnRmpTmms"
                     type="ING"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.RtnRmpTmms.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="RtnDlTmms"
                     type="ING"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.RtnDlTmms.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VArLimPct"
                     type="ASG"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.VArLimPct.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VHiLim"
                     type="ASG"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.VHiLim.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="VLoLim"
                     type="ASG"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.VLoLim.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="HzHiLim"
                     type="ASG"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.HzHiLim.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="HzLoLim"
                     type="ASG"
                     descID="IEC61850_7_420.CeasetoEnergizeLN::DCTE.HzLoLim.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DHVT"
               titleID="IEC61850_7_420.Voltage_Ride-ThroughLNs::DHVT.cl.title"
               base="RideThroughLN"/>
         <LNClass name="DLVT"
               titleID="IEC61850_7_420.Voltage_Ride-ThroughLNs::DLVT.cl.title"
               base="RideThroughLN"/>
         <LNClass name="DHFT"
               titleID="IEC61850_7_420.Frequency_Ride-ThroughLNs::DHFT.cl.title"
               base="RideThroughLN">
            <DataObject name="HzChgMaxRte"
                     type="ING"
                     descID="IEC61850_7_420.Frequency_Ride-ThroughLNs::DHFT.HzChgMaxRte.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DLFT"
               titleID="IEC61850_7_420.Frequency_Ride-ThroughLNs::DLFT.cl.title"
               base="RideThroughLN">
            <DataObject name="HzChgMaxRte"
                     type="ING"
                     descID="IEC61850_7_420.Frequency_Ride-ThroughLNs::DLFT.HzChgMaxRte.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DHFW"
               titleID="IEC61850_7_420.Frequency-ActivePowerLNs::DHFW.cl.title"
               base="FrequencyActivePowerLN"/>
         <LNClass name="DLFW"
               titleID="IEC61850_7_420.Frequency-ActivePowerLNs::DLFW.cl.title"
               base="FrequencyActivePowerLN"/>
         <LNClass name="DAGC"
               titleID="IEC61850_7_420.ActivePowerLNs::DAGC.cl.title"
               base="ActivePowerLN">
            <DataObject name="WMinAvl"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DAGC.WMinAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WMaxAvl"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DAGC.WMaxAvl.desc"
                     presCond="O"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="DTCD"
               titleID="IEC61850_7_420.ActivePowerLNs::DTCD.cl.title"
               base="ActivePowerLN">
            <DataObject name="SocDate"
                     type="TCS"
                     descID="IEC61850_7_420.ActivePowerLNs::DTCD.SocDate.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="WhReq"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DTCD.WhReq.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="DurMin"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DTCD.DurMin.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="SocUseTgtPct"
                     type="ING"
                     descID="IEC61850_7_420.ActivePowerLNs::DTCD.SocUseTgtPct.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="DateTgt"
                     type="TSG"
                     descID="IEC61850_7_420.ActivePowerLNs::DTCD.DateTgt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ChaDurMax"
                     type="ING"
                     descID="IEC61850_7_420.ActivePowerLNs::DTCD.ChaDurMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DschDurMax"
                     type="ING"
                     descID="IEC61850_7_420.ActivePowerLNs::DTCD.DschDurMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DVWC"
               titleID="IEC61850_7_420.ActivePowerLNs::DVWC.cl.title"
               base="HysteresisSnapshotLN">
            <DataObject name="ReqWMax"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DVWC.ReqWMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VRefEsp"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DVWC.VRefEsp.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="VWCrv"
                     type="CSG"
                     descID="IEC61850_7_420.ActivePowerLNs::DVWC.VWCrv.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VWCrvRef"
                     type="ENG"
                     underlyingType="VoltageActivePowerRefParamKind"
                     descID="IEC61850_7_420.ActivePowerLNs::DVWC.VWCrvRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRefOfs"
                     type="ASG"
                     descID="IEC61850_7_420.ActivePowerLNs::DVWC.VRefOfs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRefPct"
                     type="ASG"
                     descID="IEC61850_7_420.ActivePowerLNs::DVWC.VRefPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DWFL"
               titleID="IEC61850_7_420.ActivePowerLNs::DWFL.cl.title"
               base="ActivePowerLN">
            <DataObject name="FolWRef"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DWFL.FolWRef.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="FolWThr"
                     type="ASG"
                     descID="IEC61850_7_420.ActivePowerLNs::DWFL.FolWThr.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="FolWPct"
                     type="ASG"
                     descID="IEC61850_7_420.ActivePowerLNs::DWFL.FolWPct.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="FolWTgt"
                     type="ASG"
                     descID="IEC61850_7_420.ActivePowerLNs::DWFL.FolWTgt.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DWGC"
               titleID="IEC61850_7_420.ActivePowerLNs::DWGC.cl.title"
               base="ActivePowerLN"/>
         <LNClass name="DWMN"
               titleID="IEC61850_7_420.ActivePowerLNs::DWMN.cl.title"
               base="ActivePowerLimitLN">
            <DataObject name="ReqWMin"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DWMN.ReqWMin.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WMinSptPct"
                     type="APC"
                     descID="IEC61850_7_420.ActivePowerLNs::DWMN.WMinSptPct.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="WMinSpt"
                     type="APC"
                     descID="IEC61850_7_420.ActivePowerLNs::DWMN.WMinSpt.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="DWMX"
               titleID="IEC61850_7_420.ActivePowerLNs::DWMX.cl.title"
               base="ActivePowerLimitLN">
            <DataObject name="ReqWMax"
                     type="MV"
                     descID="IEC61850_7_420.ActivePowerLNs::DWMX.ReqWMax.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="WMaxSptPct"
                     type="APC"
                     descID="IEC61850_7_420.ActivePowerLNs::DWMX.WMaxSptPct.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="O"/>
            <DataObject name="WMaxSpt"
                     type="APC"
                     descID="IEC61850_7_420.ActivePowerLNs::DWMX.WMaxSpt.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="O"/>
         </LNClass>
         <LNClass name="DFPF"
               titleID="IEC61850_7_420.PowerFactorLNs::DFPF.cl.title"
               base="RampRatesLN">
            <DataObject name="ReqPFExt"
                     type="SPS"
                     descID="IEC61850_7_420.PowerFactorLNs::DFPF.ReqPFExt.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ReqPF"
                     type="MV"
                     descID="IEC61850_7_420.PowerFactorLNs::DFPF.ReqPF.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="PFGnTgtSpt"
                     type="APC"
                     descID="IEC61850_7_420.PowerFactorLNs::DFPF.PFGnTgtSpt.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="PFGnExtQud"
                     type="SPC"
                     descID="IEC61850_7_420.PowerFactorLNs::DFPF.PFGnExtQud.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="PFLodTgtSpt"
                     type="APC"
                     descID="IEC61850_7_420.PowerFactorLNs::DFPF.PFLodTgtSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="PFLodExtQud"
                     type="SPC"
                     descID="IEC61850_7_420.PowerFactorLNs::DFPF.PFLodExtQud.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DVVR"
               titleID="IEC61850_7_420.ReactivePowerLNs::DVVR.cl.title"
               base="ReactivePowerLN">
            <DataObject name="VRefEsp"
                     type="MV"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VRefEsp.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="VRefSpt"
                     type="APC"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VRefSpt.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VVArCrv"
                     type="CSG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VVArCrv.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="1"
                     dsPresCond="F"/>
            <DataObject name="VRefAdjEna"
                     type="SPG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VRefAdjEna.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRefTmms"
                     type="ING"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VRefTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VRefOfs"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VRefOfs.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VVArCrvDel"
                     type="CSG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VVArCrvDel.desc"
                     presCond="AllOnlyOneGroup"
                     presCondArgs="2"
                     dsPresCond="F"/>
            <DataObject name="VRefPct"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DVVR.VRefPct.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DVAR"
               titleID="IEC61850_7_420.ReactivePowerLNs::DVAR.cl.title"
               base="ReactivePowerLN"/>
         <LNClass name="DWVR"
               titleID="IEC61850_7_420.ReactivePowerLNs::DWVR.cl.title"
               base="ReactivePowerLN">
            <DataObject name="WVArCrv"
                     type="CSG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DWVR.WVArCrv.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="WBarEna"
                     type="SPG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DWVR.WBarEna.desc"
                     presCond="M"
                     dsPresCond="F"/>
         </LNClass>
         <LNClass name="DRGS"
               titleID="IEC61850_7_420.ReactivePowerLNs::DRGS.cl.title"
               base="ReactivePowerLN">
            <DataObject name="HiVRtSt"
                     type="SPS"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.HiVRtSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="LoVRtSt"
                     type="SPS"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.LoVRtSt.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="ReqA"
                     type="MV"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.ReqA.desc"
                     presCond="M"
                     dsPresCond="O"/>
            <DataObject name="DelV"
                     type="MV"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.DelV.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="VAv"
                     type="MV"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.VAv.desc"
                     presCond="O"
                     dsPresCond="O"/>
            <DataObject name="ArGraMod"
                     type="SPG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.ArGraMod.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ArGraSag"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.ArGraSag.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="ArGraSwl"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.ArGraSwl.desc"
                     presCond="M"
                     dsPresCond="F"/>
            <DataObject name="HysBlkZnV"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.HysBlkZnV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkZnV"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.BlkZnV.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="BlkZnTmms"
                     type="ING"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.BlkZnTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="FilTms"
                     type="ING"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.FilTms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="HoldTmms"
                     type="ING"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.HoldTmms.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DbVMin"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.DbVMin.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="DbVMax"
                     type="ASG"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.DbVMax.desc"
                     presCond="O"
                     dsPresCond="F"/>
            <DataObject name="VArSptRef"
                     type="ENG"
                     underlyingType="ReactivePowerRefParamKind"
                     descID="IEC61850_7_420.ReactivePowerLNs::DRGS.VArSptRef.desc"
                     presCond="O"
                     dsPresCond="F"/>
         </LNClass>
      </LNClasses>
</NS>
`;
const nsd81 = `<?xml version="1.0" encoding="UTF-8"?>
<!--
COPYRIGHT (c) IEC, 2016. All rights reserved. Disclaimer: The IEC disclaims liability for any personal injury, property or other damages of any nature whatsoever, whether special, indirect, consequential or compensatory, directly or indirectly resulting from this software and the document upon which its methods are based, use of, or reliance upon.
-->
<!--
History:
- 2016-01-11: first version
- 2016-02-18: corrections according to TF meeting in Cathedral City
	+ MFctrl -> MOctrl
	+ MFsboNormal -> MOsboNormal
	+ MFsboEnhanced -> MOsboEnhanced
- 2016-04-29:
    + updated file according to NSD.xsd changes (removal of AppliesTo element; usage of "abstract" type DAReference instead of VisString129; 8-1 introduced FCs and their applicable services)
    + added umlDate attribute for versioning
- 2016-05-18: [updates according to today's TF telco]
	+ removed FCs for control blocks.
- 2019-04-10: Add UDP IP PhyComAddr
  + add MOsbo
  + change IGMPSrc to iGMPSrc
  + change SBO basic type from DAReference to VisString129
-->
<!--
Notes on presence conditions:
From 7-3:
- MOoperTm: Element is mandatory if at least one controlled object on the IED supports time activation service; otherwise it is optional.
New presence conditions:
- MOctrl: Element is mandatory if declared control model supports anything else besides (optionally) status-only, otherwise optional.
- MOsboNormal: Element is mandatory if declared control model supports 'sbo-with-normal-security', otherwise optional.
- MOsboEnhanced: Element is mandatory if declared control model supports 'sbo-with-enhanced-security', otherwise optional.
-->
<ServiceNS xmlns="http://www.iec.ch/61850/2016/NSD" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="IEC 61850-8-1" version="2003" revision="A" release="2" xsi:schemaLocation="http://www.iec.ch/61850/2016/NSD NSD.xsd" umlDate="2019-04-10T12:00:00Z">
	<Copyright>
		<Notice>
		COPYRIGHT (c) IEC, 2018. This version of this NSD is part of IEC 61850-8-1:2018; see the IEC 61850-8-1:2018 for full legal notices. In case of any differences between the here-below code and the IEC published content, the here-below code is the valid one; it may contain updates. See history files. The whole document has to be taken into account to have a full description of this code component.
See www.iec.ch/CCv1 for copyright details
		</Notice>
		<License uri="www.iec.ch/CCv1" kind="Standard">IEC License</License>
	</Copyright>
	<FunctionalConstraints>
		<FunctionalConstraint abbreviation="CO" descID="IEC 61850-8-1:2003.CO">
			<ApplicableServices>
				<Service name="Cancel"/>
				<Service name="CommandTermination"/>
				<Service name="Operate"/>
				<Service name="Select"/>
				<Service name="SelectWithValue"/>
				<Service name="TimeActivatedOperate"/>
			</ApplicableServices>
		</FunctionalConstraint>
	</FunctionalConstraints>
	<PresenceConditions>
		<PresenceCondition name="MOctrl" descID="IEC 61850-8-1:2003.MOctrl"/>
		<PresenceCondition name="MOsboNormal" descID="IEC 61850-8-1:2003.MOsboNormal"/>
		<PresenceCondition name="MOsboEnhanced" descID="IEC 61850-8-1:2003.MOsboEnhanced"/>
		<PresenceCondition name="MOsbo" descID="IEC 61850-8-1:2003.MOsbo"/>
	</PresenceConditions>
	<ServiceTypeRealizations>
		<ServiceTypeRealization titleID="IEC 61850-8-1:2003.PhyComAddr" name="PhyComAddr">
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddr.Addr" name="Addr" typeKind="BASIC" type="Octet6" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddr.PRIORITY" name="PRIORITY" typeKind="BASIC" type="INT8U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddr.VID" name="VID" typeKind="BASIC" type="INT16U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddr.APPID" name="APPID" typeKind="BASIC" type="INT16U" presCond="M"/>
		</ServiceTypeRealization>
		<ServiceTypeRealization titleID="IEC 61850-8-1:2003.PhyComAddrIP" name="PhyComAddr">
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.Addr" name="Addr" typeKind="BASIC" type="Octet16" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.isIPv6" name="isIPv6" typeKind="BASIC" type="BOOLEAN" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.PRIORITY" name="PRIORITY" typeKind="BASIC" type="INT8U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.VID" name="VID" typeKind="BASIC" type="INT16U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.APPID" name="APPID" typeKind="BASIC" type="INT16U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.gwAddr" name="gwAddr" typeKind="BASIC" type="Octet16" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.tOS" name="tOS" typeKind="BASIC" type="INT8U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.PhyComAddrIP.iGMPSrc" name="iGMPSrc" typeKind="BASIC" type="Octet16" presCond="M"/>
		</ServiceTypeRealization>
	</ServiceTypeRealizations>
	<ServiceConstructedAttributes>
		<ServiceConstructedAttribute titleID="IEC 61850-8-1:2003.SBOw" name="SBOw" typeKindParameterized="true">
			<SubDataAttribute descID="IEC 61850-8-1:2003.ctlVal" name="ctlVal" typeKind="undefined" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.operTm" name="operTm" typeKind="BASIC" type="Timestamp" presCond="MOoperTm"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.origin" name="origin" typeKind="CONSTRUCTED" type="Originator" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.ctlNum" name="ctlNum" typeKind="BASIC" type="INT8U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.T" name="T" typeKind="BASIC" type="Timestamp" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.Test" name="Test" typeKind="BASIC" type="BOOLEAN" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.Check" name="Check" typeKind="BASIC" type="Check" presCond="M"/>
		</ServiceConstructedAttribute>
		<ServiceConstructedAttribute titleID="IEC 61850-8-1:2003.Oper" name="Oper" typeKindParameterized="true">
			<SubDataAttribute descID="IEC 61850-8-1:2003.ctlVal" name="ctlVal" typeKind="undefined" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.operTm" name="operTm" typeKind="BASIC" type="Timestamp" presCond="MOoperTm"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.origin" name="origin" typeKind="CONSTRUCTED" type="Originator" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.ctlNum" name="ctlNum" typeKind="BASIC" type="INT8U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.T" name="T" typeKind="BASIC" type="Timestamp" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.Test" name="Test" typeKind="BASIC" type="BOOLEAN" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.Check" name="Check" typeKind="BASIC" type="Check" presCond="M"/>
		</ServiceConstructedAttribute>
		<ServiceConstructedAttribute titleID="IEC 61850-8-1:2003.Cancel" name="Cancel" typeKindParameterized="true">
			<SubDataAttribute descID="IEC 61850-8-1:2003.ctlVal" name="ctlVal" typeKind="undefined" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.operTm" name="operTm" typeKind="BASIC" type="Timestamp" presCond="MOoperTm"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.origin" name="origin" typeKind="CONSTRUCTED" type="Originator" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.ctlNum" name="ctlNum" typeKind="BASIC" type="INT8U" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.T" name="T" typeKind="BASIC" type="Timestamp" presCond="M"/>
			<SubDataAttribute descID="IEC 61850-8-1:2003.Test" name="Test" typeKind="BASIC" type="BOOLEAN" presCond="M"/>
		</ServiceConstructedAttribute>
	</ServiceConstructedAttributes>
	<ServiceCDCs>
		<ServiceCDC cdc="SPC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="BASIC" underlyingType="BOOLEAN" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="BASIC" underlyingType="BOOLEAN" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="BASIC" underlyingType="BOOLEAN" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
		<ServiceCDC cdc="DPC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="BASIC" underlyingType="BOOLEAN" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="BASIC" underlyingType="BOOLEAN" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="BASIC" underlyingType="BOOLEAN" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
		<ServiceCDC cdc="INC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="BASIC" underlyingType="INT32" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="BASIC" underlyingType="INT32" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="BASIC" underlyingType="INT32" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
		<ServiceCDC cdc="ENC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="ENUMERATED" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="ENUMERATED" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="ENUMERATED" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
		<ServiceCDC cdc="BSC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="BASIC" underlyingType="Tcmd" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="BASIC" underlyingType="Tcmd" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="BASIC" underlyingType="Tcmd" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
		<ServiceCDC cdc="ISC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="BASIC" underlyingType="INT8" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="BASIC" underlyingType="INT8" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="BASIC" underlyingType="INT8" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
		<ServiceCDC cdc="APC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="CONSTRUCTED" underlyingType="AnalogueValueCtl" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="CONSTRUCTED" underlyingType="AnalogueValueCtl" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="CONSTRUCTED" underlyingType="AnalogueValueCtl" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
		<ServiceCDC cdc="BAC">
			<ServiceDataAttribute name="SBO" typeKind="BASIC" type="VisString129" fc="CO" presCond="MOsboNormal" descID="IEC 61850-8-1:2003.SBO"/>
			<ServiceDataAttribute name="SBOw" typeKind="CONSTRUCTED" type="SBOw" underlyingTypeKind="BASIC" underlyingType="Tcmd" fc="CO" presCond="MOsboEnhanced"/>
			<ServiceDataAttribute name="Oper" typeKind="CONSTRUCTED" type="Oper" underlyingTypeKind="BASIC" underlyingType="Tcmd" fc="CO" presCond="MOctrl"/>
			<ServiceDataAttribute name="Cancel" typeKind="CONSTRUCTED" type="Cancel" underlyingTypeKind="BASIC" underlyingType="Tcmd" fc="CO" presCond="MOsbo"/>
		</ServiceCDC>
	</ServiceCDCs>
</ServiceNS>
`;

new DOMParser().parseFromString(nsd72, "application/xml");
new DOMParser().parseFromString(nsd73, "application/xml");
new DOMParser().parseFromString(nsd74, "application/xml");
new DOMParser().parseFromString(nsd7420, "application/xml");
new DOMParser().parseFromString(nsd81, "application/xml");

/* eslint-disable no-use-before-define */
function hitemIdentity(e) {
    return `${e.getAttribute("version")}\t${e.getAttribute("revision")}`;
}
function terminalIdentity(e) {
    return `${identity(e.parentElement)}>${e.getAttribute("connectivityNode")}`;
}
function lNodeIdentity(e) {
    const [iedName, ldInst, prefix, lnClass, lnInst, lnType] = [
        "iedName",
        "ldInst",
        "prefix",
        "lnClass",
        "lnInst",
        "lnType",
    ].map((name) => e.getAttribute(name));
    if (iedName === "None")
        return `${identity(e.parentElement)}>(${lnClass} ${lnInst ?? ""} ${lnType})`;
    return `${iedName} ${ldInst || "(Client)"}/${prefix ?? ""} ${lnClass} ${lnInst ?? ""}`;
}
function kDCIdentity(e) {
    return `${identity(e.parentElement)}>${e.getAttribute("iedName")} ${e.getAttribute("apName")}`;
}
function associationIdentity(e) {
    const [iedName, ldInst, prefix, lnClass, lnInst] = [
        "iedName",
        "ldInst",
        "prefix",
        "lnClass",
        "lnInst",
        "lnType",
    ].map((name) => e.getAttribute(name));
    return `${identity(e.parentElement)}>${iedName} ${ldInst}/${prefix ?? ""} ${lnClass} ${lnInst ?? ""}`;
}
function lDeviceIdentity(e) {
    return `${identity(e.closest("IED"))}>>${e.getAttribute("inst")}`;
}
function iEDNameIdentity(e) {
    const iedName = e.textContent;
    const [apRef, ldInst, prefix, lnClass, lnInst] = [
        "apRef",
        "ldInst",
        "prefix",
        "lnClass",
        "lnInst",
    ].map((name) => e.getAttribute(name));
    return `${identity(e.parentElement)}>${iedName} ${apRef || ""} ${ldInst || ""}/${prefix ?? ""} ${lnClass ?? ""} ${lnInst ?? ""}`;
}
function fCDAIdentity(e) {
    const [ldInst, prefix, lnClass, lnInst, doName, daName, fc, ix] = [
        "ldInst",
        "prefix",
        "lnClass",
        "lnInst",
        "doName",
        "daName",
        "fc",
        "ix",
    ].map((name) => e.getAttribute(name));
    const dataPath = `${ldInst}/${prefix ?? ""} ${lnClass} ${lnInst ?? ""}.${doName} ${daName || ""}`;
    return `${identity(e.parentElement)}>${dataPath} (${fc}${ix ? ` [${ix}]` : ""})`;
}
function extRefIdentity(e) {
    if (!e.parentElement)
        return NaN;
    const parentIdentity = identity(e.parentElement);
    const iedName = e.getAttribute("iedName");
    const intAddr = e.getAttribute("intAddr");
    const intAddrIndex = Array.from(e.parentElement.querySelectorAll(`ExtRef[intAddr="${intAddr}"]`)).indexOf(e);
    if (intAddr)
        return `${parentIdentity}>${intAddr}[${intAddrIndex}]`;
    const [ldInst, prefix, lnClass, lnInst, doName, daName, serviceType, srcLDInst, srcPrefix, srcLNClass, srcLNInst, srcCBName,] = [
        "ldInst",
        "prefix",
        "lnClass",
        "lnInst",
        "doName",
        "daName",
        "serviceType",
        "srcLDInst",
        "srcPrefix",
        "srcLNClass",
        "srcLNInst",
        "srcCBName",
    ].map((name) => e.getAttribute(name));
    const defaultSrcPrefix = "";
    const finalSrcPrefix = srcPrefix ?? defaultSrcPrefix;
    const defaultSrcLNInst = "";
    const finalSrcLNInst = srcLNInst ?? defaultSrcLNInst;
    const cbPath = srcCBName
        ? `${serviceType}:${srcCBName} ${srcLDInst}/${finalSrcPrefix} ${srcLNClass} ${finalSrcLNInst}`
        : "";
    const defaultPrefix = "";
    const finalPrefix = prefix ?? defaultPrefix;
    const defaultLnInst = "";
    const finalLnInst = lnInst ?? defaultLnInst;
    const defaultDaName = "";
    const finalDaName = daName || defaultDaName;
    const dataPath = `${iedName} ${ldInst}/${finalPrefix} ${lnClass} ${finalLnInst} ${doName} ${finalDaName}`;
    return `${parentIdentity}>${cbPath ? `${cbPath} ` : ""}${dataPath}`;
}
function lNIdentity(e) {
    const [prefix, lnClass, inst] = ["prefix", "lnClass", "inst"].map((name) => e.getAttribute(name));
    return `${identity(e.parentElement)}>${prefix ?? ""} ${lnClass} ${inst}`;
}
function clientLNIdentity(e) {
    const [apRef, iedName, ldInst, prefix, lnClass, lnInst] = [
        "apRef",
        "iedName",
        "ldInst",
        "prefix",
        "lnClass",
        "lnInst",
    ].map((name) => e.getAttribute(name));
    return `${identity(e.parentElement)}>${iedName} ${apRef || ""} ${ldInst}/${prefix ?? ""} ${lnClass} ${lnInst}`;
}
function ixNamingIdentity(e) {
    const [name, ix] = ["name", "ix"].map((naming) => e.getAttribute(naming));
    return `${identity(e.parentElement)}>${name}${ix ? `[${ix}]` : ""}`;
}
function valIdentity(e) {
    if (!e.parentElement)
        return NaN;
    const sGroup = e.getAttribute("sGroup");
    const index = Array.from(e.parentElement.children)
        .filter((child) => child.getAttribute("sGroup") === sGroup)
        .findIndex((child) => child.isSameNode(e));
    return `${identity(e.parentElement)}>${sGroup ? `${sGroup}` : ""} ${index}`;
}
function connectedAPIdentity(e) {
    const [iedName, apName] = ["iedName", "apName"].map((name) => e.getAttribute(name));
    return `${iedName} ${apName}`;
}
function controlBlockIdentity(e) {
    const [ldInst, cbName] = ["ldInst", "cbName"].map((name) => e.getAttribute(name));
    return `${ldInst} ${cbName}`;
}
function physConnIdentity(e) {
    if (!e.parentElement)
        return NaN;
    const pcType = e.getAttribute("type");
    if (e.parentElement.children.length > 1 &&
        pcType !== "Connection" &&
        pcType !== "RedConn")
        return NaN;
    return `${identity(e.parentElement)}>${pcType}`;
}
function pIdentity(e) {
    if (!e.parentElement)
        return NaN;
    const eParent = e.parentElement;
    const eType = e.getAttribute("type");
    if (eParent.tagName === "PhysConn")
        return `${identity(e.parentElement)}>${eType}`;
    const index = Array.from(e.parentElement.children)
        .filter((child) => child.getAttribute("type") === eType)
        .findIndex((child) => child.isSameNode(e));
    return `${identity(e.parentElement)}>${eType} [${index}]`;
}
function enumValIdentity(e) {
    return `${identity(e.parentElement)}>${e.getAttribute("ord")}`;
}
function protNsIdentity(e) {
    if (!e.parentElement)
        return NaN;
    const type = e.getAttribute("type");
    return `${identity(e.parentElement)}>${type || "8-MMS"}\t${e.textContent}`;
}
function sCLIdentity() {
    return "";
}
function namingIdentity(e) {
    return e.parentElement.tagName === "SCL"
        ? e.getAttribute("name")
        : `${identity(e.parentElement)}>${e.getAttribute("name")}`;
}
function singletonIdentity(e) {
    return identity(e.parentElement).toString();
}
function idNamingIdentity(e) {
    return `#${e.id}`;
}
const tags = {
    AccessControl: {
        identity: singletonIdentity,
    },
    AccessPoint: {
        identity: namingIdentity,
    },
    Address: {
        identity: singletonIdentity,
    },
    Association: {
        identity: associationIdentity,
    },
    Authentication: {
        identity: singletonIdentity,
    },
    BDA: {
        identity: namingIdentity,
    },
    BitRate: {
        identity: singletonIdentity,
    },
    Bay: {
        identity: namingIdentity,
    },
    ClientLN: {
        identity: clientLNIdentity,
    },
    ClientServices: {
        identity: singletonIdentity,
    },
    CommProt: {
        identity: singletonIdentity,
    },
    Communication: {
        identity: singletonIdentity,
    },
    ConductingEquipment: {
        identity: namingIdentity,
    },
    ConfDataSet: {
        identity: singletonIdentity,
    },
    ConfLdName: {
        identity: singletonIdentity,
    },
    ConfLNs: {
        identity: singletonIdentity,
    },
    ConfLogControl: {
        identity: singletonIdentity,
    },
    ConfReportControl: {
        identity: singletonIdentity,
    },
    ConfSG: {
        identity: singletonIdentity,
    },
    ConfSigRef: {
        identity: singletonIdentity,
    },
    ConnectedAP: {
        identity: connectedAPIdentity,
    },
    ConnectivityNode: {
        identity: namingIdentity,
    },
    DA: {
        identity: namingIdentity,
    },
    DAI: {
        identity: ixNamingIdentity,
    },
    DAType: {
        identity: idNamingIdentity,
    },
    DO: {
        identity: namingIdentity,
    },
    DOI: {
        identity: namingIdentity,
    },
    DOType: {
        identity: idNamingIdentity,
    },
    DataObjectDirectory: {
        identity: singletonIdentity,
    },
    DataSet: {
        identity: namingIdentity,
    },
    DataSetDirectory: {
        identity: singletonIdentity,
    },
    DataTypeTemplates: {
        identity: singletonIdentity,
    },
    DynAssociation: {
        identity: singletonIdentity,
    },
    DynDataSet: {
        identity: singletonIdentity,
    },
    EnumType: {
        identity: idNamingIdentity,
    },
    EnumVal: {
        identity: enumValIdentity,
    },
    EqFunction: {
        identity: namingIdentity,
    },
    EqSubFunction: {
        identity: namingIdentity,
    },
    ExtRef: {
        identity: extRefIdentity,
    },
    FCDA: {
        identity: fCDAIdentity,
    },
    FileHandling: {
        identity: singletonIdentity,
    },
    Function: {
        identity: namingIdentity,
    },
    GeneralEquipment: {
        identity: namingIdentity,
    },
    GetCBValues: {
        identity: singletonIdentity,
    },
    GetDataObjectDefinition: {
        identity: singletonIdentity,
    },
    GetDataSetValue: {
        identity: singletonIdentity,
    },
    GetDirectory: {
        identity: singletonIdentity,
    },
    GOOSE: {
        identity: singletonIdentity,
    },
    GOOSESecurity: {
        identity: namingIdentity,
    },
    GSE: {
        identity: controlBlockIdentity,
    },
    GSEDir: {
        identity: singletonIdentity,
    },
    GSEControl: {
        identity: namingIdentity,
    },
    GSESettings: {
        identity: singletonIdentity,
    },
    GSSE: {
        identity: singletonIdentity,
    },
    Header: {
        identity: singletonIdentity,
    },
    History: {
        identity: singletonIdentity,
    },
    Hitem: {
        identity: hitemIdentity,
    },
    IED: {
        identity: namingIdentity,
    },
    IEDName: {
        identity: iEDNameIdentity,
    },
    Inputs: {
        identity: singletonIdentity,
    },
    IssuerName: {
        identity: singletonIdentity,
    },
    KDC: {
        identity: kDCIdentity,
    },
    LDevice: {
        identity: lDeviceIdentity,
    },
    LN: {
        identity: lNIdentity,
    },
    LN0: {
        identity: singletonIdentity,
    },
    LNode: {
        identity: lNodeIdentity,
    },
    LNodeType: {
        identity: idNamingIdentity,
    },
    Line: {
        identity: namingIdentity,
    },
    Log: {
        identity: namingIdentity,
    },
    LogControl: {
        identity: namingIdentity,
    },
    LogSettings: {
        identity: singletonIdentity,
    },
    MaxTime: {
        identity: singletonIdentity,
    },
    McSecurity: {
        identity: singletonIdentity,
    },
    MinTime: {
        identity: singletonIdentity,
    },
    NeutralPoint: {
        identity: terminalIdentity,
    },
    OptFields: {
        identity: singletonIdentity,
    },
    P: {
        identity: pIdentity,
    },
    PhysConn: {
        identity: physConnIdentity,
    },
    PowerTransformer: {
        identity: namingIdentity,
    },
    Process: {
        identity: namingIdentity,
    },
    ProtNs: {
        identity: protNsIdentity,
    },
    Protocol: {
        identity: singletonIdentity,
    },
    ReadWrite: {
        identity: singletonIdentity,
    },
    RedProt: {
        identity: singletonIdentity,
    },
    ReportControl: {
        identity: namingIdentity,
    },
    ReportSettings: {
        identity: singletonIdentity,
    },
    RptEnabled: {
        identity: singletonIdentity,
    },
    SamplesPerSec: {
        identity: singletonIdentity,
    },
    SampledValueControl: {
        identity: namingIdentity,
    },
    SecPerSamples: {
        identity: singletonIdentity,
    },
    SCL: {
        identity: sCLIdentity,
    },
    SDI: {
        identity: ixNamingIdentity,
    },
    SDO: {
        identity: namingIdentity,
    },
    Server: {
        identity: singletonIdentity,
    },
    ServerAt: {
        identity: singletonIdentity,
    },
    Services: {
        identity: singletonIdentity,
    },
    SetDataSetValue: {
        identity: singletonIdentity,
    },
    SettingControl: {
        identity: singletonIdentity,
    },
    SettingGroups: {
        identity: singletonIdentity,
    },
    SGEdit: {
        identity: singletonIdentity,
    },
    SmpRate: {
        identity: singletonIdentity,
    },
    SMV: {
        identity: controlBlockIdentity,
    },
    SmvOpts: {
        identity: singletonIdentity,
    },
    SMVsc: {
        identity: singletonIdentity,
    },
    SMVSecurity: {
        identity: namingIdentity,
    },
    SMVSettings: {
        identity: singletonIdentity,
    },
    SubEquipment: {
        identity: namingIdentity,
    },
    SubFunction: {
        identity: namingIdentity,
    },
    SubNetwork: {
        identity: namingIdentity,
    },
    Subject: {
        identity: singletonIdentity,
    },
    Substation: {
        identity: namingIdentity,
    },
    SupSubscription: {
        identity: singletonIdentity,
    },
    TapChanger: {
        identity: namingIdentity,
    },
    Terminal: {
        identity: terminalIdentity,
    },
    Text: {
        identity: singletonIdentity,
    },
    TimerActivatedControl: {
        identity: singletonIdentity,
    },
    TimeSyncProt: {
        identity: singletonIdentity,
    },
    TransformerWinding: {
        identity: namingIdentity,
    },
    TrgOps: {
        identity: singletonIdentity,
    },
    Val: {
        identity: valIdentity,
    },
    ValueHandling: {
        identity: singletonIdentity,
    },
    Voltage: {
        identity: singletonIdentity,
    },
    VoltageLevel: {
        identity: namingIdentity,
    },
};
/** @returns Identity string for a valid SCL element or NaN */
function identity(e) {
    if (e === null)
        return NaN;
    if (e.closest("Private"))
        return NaN;
    const tag = e.tagName;
    if (isSCLTag(tag))
        return tags[tag].identity(e);
    return NaN;
}

function getFcdaInstDesc(fcda) {
    var _a, _b;
    const [doName, daName] = ['doName', 'daName'].map(attr => fcda.getAttribute(attr));
    const ied = fcda.closest('IED');
    if (!ied)
        return {};
    const anyLn = Array.from(ied.querySelectorAll(`:scope > AccessPoint > Server > LDevice[inst="${fcda.getAttribute('ldInst')}"] > LN, :scope > AccessPoint > Server > LDevice[inst="${fcda.getAttribute('ldInst')}"] > LN0`)).find(lN => {
        var _a, _b, _c, _d, _e;
        return ((_a = lN.getAttribute('prefix')) !== null && _a !== void 0 ? _a : '') ===
            ((_b = fcda.getAttribute('prefix')) !== null && _b !== void 0 ? _b : '') &&
            lN.getAttribute('lnClass') === ((_c = fcda.getAttribute('lnClass')) !== null && _c !== void 0 ? _c : '') &&
            ((_d = lN.getAttribute('inst')) !== null && _d !== void 0 ? _d : '') === ((_e = fcda.getAttribute('lnInst')) !== null && _e !== void 0 ? _e : '');
    });
    if (!anyLn)
        return {};
    let descs = {};
    const ldDesc = anyLn.closest('LDevice').getAttribute('desc');
    descs = { ...descs, ...(ldDesc && ldDesc !== '' && { LDevice: ldDesc }) };
    const lnDesc = anyLn.getAttribute('desc');
    descs = { ...descs, ...(lnDesc && lnDesc !== '' && { LN: lnDesc }) };
    const doNames = doName.split('.');
    const daNames = daName === null || daName === void 0 ? void 0 : daName.split('.');
    const doi = anyLn.querySelector(`:scope > DOI[name="${doNames[0]}"`);
    if (!doi)
        return descs;
    let doiDesc = doi === null || doi === void 0 ? void 0 : doi.getAttribute('desc');
    if (!doiDesc) {
        doiDesc =
            (_b = (_a = doi === null || doi === void 0 ? void 0 : doi.querySelector(':scope > DAI[name="d"] > Val')) === null || _a === void 0 ? void 0 : _a.textContent) !== null && _b !== void 0 ? _b : null;
    }
    descs = { ...descs, ...(doiDesc && doiDesc !== '' && { DOI: doiDesc }) };
    let previousDI = doi;
    const daAsSDI = daNames ? daNames.slice(0, daNames.length - 1) : [];
    doNames
        .concat(daAsSDI)
        .slice(1)
        .forEach(sdiName => {
        var _a, _b;
        const sdi = previousDI.querySelector(`:scope > SDI[name="${sdiName}"]`);
        if (sdi)
            previousDI = sdi;
        let sdiDesc = sdi === null || sdi === void 0 ? void 0 : sdi.getAttribute('desc');
        if (!sdiDesc) {
            sdiDesc =
                (_b = (_a = sdi === null || sdi === void 0 ? void 0 : sdi.querySelector(':scope > DAI[name="d"] > Val')) === null || _a === void 0 ? void 0 : _a.textContent) !== null && _b !== void 0 ? _b : null;
        }
        if (!('SDI' in descs)) {
            descs = {
                ...descs,
                ...(sdiDesc && sdiDesc !== '' && { SDI: [sdiDesc] }),
            };
        }
        else if (sdiDesc)
            descs.SDI.push(sdiDesc);
    });
    if (!daName || !daNames)
        return descs;
    // ix and array elements not supported
    const lastdaName = daNames === null || daNames === void 0 ? void 0 : daNames.slice(daNames.length - 1);
    const dai = previousDI.querySelector(`:scope > DAI[name="${lastdaName}"]`);
    if (!dai)
        return descs;
    const daiDesc = dai.getAttribute('desc');
    descs = { ...descs, ...(daiDesc && daiDesc !== '' && { DAI: daiDesc }) };
    return descs;
}
/**
 * Check if the ExtRef is already subscribed to a FCDA Element.
 *
 * @param extRefElement - The Ext Ref Element to check.
 */
function isSubscribed(extRefElement) {
    return (extRefElement.hasAttribute('iedName') &&
        extRefElement.hasAttribute('ldInst') &&
        extRefElement.hasAttribute('lnClass') &&
        extRefElement.hasAttribute('lnInst') &&
        extRefElement.hasAttribute('doName'));
}
function inputReference(input) {
    var _a, _b, _c;
    const prefix = (_a = input.getAttribute('prefix')) !== null && _a !== void 0 ? _a : '';
    const lnClass = input.getAttribute('lnClass');
    const lnInst = (_b = input.getAttribute('lnInst')) !== null && _b !== void 0 ? _b : 'LLN0';
    const ln = `${prefix}${lnClass}${lnInst}`;
    if (input.tagName === 'ClientLN')
        return { fcdaRef: ln };
    const ldInst = input.getAttribute('ldInst');
    const doName = input.getAttribute('doName');
    const daName = (_c = input.getAttribute('daName')) !== null && _c !== void 0 ? _c : '';
    const fcdaRef = `${ldInst}/${ln}.${doName}.${daName}`;
    let desc;
    if (isSubscribed(input)) {
        const cb = sourceControlBlock(input);
        const dataSetName = cb === null || cb === void 0 ? void 0 : cb.getAttribute('datSet');
        const fcdas = cb === null || cb === void 0 ? void 0 : cb.parentElement.querySelectorAll(`DataSet[name="${dataSetName}"] > FCDA`);
        if (fcdas) {
            const fcda = Array.from(fcdas).find(fcd => matchDataAttributes(fcd, input));
            if (fcda) {
                desc = Object.values(getFcdaInstDesc(fcda))
                    .flat(Infinity)
                    .join(' > ');
            }
        }
    }
    return { fcdaRef, desc };
}
function inputSupportingText(input) {
    const desc = input.getAttribute('desc') || undefined;
    if (input.tagName === 'ClientLN')
        return { extRefRef: desc || `${identity(input)}` };
    const intAddr = input.getAttribute('intAddr');
    return { extRefRef: intAddr || `${identity(input)}`, desc };
}
/** Returns the subscriber's supervision LN for a given control block and subscriber ied.
 *
 * @param cb - The control block being supervised
 * @param ied - The subscriber IED
 * @returns The supervision LN instance or null if not found
 */
function getExistingSupervision(cb, ied) {
    if (cb === null)
        return null;
    const supervisionType = cb.tagName === 'GSEControl' ? 'LGOS' : 'LSVS';
    const refSelector = supervisionType === 'LGOS' ? 'DOI[name="GoCBRef"]' : 'DOI[name="SvCBRef"]';
    const candidates = Array.from(ied.querySelectorAll(`:scope > AccessPoint > Server > LDevice > LN[lnClass="${supervisionType}"]>${refSelector}>DAI[name="setSrcRef"]>Val`)).find(val => val.textContent === controlBlockObjRef(cb));
    return candidates !== undefined ? candidates.closest('LN') : null;
}

const privType = 'Transpower-SLD-Vertices';
const sldNs = 'https://transpower.co.nz/SCL/SSD/SLD/v0';
const svgNs = 'http://www.w3.org/2000/svg';
const xlinkNs = 'http://www.w3.org/1999/xlink';
const sldPrefix = 'esld';
const eqTypes = [
    'CAB',
    'CAP',
    'CBR',
    'CTR',
    'DIS',
    'GEN',
    'IFL',
    'LIN',
    'MOT',
    'REA',
    'RES',
    'SAR',
    'SMC',
    'VTR',
];
function isEqType(str) {
    return eqTypes.includes(str);
}
const ringedEqTypes = new Set(['GEN', 'MOT', 'SMC']);
const transformerKinds = ['default', 'auto', 'earthing'];
function isTransformerKind(kind) {
    return transformerKinds.includes(kind);
}
function xmlBoolean(value) {
    var _a;
    return ['true', '1'].includes((_a = value === null || value === void 0 ? void 0 : value.trim()) !== null && _a !== void 0 ? _a : 'false');
}
function isBusBar(element) {
    var _a;
    return (element.tagName === 'Bay' &&
        xmlBoolean((_a = element.querySelector('Section[bus]')) === null || _a === void 0 ? void 0 : _a.getAttribute('bus')));
}
function attributes(element) {
    var _a;
    const [x, y, w, h, rotVal, labelX, labelY] = [
        'x',
        'y',
        'w',
        'h',
        'rot',
        'lx',
        'ly',
    ].map(name => { var _a; return parseFloat((_a = element.getAttributeNS(sldNs, name)) !== null && _a !== void 0 ? _a : '0'); });
    const weight = parseInt((_a = element.getAttributeNS(sldNs, 'weight')) !== null && _a !== void 0 ? _a : '300', 10);
    const pos = [x, y].map(d => Math.max(0, d));
    const dim = [w, h].map(d => Math.max(1, d));
    const label = [labelX, labelY].map(d => Math.max(0, d));
    const bus = xmlBoolean(element.getAttribute('bus'));
    const flip = xmlBoolean(element.getAttributeNS(sldNs, 'flip'));
    const kindVal = element.getAttributeNS(sldNs, 'kind');
    const kind = isTransformerKind(kindVal) ? kindVal : 'default';
    const color = element.getAttributeNS(sldNs, 'color') || '#000';
    const rot = (((rotVal % 4) + 4) % 4);
    return { pos, dim, label, flip, rot, bus, weight, color, kind };
}
function contains([x1, y1, w1, h1], [x2, y2, w2, h2]) {
    return x1 <= x2 && y1 <= y2 && x1 + w1 >= x2 + w2 && y1 + h1 >= y2 + h2;
}
function containsRect(element, x0, y0, w0, h0) {
    const { pos: [x, y], dim: [w, h], } = attributes(element);
    return contains([x, y, w, h], [x0, y0, w0, h0]);
}
function reparentElement(element, parent) {
    const edits = [];
    edits.push({
        node: element,
        parent,
        reference: getReference(parent, element.tagName),
    });
    return edits;
}
const robotoDataURL = 'data:application/font-woff;charset=utf-8;base64,';

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$5,o$4;class s$5 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$5.finalized=!0,s$5._$litElement$=!0,null===(l$5=globalThis.litElementHydrateSupport)||void 0===l$5||l$5.call(globalThis,{LitElement:s$5});const n$4=globalThis.litElementPolyfillSupport;null==n$4||n$4({LitElement:s$5});(null!==(o$4=globalThis.litElementVersions)&&void 0!==o$4?o$4:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
class IconButtonBase extends s$5 {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.icon = '';
        this.shouldRenderRipple = false;
        this.rippleHandlers = new RippleHandlers(() => {
            this.shouldRenderRipple = true;
            return this.ripple;
        });
    }
    /** @soyTemplate */
    renderRipple() {
        return this.shouldRenderRipple ? x `
            <mwc-ripple
                .disabled="${this.disabled}"
                unbounded>
            </mwc-ripple>` :
            '';
    }
    focus() {
        const buttonElement = this.buttonElement;
        if (buttonElement) {
            this.rippleHandlers.startFocus();
            buttonElement.focus();
        }
    }
    blur() {
        const buttonElement = this.buttonElement;
        if (buttonElement) {
            this.rippleHandlers.endFocus();
            buttonElement.blur();
        }
    }
    /** @soyTemplate */
    render() {
        return x `<button
        class="mdc-icon-button mdc-icon-button--display-flex"
        aria-label="${this.ariaLabel || this.icon}"
        aria-haspopup="${l$9(this.ariaHasPopup)}"
        ?disabled="${this.disabled}"
        @focus="${this.handleRippleFocus}"
        @blur="${this.handleRippleBlur}"
        @mousedown="${this.handleRippleMouseDown}"
        @mouseenter="${this.handleRippleMouseEnter}"
        @mouseleave="${this.handleRippleMouseLeave}"
        @touchstart="${this.handleRippleTouchStart}"
        @touchend="${this.handleRippleDeactivate}"
        @touchcancel="${this.handleRippleDeactivate}"
    >${this.renderRipple()}
    ${this.icon ? x `<i class="material-icons">${this.icon}</i>` : ''}
    <span
      ><slot></slot
    ></span>
  </button>`;
    }
    handleRippleMouseDown(event) {
        const onUp = () => {
            window.removeEventListener('mouseup', onUp);
            this.handleRippleDeactivate();
        };
        window.addEventListener('mouseup', onUp);
        this.rippleHandlers.startPress(event);
    }
    handleRippleTouchStart(event) {
        this.rippleHandlers.startPress(event);
    }
    handleRippleDeactivate() {
        this.rippleHandlers.endPress();
    }
    handleRippleMouseEnter() {
        this.rippleHandlers.startHover();
    }
    handleRippleMouseLeave() {
        this.rippleHandlers.endHover();
    }
    handleRippleFocus() {
        this.rippleHandlers.startFocus();
    }
    handleRippleBlur() {
        this.rippleHandlers.endFocus();
    }
}
__decorate([
    n$h({ type: Boolean, reflect: true })
], IconButtonBase.prototype, "disabled", void 0);
__decorate([
    n$h({ type: String })
], IconButtonBase.prototype, "icon", void 0);
__decorate([
    ariaProperty,
    n$h({ type: String, attribute: 'aria-label' })
], IconButtonBase.prototype, "ariaLabel", void 0);
__decorate([
    ariaProperty,
    n$h({ type: String, attribute: 'aria-haspopup' })
], IconButtonBase.prototype, "ariaHasPopup", void 0);
__decorate([
    i$7('button')
], IconButtonBase.prototype, "buttonElement", void 0);
__decorate([
    e$8('mwc-ripple')
], IconButtonBase.prototype, "ripple", void 0);
__decorate([
    t$4()
], IconButtonBase.prototype, "shouldRenderRipple", void 0);
__decorate([
    e$9({ passive: true })
], IconButtonBase.prototype, "handleRippleMouseDown", null);
__decorate([
    e$9({ passive: true })
], IconButtonBase.prototype, "handleRippleTouchStart", null);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$3 = i$6 `.material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}.mdc-icon-button{font-size:24px;width:48px;height:48px;padding:12px}.mdc-icon-button .mdc-icon-button__focus-ring{display:none}.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring,.mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring{display:block;max-height:48px;max-width:48px}@media screen and (forced-colors: active){.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring,.mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring{pointer-events:none;border:2px solid transparent;border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:100%;width:100%}}@media screen and (forced-colors: active)and (forced-colors: active){.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring,.mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring{border-color:CanvasText}}@media screen and (forced-colors: active){.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring::after,.mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring::after{content:"";border:2px solid transparent;border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}}@media screen and (forced-colors: active)and (forced-colors: active){.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring::after,.mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring::after{border-color:CanvasText}}.mdc-icon-button.mdc-icon-button--reduced-size .mdc-icon-button__ripple{width:40px;height:40px;margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}.mdc-icon-button.mdc-icon-button--reduced-size.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring,.mdc-icon-button.mdc-icon-button--reduced-size:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring{max-height:40px;max-width:40px}.mdc-icon-button .mdc-icon-button__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mdc-icon-button:disabled{color:rgba(0, 0, 0, 0.38);color:var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38))}.mdc-icon-button svg,.mdc-icon-button img{width:24px;height:24px}.mdc-icon-button{display:inline-block;position:relative;box-sizing:border-box;border:none;outline:none;background-color:transparent;fill:currentColor;color:inherit;text-decoration:none;cursor:pointer;user-select:none;z-index:0;overflow:visible}.mdc-icon-button .mdc-icon-button__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mdc-icon-button:disabled{cursor:default;pointer-events:none}.mdc-icon-button--display-flex{align-items:center;display:inline-flex;justify-content:center}.mdc-icon-button__icon{display:inline-block}.mdc-icon-button__icon.mdc-icon-button__icon--on{display:none}.mdc-icon-button--on .mdc-icon-button__icon{display:none}.mdc-icon-button--on .mdc-icon-button__icon.mdc-icon-button__icon--on{display:inline-block}.mdc-icon-button__link{height:100%;left:0;outline:none;position:absolute;top:0;width:100%}.mdc-icon-button{display:inline-block;position:relative;box-sizing:border-box;border:none;outline:none;background-color:transparent;fill:currentColor;color:inherit;text-decoration:none;cursor:pointer;user-select:none;z-index:0;overflow:visible}.mdc-icon-button .mdc-icon-button__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mdc-icon-button:disabled{cursor:default;pointer-events:none}.mdc-icon-button--display-flex{align-items:center;display:inline-flex;justify-content:center}.mdc-icon-button__icon{display:inline-block}.mdc-icon-button__icon.mdc-icon-button__icon--on{display:none}.mdc-icon-button--on .mdc-icon-button__icon{display:none}.mdc-icon-button--on .mdc-icon-button__icon.mdc-icon-button__icon--on{display:inline-block}.mdc-icon-button__link{height:100%;left:0;outline:none;position:absolute;top:0;width:100%}:host{display:inline-block;outline:none}:host([disabled]){pointer-events:none}.mdc-icon-button i,.mdc-icon-button svg,.mdc-icon-button img,.mdc-icon-button ::slotted(*){display:block}:host{--mdc-ripple-color: currentcolor;-webkit-tap-highlight-color:transparent}:host,.mdc-icon-button{vertical-align:top}.mdc-icon-button{width:var(--mdc-icon-button-size, 48px);height:var(--mdc-icon-button-size, 48px);padding:calc( (var(--mdc-icon-button-size, 48px) - var(--mdc-icon-size, 24px)) / 2 )}.mdc-icon-button i,.mdc-icon-button svg,.mdc-icon-button img,.mdc-icon-button ::slotted(*){display:block;width:var(--mdc-icon-size, 24px);height:var(--mdc-icon-size, 24px)}`;

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
let IconButton = class IconButton extends IconButtonBase {
};
IconButton.styles = [styles$3];
IconButton = __decorate([
    e$b('mwc-icon-button')
], IconButton);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$4,o$3;class s$4 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$4.finalized=!0,s$4._$litElement$=!0,null===(l$4=globalThis.litElementHydrateSupport)||void 0===l$4||l$4.call(globalThis,{LitElement:s$4});const n$3=globalThis.litElementPolyfillSupport;null==n$3||n$3({LitElement:s$4});(null!==(o$3=globalThis.litElementVersions)&&void 0!==o$3?o$3:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
class IconButtonToggleBase extends s$4 {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.onIcon = '';
        this.offIcon = '';
        this.on = false;
        this.shouldRenderRipple = false;
        this.rippleHandlers = new RippleHandlers(() => {
            this.shouldRenderRipple = true;
            return this.ripple;
        });
    }
    handleClick() {
        this.on = !this.on;
        this.dispatchEvent(new CustomEvent('icon-button-toggle-change', { detail: { isOn: this.on }, bubbles: true }));
    }
    click() {
        this.mdcRoot.focus();
        this.mdcRoot.click();
    }
    focus() {
        this.rippleHandlers.startFocus();
        this.mdcRoot.focus();
    }
    blur() {
        this.rippleHandlers.endFocus();
        this.mdcRoot.blur();
    }
    /** @soyTemplate */
    renderRipple() {
        return this.shouldRenderRipple ? x `
            <mwc-ripple
                .disabled="${this.disabled}"
                unbounded>
            </mwc-ripple>` :
            '';
    }
    /** @soyTemplate */
    render() {
        /** @classMap */
        const classes = {
            'mdc-icon-button--on': this.on,
        };
        const hasToggledAriaLabel = this.ariaLabelOn !== undefined && this.ariaLabelOff !== undefined;
        const ariaPressedValue = hasToggledAriaLabel ? undefined : this.on;
        const ariaLabelValue = hasToggledAriaLabel ?
            (this.on ? this.ariaLabelOn : this.ariaLabelOff) :
            this.ariaLabel;
        return x `<button
          class="mdc-icon-button mdc-icon-button--display-flex ${o$a(classes)}"
          aria-pressed="${l$9(ariaPressedValue)}"
          aria-label="${l$9(ariaLabelValue)}"
          @click="${this.handleClick}"
          ?disabled="${this.disabled}"
          @focus="${this.handleRippleFocus}"
          @blur="${this.handleRippleBlur}"
          @mousedown="${this.handleRippleMouseDown}"
          @mouseenter="${this.handleRippleMouseEnter}"
          @mouseleave="${this.handleRippleMouseLeave}"
          @touchstart="${this.handleRippleTouchStart}"
          @touchend="${this.handleRippleDeactivate}"
          @touchcancel="${this.handleRippleDeactivate}"
        >${this.renderRipple()}
        <span class="mdc-icon-button__icon"
          ><slot name="offIcon"
            ><i class="material-icons">${this.offIcon}</i
          ></slot
        ></span>
        <span class="mdc-icon-button__icon mdc-icon-button__icon--on"
          ><slot name="onIcon"
            ><i class="material-icons">${this.onIcon}</i
          ></slot
        ></span>
      </button>`;
    }
    handleRippleMouseDown(event) {
        const onUp = () => {
            window.removeEventListener('mouseup', onUp);
            this.handleRippleDeactivate();
        };
        window.addEventListener('mouseup', onUp);
        this.rippleHandlers.startPress(event);
    }
    handleRippleTouchStart(event) {
        this.rippleHandlers.startPress(event);
    }
    handleRippleDeactivate() {
        this.rippleHandlers.endPress();
    }
    handleRippleMouseEnter() {
        this.rippleHandlers.startHover();
    }
    handleRippleMouseLeave() {
        this.rippleHandlers.endHover();
    }
    handleRippleFocus() {
        this.rippleHandlers.startFocus();
    }
    handleRippleBlur() {
        this.rippleHandlers.endFocus();
    }
}
__decorate([
    i$7('.mdc-icon-button')
], IconButtonToggleBase.prototype, "mdcRoot", void 0);
__decorate([
    ariaProperty,
    n$h({ type: String, attribute: 'aria-label' })
], IconButtonToggleBase.prototype, "ariaLabel", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], IconButtonToggleBase.prototype, "disabled", void 0);
__decorate([
    n$h({ type: String })
], IconButtonToggleBase.prototype, "onIcon", void 0);
__decorate([
    n$h({ type: String })
], IconButtonToggleBase.prototype, "offIcon", void 0);
__decorate([
    n$h({ type: String })
], IconButtonToggleBase.prototype, "ariaLabelOn", void 0);
__decorate([
    n$h({ type: String })
], IconButtonToggleBase.prototype, "ariaLabelOff", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], IconButtonToggleBase.prototype, "on", void 0);
__decorate([
    e$8('mwc-ripple')
], IconButtonToggleBase.prototype, "ripple", void 0);
__decorate([
    t$4()
], IconButtonToggleBase.prototype, "shouldRenderRipple", void 0);
__decorate([
    e$9({ passive: true })
], IconButtonToggleBase.prototype, "handleRippleMouseDown", null);
__decorate([
    e$9({ passive: true })
], IconButtonToggleBase.prototype, "handleRippleTouchStart", null);

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
let IconButtonToggle = class IconButtonToggle extends IconButtonToggleBase {
};
IconButtonToggle.styles = [styles$3];
IconButtonToggle = __decorate([
    e$b('mwc-icon-button-toggle')
], IconButtonToggle);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$3,o$2;class s$3 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$3.finalized=!0,s$3._$litElement$=!0,null===(l$3=globalThis.litElementHydrateSupport)||void 0===l$3||l$3.call(globalThis,{LitElement:s$3});const n$2=globalThis.litElementPolyfillSupport;null==n$2||n$2({LitElement:s$3});(null!==(o$2=globalThis.litElementVersions)&&void 0!==o$2?o$2:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Fab Base class logic and template definition
 * @soyCompatible
 */
class FabBase extends s$3 {
    constructor() {
        super(...arguments);
        this.mini = false;
        this.exited = false;
        this.disabled = false;
        this.extended = false;
        this.showIconAtEnd = false;
        this.reducedTouchTarget = false;
        this.icon = '';
        this.label = '';
        this.shouldRenderRipple = false;
        this.useStateLayerCustomProperties = false;
        this.rippleHandlers = new RippleHandlers(() => {
            this.shouldRenderRipple = true;
            return this.ripple;
        });
    }
    /**
     * @soyTemplate
     * @soyClasses fabClasses: .mdc-fab
     */
    render() {
        const hasTouchTarget = this.mini && !this.reducedTouchTarget;
        /** @classMap */
        const classes = {
            'mdc-fab--mini': this.mini,
            'mdc-fab--touch': hasTouchTarget,
            'mdc-fab--exited': this.exited,
            'mdc-fab--extended': this.extended,
            'icon-end': this.showIconAtEnd,
        };
        const ariaLabel = this.label ? this.label : this.icon;
        /*
         * Some internal styling is sensitive to whitespace in this template, take
         * care when modifying it.
         */
        return x `<button
          class="mdc-fab ${o$a(classes)}"
          ?disabled="${this.disabled}"
          aria-label="${ariaLabel}"
          @mouseenter=${this.handleRippleMouseEnter}
          @mouseleave=${this.handleRippleMouseLeave}
          @focus=${this.handleRippleFocus}
          @blur=${this.handleRippleBlur}
          @mousedown=${this.handleRippleActivate}
          @touchstart=${this.handleRippleStartPress}
          @touchend=${this.handleRippleDeactivate}
          @touchcancel=${this.handleRippleDeactivate}><!--
        -->${this.renderBeforeRipple()}<!--
        -->${this.renderRipple()}<!--
        -->${this.showIconAtEnd ? this.renderLabel() : ''}<!--
        --><span class="material-icons mdc-fab__icon"><!--
          --><slot name="icon">${this.icon}</slot><!--
       --></span><!--
        -->${!this.showIconAtEnd ? this.renderLabel() : ''}<!--
        -->${this.renderTouchTarget()}<!--
      --></button>`;
    }
    /** @soyTemplate */
    renderIcon() {
        // TODO(b/191914389): reimplement once Wit issue is resolved
        return x ``;
    }
    /** @soyTemplate */
    renderTouchTarget() {
        const hasTouchTarget = this.mini && !this.reducedTouchTarget;
        return x `${hasTouchTarget ? x `<div class="mdc-fab__touch"></div>` : ''}`;
    }
    /** @soyTemplate */
    renderLabel() {
        const showLabel = this.label !== '' && this.extended;
        return x `${showLabel ? x `<span class="mdc-fab__label">${this.label}</span>` :
            ''}`;
    }
    /** @soyTemplate */
    renderBeforeRipple() {
        return x ``;
    }
    /** @soyTemplate */
    renderRipple() {
        return this.shouldRenderRipple ? x `<mwc-ripple class="ripple"
        .internalUseStateLayerCustomProperties="${this.useStateLayerCustomProperties}"
         ></mwc-ripple>` :
            '';
    }
    handleRippleActivate(event) {
        const onUp = () => {
            window.removeEventListener('mouseup', onUp);
            this.handleRippleDeactivate();
        };
        window.addEventListener('mouseup', onUp);
        this.handleRippleStartPress(event);
    }
    handleRippleStartPress(event) {
        this.rippleHandlers.startPress(event);
    }
    handleRippleDeactivate() {
        this.rippleHandlers.endPress();
    }
    handleRippleMouseEnter() {
        this.rippleHandlers.startHover();
    }
    handleRippleMouseLeave() {
        this.rippleHandlers.endHover();
    }
    handleRippleFocus() {
        this.rippleHandlers.startFocus();
    }
    handleRippleBlur() {
        this.rippleHandlers.endFocus();
    }
}
FabBase.shadowRootOptions = { mode: 'open', delegatesFocus: true };
__decorate([
    e$8('mwc-ripple')
], FabBase.prototype, "ripple", void 0);
__decorate([
    n$h({ type: Boolean })
], FabBase.prototype, "mini", void 0);
__decorate([
    n$h({ type: Boolean })
], FabBase.prototype, "exited", void 0);
__decorate([
    n$h({ type: Boolean })
], FabBase.prototype, "disabled", void 0);
__decorate([
    n$h({ type: Boolean })
], FabBase.prototype, "extended", void 0);
__decorate([
    n$h({ type: Boolean })
], FabBase.prototype, "showIconAtEnd", void 0);
__decorate([
    n$h({ type: Boolean })
], FabBase.prototype, "reducedTouchTarget", void 0);
__decorate([
    n$h()
], FabBase.prototype, "icon", void 0);
__decorate([
    n$h()
], FabBase.prototype, "label", void 0);
__decorate([
    t$4()
], FabBase.prototype, "shouldRenderRipple", void 0);
__decorate([
    t$4()
], FabBase.prototype, "useStateLayerCustomProperties", void 0);
__decorate([
    e$9({ passive: true })
], FabBase.prototype, "handleRippleStartPress", null);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$2 = i$6 `:host .mdc-fab .material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}:host{outline:none;--mdc-ripple-color: currentcolor;user-select:none;-webkit-tap-highlight-color:transparent;display:inline-flex;-webkit-tap-highlight-color:transparent;display:inline-flex;outline:none;user-select:none}:host .mdc-touch-target-wrapper{display:inline}:host .mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:0;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);background-color:#fff;background-color:var(--mdc-elevation-overlay-color, #fff)}:host .mdc-fab{position:relative;display:inline-flex;position:relative;align-items:center;justify-content:center;box-sizing:border-box;width:56px;height:56px;padding:0;border:none;fill:currentColor;text-decoration:none;cursor:pointer;user-select:none;-moz-appearance:none;-webkit-appearance:none;overflow:visible;transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1),opacity 15ms linear 30ms,transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1)}:host .mdc-fab .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}:host .mdc-fab::-moz-focus-inner{padding:0;border:0}:host .mdc-fab:hover{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}:host .mdc-fab.mdc-ripple-upgraded--background-focused,:host .mdc-fab:not(.mdc-ripple-upgraded):focus{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}:host .mdc-fab .mdc-fab__focus-ring{position:absolute}:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring{pointer-events:none;border:2px solid transparent;border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc( 100% + 4px );width:calc( 100% + 4px )}@media screen and (forced-colors: active){:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring{border-color:CanvasText}}:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring::after,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring::after{content:"";border:2px solid transparent;border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring::after,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring::after{border-color:CanvasText}}:host .mdc-fab:active,:host .mdc-fab:focus:active{box-shadow:0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0,0,0,.12)}:host .mdc-fab:active,:host .mdc-fab:focus{outline:none}:host .mdc-fab:hover{cursor:pointer}:host .mdc-fab>svg{width:100%}:host .mdc-fab--mini{width:40px;height:40px}:host .mdc-fab--extended{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);border-radius:24px;padding-left:20px;padding-right:20px;width:auto;max-width:100%;height:48px;line-height:normal}:host .mdc-fab--extended .mdc-fab__ripple{border-radius:24px}:host .mdc-fab--extended .mdc-fab__icon{margin-left:calc(12px - 20px);margin-right:12px}[dir=rtl] :host .mdc-fab--extended .mdc-fab__icon,:host .mdc-fab--extended .mdc-fab__icon[dir=rtl]{margin-left:12px;margin-right:calc(12px - 20px)}:host .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon{margin-left:12px;margin-right:calc(12px - 20px)}[dir=rtl] :host .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon,:host .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon[dir=rtl]{margin-left:calc(12px - 20px);margin-right:12px}:host .mdc-fab--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}:host .mdc-fab--touch .mdc-fab__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}:host .mdc-fab::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid transparent;border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){:host .mdc-fab::before{border-color:CanvasText}}:host .mdc-fab__label{justify-content:flex-start;text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden;overflow-y:visible}:host .mdc-fab__icon{transition:transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);fill:currentColor;will-change:transform}:host .mdc-fab .mdc-fab__icon{display:inline-flex;align-items:center;justify-content:center}:host .mdc-fab--exited{transform:scale(0);opacity:0;transition:opacity 15ms linear 150ms,transform 180ms 0ms cubic-bezier(0.4, 0, 1, 1)}:host .mdc-fab--exited .mdc-fab__icon{transform:scale(0);transition:transform 135ms 0ms cubic-bezier(0.4, 0, 1, 1)}:host .mdc-fab{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786);box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0,0,0,.12)}:host .mdc-fab .mdc-fab__icon{width:24px;height:24px;font-size:24px}:host .mdc-fab,:host .mdc-fab:not(:disabled) .mdc-fab__icon,:host .mdc-fab:not(:disabled) .mdc-fab__label,:host .mdc-fab:disabled .mdc-fab__icon,:host .mdc-fab:disabled .mdc-fab__label{color:#fff;color:var(--mdc-theme-on-secondary, #fff)}:host .mdc-fab:not(.mdc-fab--extended){border-radius:50%}:host .mdc-fab:not(.mdc-fab--extended) .mdc-fab__ripple{border-radius:50%}:host .mdc-fab{position:relative;display:inline-flex;position:relative;align-items:center;justify-content:center;box-sizing:border-box;width:56px;height:56px;padding:0;border:none;fill:currentColor;text-decoration:none;cursor:pointer;user-select:none;-moz-appearance:none;-webkit-appearance:none;overflow:visible;transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1),opacity 15ms linear 30ms,transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1)}:host .mdc-fab .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}:host .mdc-fab::-moz-focus-inner{padding:0;border:0}:host .mdc-fab:hover{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}:host .mdc-fab.mdc-ripple-upgraded--background-focused,:host .mdc-fab:not(.mdc-ripple-upgraded):focus{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}:host .mdc-fab .mdc-fab__focus-ring{position:absolute}:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring{pointer-events:none;border:2px solid transparent;border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc( 100% + 4px );width:calc( 100% + 4px )}@media screen and (forced-colors: active){:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring{border-color:CanvasText}}:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring::after,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring::after{content:"";border:2px solid transparent;border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){:host .mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring::after,:host .mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring::after{border-color:CanvasText}}:host .mdc-fab:active,:host .mdc-fab:focus:active{box-shadow:0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0,0,0,.12)}:host .mdc-fab:active,:host .mdc-fab:focus{outline:none}:host .mdc-fab:hover{cursor:pointer}:host .mdc-fab>svg{width:100%}:host .mdc-fab--mini{width:40px;height:40px}:host .mdc-fab--extended{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);border-radius:24px;padding-left:20px;padding-right:20px;width:auto;max-width:100%;height:48px;line-height:normal}:host .mdc-fab--extended .mdc-fab__ripple{border-radius:24px}:host .mdc-fab--extended .mdc-fab__icon{margin-left:calc(12px - 20px);margin-right:12px}[dir=rtl] :host .mdc-fab--extended .mdc-fab__icon,:host .mdc-fab--extended .mdc-fab__icon[dir=rtl]{margin-left:12px;margin-right:calc(12px - 20px)}:host .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon{margin-left:12px;margin-right:calc(12px - 20px)}[dir=rtl] :host .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon,:host .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon[dir=rtl]{margin-left:calc(12px - 20px);margin-right:12px}:host .mdc-fab--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}:host .mdc-fab--touch .mdc-fab__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}:host .mdc-fab::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid transparent;border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){:host .mdc-fab::before{border-color:CanvasText}}:host .mdc-fab__label{justify-content:flex-start;text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden;overflow-y:visible}:host .mdc-fab__icon{transition:transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);fill:currentColor;will-change:transform}:host .mdc-fab .mdc-fab__icon{display:inline-flex;align-items:center;justify-content:center}:host .mdc-fab--exited{transform:scale(0);opacity:0;transition:opacity 15ms linear 150ms,transform 180ms 0ms cubic-bezier(0.4, 0, 1, 1)}:host .mdc-fab--exited .mdc-fab__icon{transform:scale(0);transition:transform 135ms 0ms cubic-bezier(0.4, 0, 1, 1)}:host .mdc-fab .ripple{overflow:hidden}:host .mdc-fab:not(.mdc-fab--extended) .ripple{border-radius:50%}:host .mdc-fab.mdc-fab--extended .ripple{border-radius:24px}:host .mdc-fab .mdc-fab__label{z-index:0}:host .mdc-fab .mdc-fab__icon ::slotted(*){width:inherit;height:inherit;font-size:inherit}:host .mdc-fab--extended.mdc-fab--exited .mdc-fab__icon ::slotted(*){transform:scale(0);transition:transform 135ms 0ms cubic-bezier(0.4, 0, 1, 1)}:host .mdc-fab{padding-top:0px;padding-top:max(0px, var(--mdc-fab-focus-outline-width, 0px));padding-right:0px;padding-right:max(0px, var(--mdc-fab-focus-outline-width, 0px));padding-bottom:0px;padding-bottom:max(0px, var(--mdc-fab-focus-outline-width, 0px));padding-left:0px;padding-left:max(0px, var(--mdc-fab-focus-outline-width, 0px));box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-fab-box-shadow, 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12))}:host .mdc-fab:not(:disabled).mdc-ripple-upgraded--background-focused,:host .mdc-fab:not(:disabled):not(.mdc-ripple-upgraded):focus{border-color:initial;border-color:var(--mdc-fab-focus-outline-color, initial)}:host .mdc-fab:not(:disabled).mdc-ripple-upgraded--background-focused,:host .mdc-fab:not(:disabled):not(.mdc-ripple-upgraded):focus{border-style:solid;border-width:var(--mdc-fab-focus-outline-width, 0px);padding-top:0px;padding-top:max(calc(0px - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(0px - var(--mdc-fab-focus-outline-width, 0px)) * -1));padding-right:0px;padding-right:max(calc(0px - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(0px - var(--mdc-fab-focus-outline-width, 0px)) * -1));padding-bottom:0px;padding-bottom:max(calc(0px - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(0px - var(--mdc-fab-focus-outline-width, 0px)) * -1));padding-left:0px;padding-left:max(calc(0px - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(0px - var(--mdc-fab-focus-outline-width, 0px)) * -1))}:host .mdc-fab:hover,:host .mdc-fab:focus{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-fab-box-shadow, 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12))}:host .mdc-fab:active{box-shadow:0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-fab-box-shadow, 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12))}:host .mdc-fab .ripple{overflow:hidden}:host .mdc-fab .mdc-fab__label{z-index:0}:host .mdc-fab:not(.mdc-fab--extended) .ripple{border-radius:50%}:host .mdc-fab.mdc-fab--extended .ripple{border-radius:24px}:host .mdc-fab .mdc-fab__icon{width:24px;width:var(--mdc-icon-size, 24px);height:24px;height:var(--mdc-icon-size, 24px);font-size:24px;font-size:var(--mdc-icon-size, 24px);transition:transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);fill:currentColor;will-change:transform;display:inline-flex;align-items:center;justify-content:center}:host .mdc-fab.mdc-fab--extended{padding-top:0px;padding-top:max(0px, var(--mdc-fab-focus-outline-width, 0px));padding-right:20px;padding-right:max(var(--mdc-fab-extended-label-padding, 20px), var(--mdc-fab-focus-outline-width, 0px));padding-bottom:0px;padding-bottom:max(0px, var(--mdc-fab-focus-outline-width, 0px));padding-left:20px;padding-left:max(var(--mdc-fab-extended-label-padding, 20px), var(--mdc-fab-focus-outline-width, 0px))}:host .mdc-fab.mdc-fab--extended:not(:disabled).mdc-ripple-upgraded--background-focused,:host .mdc-fab.mdc-fab--extended:not(:disabled):not(.mdc-ripple-upgraded):focus{border-style:solid;border-width:var(--mdc-fab-focus-outline-width, 0px);padding-top:0px;padding-top:max(calc(0px - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(0px - var(--mdc-fab-focus-outline-width, 0px)) * -1));padding-right:20px;padding-right:max(calc(var(--mdc-fab-extended-label-padding, 20px) - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(var(--mdc-fab-extended-label-padding, 20px) - var(--mdc-fab-focus-outline-width, 0px)) * -1));padding-bottom:0px;padding-bottom:max(calc(0px - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(0px - var(--mdc-fab-focus-outline-width, 0px)) * -1));padding-left:20px;padding-left:max(calc(var(--mdc-fab-extended-label-padding, 20px) - var(--mdc-fab-focus-outline-width, 0px)), calc(calc(var(--mdc-fab-extended-label-padding, 20px) - var(--mdc-fab-focus-outline-width, 0px)) * -1))}:host .mdc-fab.mdc-fab--extended.icon-end .mdc-fab__icon{margin-left:12px;margin-left:var(--mdc-fab-extended-icon-padding, 12px);margin-right:calc(12px - 20px);margin-right:calc(var(--mdc-fab-extended-icon-padding, 12px) - var(--mdc-fab-extended-label-padding, 20px))}[dir=rtl] :host .mdc-fab.mdc-fab--extended.icon-end .mdc-fab__icon,:host .mdc-fab.mdc-fab--extended.icon-end .mdc-fab__icon[dir=rtl]{margin-left:calc(12px - 20px);margin-left:calc(var(--mdc-fab-extended-icon-padding, 12px) - var(--mdc-fab-extended-label-padding, 20px));margin-right:12px;margin-right:var(--mdc-fab-extended-icon-padding, 12px)}`;

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
let Fab = class Fab extends FabBase {
};
Fab.styles = [styles$2];
Fab = __decorate([
    e$b('mwc-fab')
], Fab);

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var strings$1 = {
    NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch',
};
var numbers$1 = {
    // This should stay in sync with $mdc-notched-outline-padding * 2.
    NOTCH_ELEMENT_PADDING: 8,
};
var cssClasses$3 = {
    NO_LABEL: 'mdc-notched-outline--no-label',
    OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
    OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded',
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCNotchedOutlineFoundation = /** @class */ (function (_super) {
    __extends(MDCNotchedOutlineFoundation, _super);
    function MDCNotchedOutlineFoundation(adapter) {
        return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
        get: function () {
            return strings$1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
        get: function () {
            return cssClasses$3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
        get: function () {
            return numbers$1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
        /**
         * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
         */
        get: function () {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function () { return undefined; },
                removeClass: function () { return undefined; },
                setNotchWidthProperty: function () { return undefined; },
                removeNotchWidthProperty: function () { return undefined; },
            };
            // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
     */
    MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
        if (notchWidth > 0) {
            notchWidth += numbers$1.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
        }
        this.adapter.setNotchWidthProperty(notchWidth);
        this.adapter.addClass(OUTLINE_NOTCHED);
    };
    /**
     * Removes notched outline selector to close the notch in the outline.
     */
    MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
        this.adapter.removeClass(OUTLINE_NOTCHED);
        this.adapter.removeNotchWidthProperty();
    };
    return MDCNotchedOutlineFoundation;
}(MDCFoundation));

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$2,o$1;class s$2 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$2.finalized=!0,s$2._$litElement$=!0,null===(l$2=globalThis.litElementHydrateSupport)||void 0===l$2||l$2.call(globalThis,{LitElement:s$2});const n$1=globalThis.litElementPolyfillSupport;null==n$1||n$1({LitElement:s$2});(null!==(o$1=globalThis.litElementVersions)&&void 0!==o$1?o$1:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
class NotchedOutlineBase extends BaseElement {
    constructor() {
        super(...arguments);
        this.mdcFoundationClass = MDCNotchedOutlineFoundation;
        this.width = 0;
        this.open = false;
        this.lastOpen = this.open;
    }
    createAdapter() {
        return {
            addClass: (className) => this.mdcRoot.classList.add(className),
            removeClass: (className) => this.mdcRoot.classList.remove(className),
            setNotchWidthProperty: (width) => this.notchElement.style.setProperty('width', `${width}px`),
            removeNotchWidthProperty: () => this.notchElement.style.removeProperty('width'),
        };
    }
    openOrClose(shouldOpen, width) {
        if (!this.mdcFoundation) {
            return;
        }
        if (shouldOpen && width !== undefined) {
            this.mdcFoundation.notch(width);
        }
        else {
            this.mdcFoundation.closeNotch();
        }
    }
    render() {
        this.openOrClose(this.open, this.width);
        const classes = o$a({
            'mdc-notched-outline--notched': this.open,
        });
        return x `
      <span class="mdc-notched-outline ${classes}">
        <span class="mdc-notched-outline__leading"></span>
        <span class="mdc-notched-outline__notch">
          <slot></slot>
        </span>
        <span class="mdc-notched-outline__trailing"></span>
      </span>`;
    }
}
__decorate([
    i$7('.mdc-notched-outline')
], NotchedOutlineBase.prototype, "mdcRoot", void 0);
__decorate([
    n$h({ type: Number })
], NotchedOutlineBase.prototype, "width", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], NotchedOutlineBase.prototype, "open", void 0);
__decorate([
    i$7('.mdc-notched-outline__notch')
], NotchedOutlineBase.prototype, "notchElement", void 0);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles$1 = i$6 `.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / 0.75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{display:none}:host{display:block;position:absolute;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] :host,:host([dir=rtl]){text-align:right}::slotted(.mdc-floating-label){display:inline-block;position:relative;top:17px;bottom:auto;max-width:100%}::slotted(.mdc-floating-label--float-above){text-overflow:clip}.mdc-notched-outline--upgraded ::slotted(.mdc-floating-label--float-above){max-width:calc(100% / 0.75)}.mdc-notched-outline .mdc-notched-outline__leading{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small, 4px)}[dir=rtl] .mdc-notched-outline .mdc-notched-outline__leading,.mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small, 4px);border-bottom-left-radius:0}@supports(top: max(0%)){.mdc-notched-outline .mdc-notched-outline__leading{width:max(12px, var(--mdc-shape-small, 4px))}}@supports(top: max(0%)){.mdc-notched-outline .mdc-notched-outline__notch{max-width:calc(100% - max(12px, var(--mdc-shape-small, 4px)) * 2)}}.mdc-notched-outline .mdc-notched-outline__trailing{border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small, 4px);border-bottom-left-radius:0}[dir=rtl] .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small, 4px)}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{border-color:var(--mdc-notched-outline-border-color, var(--mdc-theme-primary, #6200ee));border-width:1px;border-width:var(--mdc-notched-outline-stroke-width, 1px)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:0;padding-top:var(--mdc-notched-outline-notch-offset, 0)}`;

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
let NotchedOutline = class NotchedOutline extends NotchedOutlineBase {
};
NotchedOutline.styles = [styles$1];
NotchedOutline = __decorate([
    e$b('mwc-notched-outline')
], NotchedOutline);

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var _a, _b;
// ShadyDOM should submit <input> elements in component internals
const USING_SHADY_DOM = (_b = (_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) !== null && _b !== void 0 ? _b : false;
/** @soyCompatible */
class FormElement extends BaseElement {
    constructor() {
        super(...arguments);
        /**
         * Disabled state for the component. When `disabled` is set to `true`, the
         * component will not be added to form submission.
         */
        this.disabled = false;
        /**
         * Form element that contains this element
         */
        this.containingForm = null;
        this.formDataListener = (ev) => {
            if (!this.disabled) {
                this.setFormData(ev.formData);
            }
        };
    }
    findFormElement() {
        // If the component internals are not in Shadow DOM, subscribing to form
        // data events could lead to duplicated data, which may not work correctly
        // on the server side.
        if (!this.shadowRoot || USING_SHADY_DOM) {
            return null;
        }
        const root = this.getRootNode();
        const forms = root.querySelectorAll('form');
        for (const form of Array.from(forms)) {
            if (form.contains(this)) {
                return form;
            }
        }
        return null;
    }
    connectedCallback() {
        var _a;
        super.connectedCallback();
        this.containingForm = this.findFormElement();
        (_a = this.containingForm) === null || _a === void 0 ? void 0 : _a.addEventListener('formdata', this.formDataListener);
    }
    disconnectedCallback() {
        var _a;
        super.disconnectedCallback();
        (_a = this.containingForm) === null || _a === void 0 ? void 0 : _a.removeEventListener('formdata', this.formDataListener);
        this.containingForm = null;
    }
    click() {
        if (this.formElement && !this.disabled) {
            this.formElement.focus();
            this.formElement.click();
        }
    }
    firstUpdated() {
        super.firstUpdated();
        if (this.shadowRoot) {
            this.mdcRoot.addEventListener('change', (e) => {
                this.dispatchEvent(new Event('change', e));
            });
        }
    }
}
FormElement.shadowRootOptions = { mode: 'open', delegatesFocus: true };
__decorate([
    n$h({ type: Boolean })
], FormElement.prototype, "disabled", void 0);

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses$2 = {
    LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
    LABEL_REQUIRED: 'mdc-floating-label--required',
    LABEL_SHAKE: 'mdc-floating-label--shake',
    ROOT: 'mdc-floating-label',
};

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCFloatingLabelFoundation = /** @class */ (function (_super) {
    __extends(MDCFloatingLabelFoundation, _super);
    function MDCFloatingLabelFoundation(adapter) {
        var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation.defaultAdapter), adapter)) || this;
        _this.shakeAnimationEndHandler = function () {
            _this.handleShakeAnimationEnd();
        };
        return _this;
    }
    Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
        get: function () {
            return cssClasses$2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
        /**
         * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
         */
        get: function () {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function () { return undefined; },
                removeClass: function () { return undefined; },
                getWidth: function () { return 0; },
                registerInteractionHandler: function () { return undefined; },
                deregisterInteractionHandler: function () { return undefined; },
            };
            // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCFloatingLabelFoundation.prototype.init = function () {
        this.adapter.registerInteractionHandler('animationend', this.shakeAnimationEndHandler);
    };
    MDCFloatingLabelFoundation.prototype.destroy = function () {
        this.adapter.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler);
    };
    /**
     * Returns the width of the label element.
     */
    MDCFloatingLabelFoundation.prototype.getWidth = function () {
        return this.adapter.getWidth();
    };
    /**
     * Styles the label to produce a shake animation to indicate an error.
     * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
     */
    MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
        if (shouldShake) {
            this.adapter.addClass(LABEL_SHAKE);
        }
        else {
            this.adapter.removeClass(LABEL_SHAKE);
        }
    };
    /**
     * Styles the label to float or dock.
     * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
     */
    MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
        var _a = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
        if (shouldFloat) {
            this.adapter.addClass(LABEL_FLOAT_ABOVE);
        }
        else {
            this.adapter.removeClass(LABEL_FLOAT_ABOVE);
            this.adapter.removeClass(LABEL_SHAKE);
        }
    };
    /**
     * Styles the label as required.
     * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
     */
    MDCFloatingLabelFoundation.prototype.setRequired = function (isRequired) {
        var LABEL_REQUIRED = MDCFloatingLabelFoundation.cssClasses.LABEL_REQUIRED;
        if (isRequired) {
            this.adapter.addClass(LABEL_REQUIRED);
        }
        else {
            this.adapter.removeClass(LABEL_REQUIRED);
        }
    };
    MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd = function () {
        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
        this.adapter.removeClass(LABEL_SHAKE);
    };
    return MDCFloatingLabelFoundation;
}(MDCFoundation));

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const createAdapter$1 = (labelElement) => {
    return {
        addClass: (className) => labelElement.classList.add(className),
        removeClass: (className) => labelElement.classList.remove(className),
        getWidth: () => labelElement.scrollWidth,
        registerInteractionHandler: (evtType, handler) => {
            labelElement.addEventListener(evtType, handler);
        },
        deregisterInteractionHandler: (evtType, handler) => {
            labelElement.removeEventListener(evtType, handler);
        },
    };
};
class FloatingLabelDirective extends i$4 {
    constructor(partInfo) {
        super(partInfo);
        this.foundation = null;
        this.previousPart = null;
        switch (partInfo.type) {
            // Only allow Attribute and Part bindings
            case t$1.ATTRIBUTE:
            case t$1.PROPERTY:
                break;
            default:
                throw new Error('FloatingLabel directive only support attribute and property parts');
        }
    }
    /**
     * There is no PropertyPart in Lit 2 so far. For more info see:
     * https://github.com/lit/lit/issues/1863
     */
    update(part, [label]) {
        if (part !== this.previousPart) {
            if (this.foundation) {
                this.foundation.destroy();
            }
            this.previousPart = part;
            const labelElement = part.element;
            labelElement.classList.add('mdc-floating-label');
            const adapter = createAdapter$1(labelElement);
            this.foundation = new MDCFloatingLabelFoundation(adapter);
            this.foundation.init();
        }
        return this.render(label);
    }
    render(_label) {
        return this.foundation;
    }
}
const floatingLabel = e$3(FloatingLabelDirective);

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses$1 = {
    LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
    LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',
};

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var MDCLineRippleFoundation = /** @class */ (function (_super) {
    __extends(MDCLineRippleFoundation, _super);
    function MDCLineRippleFoundation(adapter) {
        var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation.defaultAdapter), adapter)) || this;
        _this.transitionEndHandler = function (evt) {
            _this.handleTransitionEnd(evt);
        };
        return _this;
    }
    Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
        get: function () {
            return cssClasses$1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
        /**
         * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
         */
        get: function () {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function () { return undefined; },
                removeClass: function () { return undefined; },
                hasClass: function () { return false; },
                setStyle: function () { return undefined; },
                registerEventHandler: function () { return undefined; },
                deregisterEventHandler: function () { return undefined; },
            };
            // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCLineRippleFoundation.prototype.init = function () {
        this.adapter.registerEventHandler('transitionend', this.transitionEndHandler);
    };
    MDCLineRippleFoundation.prototype.destroy = function () {
        this.adapter.deregisterEventHandler('transitionend', this.transitionEndHandler);
    };
    MDCLineRippleFoundation.prototype.activate = function () {
        this.adapter.removeClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);
        this.adapter.addClass(cssClasses$1.LINE_RIPPLE_ACTIVE);
    };
    MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
        this.adapter.setStyle('transform-origin', xCoordinate + "px center");
    };
    MDCLineRippleFoundation.prototype.deactivate = function () {
        this.adapter.addClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);
    };
    MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
        // Wait for the line ripple to be either transparent or opaque
        // before emitting the animation end event
        var isDeactivating = this.adapter.hasClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);
        if (evt.propertyName === 'opacity') {
            if (isDeactivating) {
                this.adapter.removeClass(cssClasses$1.LINE_RIPPLE_ACTIVE);
                this.adapter.removeClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);
            }
        }
    };
    return MDCLineRippleFoundation;
}(MDCFoundation));

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const createAdapter = (lineElement) => {
    return {
        addClass: (className) => lineElement.classList.add(className),
        removeClass: (className) => lineElement.classList.remove(className),
        hasClass: (className) => lineElement.classList.contains(className),
        setStyle: (propertyName, value) => lineElement.style.setProperty(propertyName, value),
        registerEventHandler: (evtType, handler) => {
            lineElement.addEventListener(evtType, handler);
        },
        deregisterEventHandler: (evtType, handler) => {
            lineElement.removeEventListener(evtType, handler);
        },
    };
};
class LineRippleDirective extends i$4 {
    constructor(partInfo) {
        super(partInfo);
        this.previousPart = null;
        this.foundation = null;
        switch (partInfo.type) {
            case t$1.ATTRIBUTE:
            case t$1.PROPERTY:
                return;
            default:
                throw new Error('LineRipple only support attribute and property parts.');
        }
    }
    /**
     * There is no PropertyPart in Lit 2 so far. For more info see:
     * https://github.com/lit/lit/issues/1863
     */
    update(part, _params) {
        if (this.previousPart !== part) {
            if (this.foundation) {
                this.foundation.destroy();
            }
            this.previousPart = part;
            const lineElement = part.element;
            lineElement.classList.add('mdc-line-ripple');
            const adapter = createAdapter(lineElement);
            this.foundation = new MDCLineRippleFoundation(adapter);
            this.foundation.init();
        }
        return this.render();
    }
    render() {
        return this.foundation;
    }
}
const lineRipple = e$3(LineRippleDirective);

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var strings = {
    ARIA_CONTROLS: 'aria-controls',
    ARIA_DESCRIBEDBY: 'aria-describedby',
    INPUT_SELECTOR: '.mdc-text-field__input',
    LABEL_SELECTOR: '.mdc-floating-label',
    LEADING_ICON_SELECTOR: '.mdc-text-field__icon--leading',
    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
    OUTLINE_SELECTOR: '.mdc-notched-outline',
    PREFIX_SELECTOR: '.mdc-text-field__affix--prefix',
    SUFFIX_SELECTOR: '.mdc-text-field__affix--suffix',
    TRAILING_ICON_SELECTOR: '.mdc-text-field__icon--trailing'
};
var cssClasses = {
    DISABLED: 'mdc-text-field--disabled',
    FOCUSED: 'mdc-text-field--focused',
    HELPER_LINE: 'mdc-text-field-helper-line',
    INVALID: 'mdc-text-field--invalid',
    LABEL_FLOATING: 'mdc-text-field--label-floating',
    NO_LABEL: 'mdc-text-field--no-label',
    OUTLINED: 'mdc-text-field--outlined',
    ROOT: 'mdc-text-field',
    TEXTAREA: 'mdc-text-field--textarea',
    WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',
    WITH_TRAILING_ICON: 'mdc-text-field--with-trailing-icon',
    WITH_INTERNAL_COUNTER: 'mdc-text-field--with-internal-counter',
};
var numbers = {
    LABEL_SCALE: 0.75,
};
/**
 * Whitelist based off of
 * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
 * under the "Validation-related attributes" section.
 */
var VALIDATION_ATTR_WHITELIST = [
    'pattern',
    'min',
    'max',
    'required',
    'step',
    'minlength',
    'maxlength',
];
/**
 * Label should always float for these types as they show some UI even if value
 * is empty.
 */
var ALWAYS_FLOAT_TYPES = [
    'color',
    'date',
    'datetime-local',
    'month',
    'range',
    'time',
    'week',
];

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];
var INTERACTION_EVENTS = ['click', 'keydown'];
var MDCTextFieldFoundation = /** @class */ (function (_super) {
    __extends(MDCTextFieldFoundation, _super);
    /**
     * @param adapter
     * @param foundationMap Map from subcomponent names to their subfoundations.
     */
    function MDCTextFieldFoundation(adapter, foundationMap) {
        if (foundationMap === void 0) { foundationMap = {}; }
        var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;
        _this.isFocused = false;
        _this.receivedUserInput = false;
        _this.valid = true;
        _this.useNativeValidation = true;
        _this.validateOnValueChange = true;
        _this.helperText = foundationMap.helperText;
        _this.characterCounter = foundationMap.characterCounter;
        _this.leadingIcon = foundationMap.leadingIcon;
        _this.trailingIcon = foundationMap.trailingIcon;
        _this.inputFocusHandler = function () {
            _this.activateFocus();
        };
        _this.inputBlurHandler = function () {
            _this.deactivateFocus();
        };
        _this.inputInputHandler = function () {
            _this.handleInput();
        };
        _this.setPointerXOffset = function (evt) {
            _this.setTransformOrigin(evt);
        };
        _this.textFieldInteractionHandler = function () {
            _this.handleTextFieldInteraction();
        };
        _this.validationAttributeChangeHandler = function (attributesList) {
            _this.handleValidationAttributeChange(attributesList);
        };
        return _this;
    }
    Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
        get: function () {
            return cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "strings", {
        get: function () {
            return strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "numbers", {
        get: function () {
            return numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat", {
        get: function () {
            var type = this.getNativeInput().type;
            return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
        get: function () {
            return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() ||
                this.isBadInput();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
        get: function () {
            return !this.isFocused && !this.isValid() && !!this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
        /**
         * See {@link MDCTextFieldAdapter} for typing information on parameters and
         * return types.
         */
        get: function () {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function () { return undefined; },
                removeClass: function () { return undefined; },
                hasClass: function () { return true; },
                setInputAttr: function () { return undefined; },
                removeInputAttr: function () { return undefined; },
                registerTextFieldInteractionHandler: function () { return undefined; },
                deregisterTextFieldInteractionHandler: function () { return undefined; },
                registerInputInteractionHandler: function () { return undefined; },
                deregisterInputInteractionHandler: function () { return undefined; },
                registerValidationAttributeChangeHandler: function () {
                    return new MutationObserver(function () { return undefined; });
                },
                deregisterValidationAttributeChangeHandler: function () { return undefined; },
                getNativeInput: function () { return null; },
                isFocused: function () { return false; },
                activateLineRipple: function () { return undefined; },
                deactivateLineRipple: function () { return undefined; },
                setLineRippleTransformOrigin: function () { return undefined; },
                shakeLabel: function () { return undefined; },
                floatLabel: function () { return undefined; },
                setLabelRequired: function () { return undefined; },
                hasLabel: function () { return false; },
                getLabelWidth: function () { return 0; },
                hasOutline: function () { return false; },
                notchOutline: function () { return undefined; },
                closeOutline: function () { return undefined; },
            };
            // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldFoundation.prototype.init = function () {
        var e_1, _a, e_2, _b;
        if (this.adapter.hasLabel() && this.getNativeInput().required) {
            this.adapter.setLabelRequired(true);
        }
        if (this.adapter.isFocused()) {
            this.inputFocusHandler();
        }
        else if (this.adapter.hasLabel() && this.shouldFloat) {
            this.notchOutline(true);
            this.adapter.floatLabel(true);
            this.styleFloating(true);
        }
        this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);
        this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);
        this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);
        try {
            for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {
                var evtType = POINTERDOWN_EVENTS_1_1.value;
                this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
                var evtType = INTERACTION_EVENTS_1_1.value;
                this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.validationObserver =
            this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
        this.setcharacterCounter(this.getValue().length);
    };
    MDCTextFieldFoundation.prototype.destroy = function () {
        var e_3, _a, e_4, _b;
        this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);
        this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);
        this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);
        try {
            for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {
                var evtType = POINTERDOWN_EVENTS_2_1.value;
                this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
                var evtType = INTERACTION_EVENTS_2_1.value;
                this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
    };
    /**
     * Handles user interactions with the Text Field.
     */
    MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {
        var nativeInput = this.adapter.getNativeInput();
        if (nativeInput && nativeInput.disabled) {
            return;
        }
        this.receivedUserInput = true;
    };
    /**
     * Handles validation attribute changes
     */
    MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {
        var _this = this;
        attributesList.some(function (attributeName) {
            if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
                _this.styleValidity(true);
                _this.adapter.setLabelRequired(_this.getNativeInput().required);
                return true;
            }
            return false;
        });
        if (attributesList.indexOf('maxlength') > -1) {
            this.setcharacterCounter(this.getValue().length);
        }
    };
    /**
     * Opens/closes the notched outline.
     */
    MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {
        if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
            return;
        }
        if (openNotch) {
            var labelWidth = this.adapter.getLabelWidth() * numbers.LABEL_SCALE;
            this.adapter.notchOutline(labelWidth);
        }
        else {
            this.adapter.closeOutline();
        }
    };
    /**
     * Activates the text field focus state.
     */
    MDCTextFieldFoundation.prototype.activateFocus = function () {
        this.isFocused = true;
        this.styleFocused(this.isFocused);
        this.adapter.activateLineRipple();
        if (this.adapter.hasLabel()) {
            this.notchOutline(this.shouldFloat);
            this.adapter.floatLabel(this.shouldFloat);
            this.styleFloating(this.shouldFloat);
            this.adapter.shakeLabel(this.shouldShake);
        }
        if (this.helperText &&
            (this.helperText.isPersistent() || !this.helperText.isValidation() ||
                !this.valid)) {
            this.helperText.showToScreenReader();
        }
    };
    /**
     * Sets the line ripple's transform origin, so that the line ripple activate
     * animation will animate out from the user's click location.
     */
    MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {
        if (this.isDisabled() || this.adapter.hasOutline()) {
            return;
        }
        var touches = evt.touches;
        var targetEvent = touches ? touches[0] : evt;
        var targetClientRect = targetEvent.target.getBoundingClientRect();
        var normalizedX = targetEvent.clientX - targetClientRect.left;
        this.adapter.setLineRippleTransformOrigin(normalizedX);
    };
    /**
     * Handles input change of text input and text area.
     */
    MDCTextFieldFoundation.prototype.handleInput = function () {
        this.autoCompleteFocus();
        this.setcharacterCounter(this.getValue().length);
    };
    /**
     * Activates the Text Field's focus state in cases when the input value
     * changes without user input (e.g. programmatically).
     */
    MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {
        if (!this.receivedUserInput) {
            this.activateFocus();
        }
    };
    /**
     * Deactivates the Text Field's focus state.
     */
    MDCTextFieldFoundation.prototype.deactivateFocus = function () {
        this.isFocused = false;
        this.adapter.deactivateLineRipple();
        var isValid = this.isValid();
        this.styleValidity(isValid);
        this.styleFocused(this.isFocused);
        if (this.adapter.hasLabel()) {
            this.notchOutline(this.shouldFloat);
            this.adapter.floatLabel(this.shouldFloat);
            this.styleFloating(this.shouldFloat);
            this.adapter.shakeLabel(this.shouldShake);
        }
        if (!this.shouldFloat) {
            this.receivedUserInput = false;
        }
    };
    MDCTextFieldFoundation.prototype.getValue = function () {
        return this.getNativeInput().value;
    };
    /**
     * @param value The value to set on the input Element.
     */
    MDCTextFieldFoundation.prototype.setValue = function (value) {
        // Prevent Safari from moving the caret to the end of the input when the
        // value has not changed.
        if (this.getValue() !== value) {
            this.getNativeInput().value = value;
        }
        this.setcharacterCounter(value.length);
        if (this.validateOnValueChange) {
            var isValid = this.isValid();
            this.styleValidity(isValid);
        }
        if (this.adapter.hasLabel()) {
            this.notchOutline(this.shouldFloat);
            this.adapter.floatLabel(this.shouldFloat);
            this.styleFloating(this.shouldFloat);
            if (this.validateOnValueChange) {
                this.adapter.shakeLabel(this.shouldShake);
            }
        }
    };
    /**
     * @return The custom validity state, if set; otherwise, the result of a
     *     native validity check.
     */
    MDCTextFieldFoundation.prototype.isValid = function () {
        return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
    };
    /**
     * @param isValid Sets the custom validity state of the Text Field.
     */
    MDCTextFieldFoundation.prototype.setValid = function (isValid) {
        this.valid = isValid;
        this.styleValidity(isValid);
        var shouldShake = !isValid && !this.isFocused && !!this.getValue();
        if (this.adapter.hasLabel()) {
            this.adapter.shakeLabel(shouldShake);
        }
    };
    /**
     * @param shouldValidate Whether or not validity should be updated on
     *     value change.
     */
    MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {
        this.validateOnValueChange = shouldValidate;
    };
    /**
     * @return Whether or not validity should be updated on value change. `true`
     *     by default.
     */
    MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {
        return this.validateOnValueChange;
    };
    /**
     * Enables or disables the use of native validation. Use this for custom
     * validation.
     * @param useNativeValidation Set this to false to ignore native input
     *     validation.
     */
    MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {
        this.useNativeValidation = useNativeValidation;
    };
    MDCTextFieldFoundation.prototype.isDisabled = function () {
        return this.getNativeInput().disabled;
    };
    /**
     * @param disabled Sets the text-field disabled or enabled.
     */
    MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {
        this.getNativeInput().disabled = disabled;
        this.styleDisabled(disabled);
    };
    /**
     * @param content Sets the content of the helper text.
     */
    MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {
        if (this.helperText) {
            this.helperText.setContent(content);
        }
    };
    /**
     * Sets the aria label of the leading icon.
     */
    MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {
        if (this.leadingIcon) {
            this.leadingIcon.setAriaLabel(label);
        }
    };
    /**
     * Sets the text content of the leading icon.
     */
    MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {
        if (this.leadingIcon) {
            this.leadingIcon.setContent(content);
        }
    };
    /**
     * Sets the aria label of the trailing icon.
     */
    MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {
        if (this.trailingIcon) {
            this.trailingIcon.setAriaLabel(label);
        }
    };
    /**
     * Sets the text content of the trailing icon.
     */
    MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {
        if (this.trailingIcon) {
            this.trailingIcon.setContent(content);
        }
    };
    /**
     * Sets character counter values that shows characters used and the total
     * character limit.
     */
    MDCTextFieldFoundation.prototype.setcharacterCounter = function (currentLength) {
        if (!this.characterCounter) {
            return;
        }
        var maxLength = this.getNativeInput().maxLength;
        if (maxLength === -1) {
            throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
        }
        this.characterCounter.setCounterValue(currentLength, maxLength);
    };
    /**
     * @return True if the Text Field input fails in converting the user-supplied
     *     value.
     */
    MDCTextFieldFoundation.prototype.isBadInput = function () {
        // The badInput property is not supported in IE 11 💩.
        return this.getNativeInput().validity.badInput || false;
    };
    /**
     * @return The result of native validity checking (ValidityState.valid).
     */
    MDCTextFieldFoundation.prototype.isNativeInputValid = function () {
        return this.getNativeInput().validity.valid;
    };
    /**
     * Styles the component based on the validity state.
     */
    MDCTextFieldFoundation.prototype.styleValidity = function (isValid) {
        var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;
        if (isValid) {
            this.adapter.removeClass(INVALID);
        }
        else {
            this.adapter.addClass(INVALID);
        }
        if (this.helperText) {
            this.helperText.setValidity(isValid);
            // We dynamically set or unset aria-describedby for validation helper text
            // only, based on whether the field is valid
            var helperTextValidation = this.helperText.isValidation();
            if (!helperTextValidation) {
                return;
            }
            var helperTextVisible = this.helperText.isVisible();
            var helperTextId = this.helperText.getId();
            if (helperTextVisible && helperTextId) {
                this.adapter.setInputAttr(strings.ARIA_DESCRIBEDBY, helperTextId);
            }
            else {
                this.adapter.removeInputAttr(strings.ARIA_DESCRIBEDBY);
            }
        }
    };
    /**
     * Styles the component based on the focused state.
     */
    MDCTextFieldFoundation.prototype.styleFocused = function (isFocused) {
        var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;
        if (isFocused) {
            this.adapter.addClass(FOCUSED);
        }
        else {
            this.adapter.removeClass(FOCUSED);
        }
    };
    /**
     * Styles the component based on the disabled state.
     */
    MDCTextFieldFoundation.prototype.styleDisabled = function (isDisabled) {
        var _a = MDCTextFieldFoundation.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
        if (isDisabled) {
            this.adapter.addClass(DISABLED);
            this.adapter.removeClass(INVALID);
        }
        else {
            this.adapter.removeClass(DISABLED);
        }
        if (this.leadingIcon) {
            this.leadingIcon.setDisabled(isDisabled);
        }
        if (this.trailingIcon) {
            this.trailingIcon.setDisabled(isDisabled);
        }
    };
    /**
     * Styles the component based on the label floating state.
     */
    MDCTextFieldFoundation.prototype.styleFloating = function (isFloating) {
        var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;
        if (isFloating) {
            this.adapter.addClass(LABEL_FLOATING);
        }
        else {
            this.adapter.removeClass(LABEL_FLOATING);
        }
    };
    /**
     * @return The native text input element from the host environment, or an
     *     object with the same shape for unit tests.
     */
    MDCTextFieldFoundation.prototype.getNativeInput = function () {
        // this.adapter may be undefined in foundation unit tests. This happens when
        // testdouble is creating a mock object and invokes the
        // shouldShake/shouldFloat getters (which in turn call getValue(), which
        // calls this method) before init() has been called from the MDCTextField
        // constructor. To work around that issue, we return a dummy object.
        var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
        return nativeInput || {
            disabled: false,
            maxLength: -1,
            required: false,
            type: 'input',
            validity: {
                badInput: false,
                valid: true,
            },
            value: '',
        };
    };
    return MDCTextFieldFoundation;
}(MDCFoundation));
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
var MDCTextFieldFoundation$1 = MDCTextFieldFoundation;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var l$1,o;class s$1 extends u$3{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return T}}s$1.finalized=!0,s$1._$litElement$=!0,null===(l$1=globalThis.litElementHydrateSupport)||void 0===l$1||l$1.call(globalThis,{LitElement:s$1});const n=globalThis.litElementPolyfillSupport;null==n||n({LitElement:s$1});(null!==(o=globalThis.litElementVersions)&&void 0!==o?o:globalThis.litElementVersions=[]).push("3.3.3");

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const e=o=>void 0===o.strings,s={},a=(o,l=s)=>o._$AH=l;

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const l=e$3(class extends i$4{constructor(r){if(super(r),r.type!==t$1.PROPERTY&&r.type!==t$1.ATTRIBUTE&&r.type!==t$1.BOOLEAN_ATTRIBUTE)throw Error("The `live` directive is not allowed on child or event bindings");if(!e(r))throw Error("`live` bindings can only contain a single expression")}render(r){return r}update(i,[t]){if(t===T||t===A)return t;const o=i.element,l=i.name;if(i.type===t$1.PROPERTY){if(t===o[l])return T}else if(i.type===t$1.BOOLEAN_ATTRIBUTE){if(!!t===o.hasAttribute(l))return T}else if(i.type===t$1.ATTRIBUTE&&o.getAttribute(l)===t+"")return T;return a(i),t}});

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];
const createValidityObj = (customValidity = {}) => {
    /*
     * We need to make ValidityState an object because it is readonly and
     * we cannot use the spread operator. Also, we don't export
     * `CustomValidityState` because it is a leaky implementation and the user
     * already has access to `ValidityState` in lib.dom.ts. Also an interface
     * {a: Type} can be casted to {readonly a: Type} so passing any object
     * should be fine.
     */
    const objectifiedCustomValidity = {};
    // eslint-disable-next-line guard-for-in
    for (const propName in customValidity) {
        /*
         * Casting is needed because ValidityState's props are all readonly and
         * thus cannot be set on `onjectifiedCustomValidity`. In the end, the
         * interface is the same as ValidityState (but not readonly), but the
         * function signature casts the output to ValidityState (thus readonly).
         */
        objectifiedCustomValidity[propName] =
            customValidity[propName];
    }
    return Object.assign({ badInput: false, customError: false, patternMismatch: false, rangeOverflow: false, rangeUnderflow: false, stepMismatch: false, tooLong: false, tooShort: false, typeMismatch: false, valid: true, valueMissing: false }, objectifiedCustomValidity);
};
/** @soyCompatible */
class TextFieldBase extends FormElement {
    constructor() {
        super(...arguments);
        this.mdcFoundationClass = MDCTextFieldFoundation$1;
        this.value = '';
        this.type = 'text';
        this.placeholder = '';
        this.label = '';
        this.icon = '';
        this.iconTrailing = '';
        this.disabled = false;
        this.required = false;
        this.minLength = -1;
        this.maxLength = -1;
        this.outlined = false;
        this.helper = '';
        this.validateOnInitialRender = false;
        this.validationMessage = '';
        this.autoValidate = false;
        this.pattern = '';
        this.min = '';
        this.max = '';
        /**
         * step can be a number or the keyword "any".
         *
         * Use `String` typing to pass down the value as a string and let the native
         * input cast internally as needed.
         */
        this.step = null;
        this.size = null;
        this.helperPersistent = false;
        this.charCounter = false;
        this.endAligned = false;
        this.prefix = '';
        this.suffix = '';
        this.name = '';
        this.readOnly = false;
        this.autocapitalize = '';
        this.outlineOpen = false;
        this.outlineWidth = 0;
        this.isUiValid = true;
        this.focused = false;
        this._validity = createValidityObj();
        this.validityTransform = null;
    }
    get validity() {
        this._checkValidity(this.value);
        return this._validity;
    }
    get willValidate() {
        return this.formElement.willValidate;
    }
    get selectionStart() {
        return this.formElement.selectionStart;
    }
    get selectionEnd() {
        return this.formElement.selectionEnd;
    }
    focus() {
        const focusEvt = new CustomEvent('focus');
        this.formElement.dispatchEvent(focusEvt);
        this.formElement.focus();
    }
    blur() {
        const blurEvt = new CustomEvent('blur');
        this.formElement.dispatchEvent(blurEvt);
        this.formElement.blur();
    }
    select() {
        this.formElement.select();
    }
    setSelectionRange(selectionStart, selectionEnd, selectionDirection) {
        this.formElement.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
    }
    update(changedProperties) {
        if (changedProperties.has('autoValidate') && this.mdcFoundation) {
            this.mdcFoundation.setValidateOnValueChange(this.autoValidate);
        }
        if (changedProperties.has('value') && typeof this.value !== 'string') {
            this.value = `${this.value}`;
        }
        super.update(changedProperties);
    }
    setFormData(formData) {
        if (this.name) {
            formData.append(this.name, this.value);
        }
    }
    /** @soyTemplate */
    render() {
        const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;
        const shouldRenderHelperText = !!this.helper || !!this.validationMessage || shouldRenderCharCounter;
        /** @classMap */
        const classes = {
            'mdc-text-field--disabled': this.disabled,
            'mdc-text-field--no-label': !this.label,
            'mdc-text-field--filled': !this.outlined,
            'mdc-text-field--outlined': this.outlined,
            'mdc-text-field--with-leading-icon': this.icon,
            'mdc-text-field--with-trailing-icon': this.iconTrailing,
            'mdc-text-field--end-aligned': this.endAligned,
        };
        return x `
      <label class="mdc-text-field ${o$a(classes)}">
        ${this.renderRipple()}
        ${this.outlined ? this.renderOutline() : this.renderLabel()}
        ${this.renderLeadingIcon()}
        ${this.renderPrefix()}
        ${this.renderInput(shouldRenderHelperText)}
        ${this.renderSuffix()}
        ${this.renderTrailingIcon()}
        ${this.renderLineRipple()}
      </label>
      ${this.renderHelperText(shouldRenderHelperText, shouldRenderCharCounter)}
    `;
    }
    updated(changedProperties) {
        if (changedProperties.has('value') &&
            changedProperties.get('value') !== undefined) {
            this.mdcFoundation.setValue(this.value);
            if (this.autoValidate) {
                this.reportValidity();
            }
        }
    }
    /** @soyTemplate */
    renderRipple() {
        return this.outlined ? '' : x `
      <span class="mdc-text-field__ripple"></span>
    `;
    }
    /** @soyTemplate */
    renderOutline() {
        return !this.outlined ? '' : x `
      <mwc-notched-outline
          .width=${this.outlineWidth}
          .open=${this.outlineOpen}
          class="mdc-notched-outline">
        ${this.renderLabel()}
      </mwc-notched-outline>`;
    }
    /** @soyTemplate */
    renderLabel() {
        return !this.label ?
            '' :
            x `
      <span
          .floatingLabelFoundation=${floatingLabel(this.label)}
          id="label">${this.label}</span>
    `;
    }
    /** @soyTemplate */
    renderLeadingIcon() {
        return this.icon ? this.renderIcon(this.icon) : '';
    }
    /** @soyTemplate */
    renderTrailingIcon() {
        return this.iconTrailing ? this.renderIcon(this.iconTrailing, true) : '';
    }
    /** @soyTemplate */
    renderIcon(icon, isTrailingIcon = false) {
        /** @classMap */
        const classes = {
            'mdc-text-field__icon--leading': !isTrailingIcon,
            'mdc-text-field__icon--trailing': isTrailingIcon
        };
        return x `<i class="material-icons mdc-text-field__icon ${o$a(classes)}">${icon}</i>`;
    }
    /** @soyTemplate */
    renderPrefix() {
        return this.prefix ? this.renderAffix(this.prefix) : '';
    }
    /** @soyTemplate */
    renderSuffix() {
        return this.suffix ? this.renderAffix(this.suffix, true) : '';
    }
    /** @soyTemplate */
    renderAffix(content, isSuffix = false) {
        /** @classMap */
        const classes = {
            'mdc-text-field__affix--prefix': !isSuffix,
            'mdc-text-field__affix--suffix': isSuffix
        };
        return x `<span class="mdc-text-field__affix ${o$a(classes)}">
        ${content}</span>`;
    }
    /** @soyTemplate */
    renderInput(shouldRenderHelperText) {
        const minOrUndef = this.minLength === -1 ? undefined : this.minLength;
        const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;
        const autocapitalizeOrUndef = this.autocapitalize ?
            this.autocapitalize :
            undefined;
        const showValidationMessage = this.validationMessage && !this.isUiValid;
        const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;
        const ariaControlsOrUndef = shouldRenderHelperText ? 'helper-text' : undefined;
        const ariaDescribedbyOrUndef = this.focused || this.helperPersistent || showValidationMessage ?
            'helper-text' :
            undefined;
        // TODO: live() directive needs casting for lit-analyzer
        // https://github.com/runem/lit-analyzer/pull/91/files
        // TODO: lit-analyzer labels min/max as (number|string) instead of string
        return x `
      <input
          aria-labelledby=${l$9(ariaLabelledbyOrUndef)}
          aria-controls="${l$9(ariaControlsOrUndef)}"
          aria-describedby="${l$9(ariaDescribedbyOrUndef)}"
          class="mdc-text-field__input"
          type="${this.type}"
          .value="${l(this.value)}"
          ?disabled="${this.disabled}"
          placeholder="${this.placeholder}"
          ?required="${this.required}"
          ?readonly="${this.readOnly}"
          minlength="${l$9(minOrUndef)}"
          maxlength="${l$9(maxOrUndef)}"
          pattern="${l$9(this.pattern ? this.pattern : undefined)}"
          min="${l$9(this.min === '' ? undefined : this.min)}"
          max="${l$9(this.max === '' ? undefined : this.max)}"
          step="${l$9(this.step === null ? undefined : this.step)}"
          size="${l$9(this.size === null ? undefined : this.size)}"
          name="${l$9(this.name === '' ? undefined : this.name)}"
          inputmode="${l$9(this.inputMode)}"
          autocapitalize="${l$9(autocapitalizeOrUndef)}"
          @input="${this.handleInputChange}"
          @focus="${this.onInputFocus}"
          @blur="${this.onInputBlur}">`;
    }
    /** @soyTemplate */
    renderLineRipple() {
        return this.outlined ?
            '' :
            x `
      <span .lineRippleFoundation=${lineRipple()}></span>
    `;
    }
    /** @soyTemplate */
    renderHelperText(shouldRenderHelperText, shouldRenderCharCounter) {
        const showValidationMessage = this.validationMessage && !this.isUiValid;
        /** @classMap */
        const classes = {
            'mdc-text-field-helper-text--persistent': this.helperPersistent,
            'mdc-text-field-helper-text--validation-msg': showValidationMessage,
        };
        const ariaHiddenOrUndef = this.focused || this.helperPersistent || showValidationMessage ?
            undefined :
            'true';
        const helperText = showValidationMessage ? this.validationMessage : this.helper;
        return !shouldRenderHelperText ? '' : x `
      <div class="mdc-text-field-helper-line">
        <div id="helper-text"
             aria-hidden="${l$9(ariaHiddenOrUndef)}"
             class="mdc-text-field-helper-text ${o$a(classes)}"
             >${helperText}</div>
        ${this.renderCharCounter(shouldRenderCharCounter)}
      </div>`;
    }
    /** @soyTemplate */
    renderCharCounter(shouldRenderCharCounter) {
        const length = Math.min(this.value.length, this.maxLength);
        return !shouldRenderCharCounter ? '' : x `
      <span class="mdc-text-field-character-counter"
            >${length} / ${this.maxLength}</span>`;
    }
    onInputFocus() {
        this.focused = true;
    }
    onInputBlur() {
        this.focused = false;
        this.reportValidity();
    }
    checkValidity() {
        const isValid = this._checkValidity(this.value);
        if (!isValid) {
            const invalidEvent = new Event('invalid', { bubbles: false, cancelable: true });
            this.dispatchEvent(invalidEvent);
        }
        return isValid;
    }
    reportValidity() {
        const isValid = this.checkValidity();
        this.mdcFoundation.setValid(isValid);
        this.isUiValid = isValid;
        return isValid;
    }
    _checkValidity(value) {
        const nativeValidity = this.formElement.validity;
        let validity = createValidityObj(nativeValidity);
        if (this.validityTransform) {
            const customValidity = this.validityTransform(value, validity);
            validity = Object.assign(Object.assign({}, validity), customValidity);
            this.mdcFoundation.setUseNativeValidation(false);
        }
        else {
            this.mdcFoundation.setUseNativeValidation(true);
        }
        this._validity = validity;
        return this._validity.valid;
    }
    setCustomValidity(message) {
        this.validationMessage = message;
        this.formElement.setCustomValidity(message);
    }
    handleInputChange() {
        this.value = this.formElement.value;
    }
    createAdapter() {
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());
    }
    getRootAdapterMethods() {
        return Object.assign({ registerTextFieldInteractionHandler: (evtType, handler) => this.addEventListener(evtType, handler), deregisterTextFieldInteractionHandler: (evtType, handler) => this.removeEventListener(evtType, handler), registerValidationAttributeChangeHandler: (handler) => {
                const getAttributesList = (mutationsList) => {
                    return mutationsList.map((mutation) => mutation.attributeName)
                        .filter((attributeName) => attributeName);
                };
                const observer = new MutationObserver((mutationsList) => {
                    handler(getAttributesList(mutationsList));
                });
                const config = { attributes: true };
                observer.observe(this.formElement, config);
                return observer;
            }, deregisterValidationAttributeChangeHandler: (observer) => observer.disconnect() }, addHasRemoveClass(this.mdcRoot));
    }
    getInputAdapterMethods() {
        return {
            getNativeInput: () => this.formElement,
            // since HelperTextFoundation is not used, aria-describedby a11y logic
            // is implemented in render method instead of these adapter methods
            setInputAttr: () => undefined,
            removeInputAttr: () => undefined,
            isFocused: () => this.shadowRoot ?
                this.shadowRoot.activeElement === this.formElement :
                false,
            registerInputInteractionHandler: (evtType, handler) => this.formElement.addEventListener(evtType, handler, { passive: evtType in passiveEvents }),
            deregisterInputInteractionHandler: (evtType, handler) => this.formElement.removeEventListener(evtType, handler),
        };
    }
    getLabelAdapterMethods() {
        return {
            floatLabel: (shouldFloat) => this.labelElement &&
                this.labelElement.floatingLabelFoundation.float(shouldFloat),
            getLabelWidth: () => {
                return this.labelElement ?
                    this.labelElement.floatingLabelFoundation.getWidth() :
                    0;
            },
            hasLabel: () => Boolean(this.labelElement),
            shakeLabel: (shouldShake) => this.labelElement &&
                this.labelElement.floatingLabelFoundation.shake(shouldShake),
            setLabelRequired: (isRequired) => {
                if (this.labelElement) {
                    this.labelElement.floatingLabelFoundation.setRequired(isRequired);
                }
            },
        };
    }
    getLineRippleAdapterMethods() {
        return {
            activateLineRipple: () => {
                if (this.lineRippleElement) {
                    this.lineRippleElement.lineRippleFoundation.activate();
                }
            },
            deactivateLineRipple: () => {
                if (this.lineRippleElement) {
                    this.lineRippleElement.lineRippleFoundation.deactivate();
                }
            },
            setLineRippleTransformOrigin: (normalizedX) => {
                if (this.lineRippleElement) {
                    this.lineRippleElement.lineRippleFoundation.setRippleCenter(normalizedX);
                }
            },
        };
    }
    // tslint:disable:ban-ts-ignore
    async getUpdateComplete() {
        var _a;
        // @ts-ignore
        const result = await super.getUpdateComplete();
        await ((_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete);
        return result;
    }
    // tslint:enable:ban-ts-ignore
    firstUpdated() {
        var _a;
        super.firstUpdated();
        this.mdcFoundation.setValidateOnValueChange(this.autoValidate);
        if (this.validateOnInitialRender) {
            this.reportValidity();
        }
        // wait for the outline element to render to update the notch width
        (_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete.then(() => {
            var _a;
            // `foundation.notchOutline()` assumes the label isn't floating and
            // multiplies by a constant, but the label is already is floating at this
            // stage, therefore directly set the outline width to the label width
            this.outlineWidth =
                ((_a = this.labelElement) === null || _a === void 0 ? void 0 : _a.floatingLabelFoundation.getWidth()) || 0;
        });
    }
    getOutlineAdapterMethods() {
        return {
            closeOutline: () => this.outlineElement && (this.outlineOpen = false),
            hasOutline: () => Boolean(this.outlineElement),
            notchOutline: (labelWidth) => {
                const outlineElement = this.outlineElement;
                if (outlineElement && !this.outlineOpen) {
                    this.outlineWidth = labelWidth;
                    this.outlineOpen = true;
                }
            }
        };
    }
    async layout() {
        await this.updateComplete;
        const labelElement = this.labelElement;
        if (!labelElement) {
            this.outlineOpen = false;
            return;
        }
        const shouldFloat = !!this.label && !!this.value;
        labelElement.floatingLabelFoundation.float(shouldFloat);
        if (!this.outlined) {
            return;
        }
        this.outlineOpen = shouldFloat;
        await this.updateComplete;
        /* When the textfield automatically notches due to a value and label
         * being defined, the textfield may be set to `display: none` by the user.
         * this means that the notch is of size 0px. We provide this function so
         * that the user may manually resize the notch to the floated label's
         * width.
         */
        const labelWidth = labelElement.floatingLabelFoundation.getWidth();
        if (this.outlineOpen) {
            this.outlineWidth = labelWidth;
            await this.updateComplete;
        }
    }
}
__decorate([
    i$7('.mdc-text-field')
], TextFieldBase.prototype, "mdcRoot", void 0);
__decorate([
    i$7('input')
], TextFieldBase.prototype, "formElement", void 0);
__decorate([
    i$7('.mdc-floating-label')
], TextFieldBase.prototype, "labelElement", void 0);
__decorate([
    i$7('.mdc-line-ripple')
], TextFieldBase.prototype, "lineRippleElement", void 0);
__decorate([
    i$7('mwc-notched-outline')
], TextFieldBase.prototype, "outlineElement", void 0);
__decorate([
    i$7('.mdc-notched-outline__notch')
], TextFieldBase.prototype, "notchElement", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "value", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "type", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "placeholder", void 0);
__decorate([
    n$h({ type: String }),
    observer(function (_newVal, oldVal) {
        if (oldVal !== undefined && this.label !== oldVal) {
            this.layout();
        }
    })
], TextFieldBase.prototype, "label", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "icon", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "iconTrailing", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true })
], TextFieldBase.prototype, "disabled", void 0);
__decorate([
    n$h({ type: Boolean })
], TextFieldBase.prototype, "required", void 0);
__decorate([
    n$h({ type: Number })
], TextFieldBase.prototype, "minLength", void 0);
__decorate([
    n$h({ type: Number })
], TextFieldBase.prototype, "maxLength", void 0);
__decorate([
    n$h({ type: Boolean, reflect: true }),
    observer(function (_newVal, oldVal) {
        if (oldVal !== undefined && this.outlined !== oldVal) {
            this.layout();
        }
    })
], TextFieldBase.prototype, "outlined", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "helper", void 0);
__decorate([
    n$h({ type: Boolean })
], TextFieldBase.prototype, "validateOnInitialRender", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "validationMessage", void 0);
__decorate([
    n$h({ type: Boolean })
], TextFieldBase.prototype, "autoValidate", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "pattern", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "min", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "max", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "step", void 0);
__decorate([
    n$h({ type: Number })
], TextFieldBase.prototype, "size", void 0);
__decorate([
    n$h({ type: Boolean })
], TextFieldBase.prototype, "helperPersistent", void 0);
__decorate([
    n$h({ type: Boolean })
], TextFieldBase.prototype, "charCounter", void 0);
__decorate([
    n$h({ type: Boolean })
], TextFieldBase.prototype, "endAligned", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "prefix", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "suffix", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "name", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "inputMode", void 0);
__decorate([
    n$h({ type: Boolean })
], TextFieldBase.prototype, "readOnly", void 0);
__decorate([
    n$h({ type: String })
], TextFieldBase.prototype, "autocapitalize", void 0);
__decorate([
    t$4()
], TextFieldBase.prototype, "outlineOpen", void 0);
__decorate([
    t$4()
], TextFieldBase.prototype, "outlineWidth", void 0);
__decorate([
    t$4()
], TextFieldBase.prototype, "isUiValid", void 0);
__decorate([
    t$4()
], TextFieldBase.prototype, "focused", void 0);
__decorate([
    e$9({ passive: true })
], TextFieldBase.prototype, "handleInputChange", null);

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
const styles = i$6 `.mdc-floating-label{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);position:absolute;left:0;-webkit-transform-origin:left top;transform-origin:left top;line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform;transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1)}[dir=rtl] .mdc-floating-label,.mdc-floating-label[dir=rtl]{right:0;left:auto;-webkit-transform-origin:right top;transform-origin:right top;text-align:right}.mdc-floating-label--float-above{cursor:auto}.mdc-floating-label--required::after{margin-left:1px;margin-right:0px;content:"*"}[dir=rtl] .mdc-floating-label--required::after,.mdc-floating-label--required[dir=rtl]::after{margin-left:0;margin-right:1px}.mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-standard 250ms 1}@keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-106%) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-106%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}}.mdc-line-ripple::before,.mdc-line-ripple::after{position:absolute;bottom:0;left:0;width:100%;border-bottom-style:solid;content:""}.mdc-line-ripple::before{border-bottom-width:1px}.mdc-line-ripple::before{z-index:1}.mdc-line-ripple::after{transform:scaleX(0);border-bottom-width:2px;opacity:0;z-index:2}.mdc-line-ripple::after{transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-line-ripple--active::after{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating::after{opacity:0}.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / 0.75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{display:none}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-text-field--filled{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-text-field--filled .mdc-text-field__ripple::before,.mdc-text-field--filled .mdc-text-field__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-text-field--filled .mdc-text-field__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-text-field--filled .mdc-text-field__ripple::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-text-field--filled.mdc-ripple-upgraded--unbounded .mdc-text-field__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-text-field--filled.mdc-ripple-upgraded--foreground-activation .mdc-text-field__ripple::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-text-field--filled.mdc-ripple-upgraded--foreground-deactivation .mdc-text-field__ripple::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field--filled .mdc-text-field__ripple::before,.mdc-text-field--filled .mdc-text-field__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-text-field__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-text-field{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:0;border-bottom-left-radius:0;display:inline-flex;align-items:baseline;padding:0 16px;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{color:rgba(0, 0, 0, 0.87)}@media all{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:rgba(0, 0, 0, 0.54)}}@media all{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:rgba(0, 0, 0, 0.54)}}.mdc-text-field .mdc-text-field__input{caret-color:#6200ee;caret-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field-character-counter,.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--leading{color:rgba(0, 0, 0, 0.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:rgba(0, 0, 0, 0.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__affix--prefix{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__affix--suffix{color:rgba(0, 0, 0, 0.6)}.mdc-text-field .mdc-floating-label{top:50%;transform:translateY(-50%);pointer-events:none}.mdc-text-field__input{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);height:28px;transition:opacity 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1);width:100%;min-width:0;border:none;border-radius:0;background:none;appearance:none;padding:0}.mdc-text-field__input::-ms-clear{display:none}.mdc-text-field__input::-webkit-calendar-picker-indicator{display:none}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}@media all{.mdc-text-field__input::placeholder{transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}}@media all{.mdc-text-field__input:-ms-input-placeholder{transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}}@media all{.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}}@media all{.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}}.mdc-text-field__affix{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);height:28px;transition:opacity 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;white-space:nowrap}.mdc-text-field--label-floating .mdc-text-field__affix,.mdc-text-field--no-label .mdc-text-field__affix{opacity:1}@supports(-webkit-hyphens: none){.mdc-text-field--outlined .mdc-text-field__affix{align-items:center;align-self:center;display:inline-flex;height:100%}}.mdc-text-field__affix--prefix{padding-left:0;padding-right:2px}[dir=rtl] .mdc-text-field__affix--prefix,.mdc-text-field__affix--prefix[dir=rtl]{padding-left:2px;padding-right:0}.mdc-text-field--end-aligned .mdc-text-field__affix--prefix{padding-left:0;padding-right:12px}[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__affix--prefix,.mdc-text-field--end-aligned .mdc-text-field__affix--prefix[dir=rtl]{padding-left:12px;padding-right:0}.mdc-text-field__affix--suffix{padding-left:12px;padding-right:0}[dir=rtl] .mdc-text-field__affix--suffix,.mdc-text-field__affix--suffix[dir=rtl]{padding-left:0;padding-right:12px}.mdc-text-field--end-aligned .mdc-text-field__affix--suffix{padding-left:2px;padding-right:0}[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__affix--suffix,.mdc-text-field--end-aligned .mdc-text-field__affix--suffix[dir=rtl]{padding-left:0;padding-right:2px}.mdc-text-field--filled{height:56px}.mdc-text-field--filled .mdc-text-field__ripple::before,.mdc-text-field--filled .mdc-text-field__ripple::after{background-color:rgba(0, 0, 0, 0.87);background-color:var(--mdc-ripple-color, rgba(0, 0, 0, 0.87))}.mdc-text-field--filled:hover .mdc-text-field__ripple::before,.mdc-text-field--filled.mdc-ripple-surface--hover .mdc-text-field__ripple::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-text-field--filled.mdc-ripple-upgraded--background-focused .mdc-text-field__ripple::before,.mdc-text-field--filled:not(.mdc-ripple-upgraded):focus .mdc-text-field__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-text-field--filled::before{display:inline-block;width:0;height:40px;content:"";vertical-align:0}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:whitesmoke}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.42)}.mdc-text-field--filled:not(.mdc-text-field--disabled):hover .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.87)}.mdc-text-field--filled .mdc-line-ripple::after{border-bottom-color:#6200ee;border-bottom-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--filled .mdc-floating-label{left:16px;right:initial}[dir=rtl] .mdc-text-field--filled .mdc-floating-label,.mdc-text-field--filled .mdc-floating-label[dir=rtl]{left:initial;right:16px}.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{height:100%}.mdc-text-field--filled.mdc-text-field--no-label .mdc-floating-label{display:none}.mdc-text-field--filled.mdc-text-field--no-label::before{display:none}@supports(-webkit-hyphens: none){.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__affix{align-items:center;align-self:center;display:inline-flex;height:100%}}.mdc-text-field--outlined{height:56px;overflow:visible}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1)}.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined 250ms 1}@keyframes mdc-floating-label-shake-float-above-text-field-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}}.mdc-text-field--outlined .mdc-text-field__input{height:100%}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0, 0, 0, 0.38)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0, 0, 0, 0.87)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small, 4px)}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small, 4px);border-bottom-left-radius:0}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{width:max(12px, var(--mdc-shape-small, 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__notch{max-width:calc(100% - max(12px, var(--mdc-shape-small, 4px)) * 2)}}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small, 4px);border-bottom-left-radius:0}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small, 4px)}@supports(top: max(0%)){.mdc-text-field--outlined{padding-left:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined{padding-right:max(16px, var(--mdc-shape-small, 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined+.mdc-text-field-helper-line{padding-left:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined+.mdc-text-field-helper-line{padding-right:max(16px, var(--mdc-shape-small, 4px))}}.mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-left:0}@supports(top: max(0%)){.mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-right:max(16px, var(--mdc-shape-small, 4px))}}[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-leading-icon,.mdc-text-field--outlined.mdc-text-field--with-leading-icon[dir=rtl]{padding-right:0}@supports(top: max(0%)){[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-leading-icon,.mdc-text-field--outlined.mdc-text-field--with-leading-icon[dir=rtl]{padding-left:max(16px, var(--mdc-shape-small, 4px))}}.mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-right:0}@supports(top: max(0%)){.mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-left:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-trailing-icon,.mdc-text-field--outlined.mdc-text-field--with-trailing-icon[dir=rtl]{padding-left:0}@supports(top: max(0%)){[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-trailing-icon,.mdc-text-field--outlined.mdc-text-field--with-trailing-icon[dir=rtl]{padding-right:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}.mdc-text-field--outlined.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon{padding-left:0;padding-right:0}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--outlined .mdc-text-field__ripple::before,.mdc-text-field--outlined .mdc-text-field__ripple::after{background-color:transparent;background-color:var(--mdc-ripple-color, transparent)}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined .mdc-text-field__input{display:flex;border:none !important;background-color:transparent}.mdc-text-field--outlined .mdc-notched-outline{z-index:1}.mdc-text-field--textarea{flex-direction:column;align-items:center;width:auto;height:auto;padding:0;transition:none}.mdc-text-field--textarea .mdc-floating-label{top:19px}.mdc-text-field--textarea .mdc-floating-label:not(.mdc-floating-label--float-above){transform:none}.mdc-text-field--textarea .mdc-text-field__input{flex-grow:1;height:auto;min-height:1.5rem;overflow-x:hidden;overflow-y:auto;box-sizing:border-box;resize:none;padding:0 16px;line-height:1.5rem}.mdc-text-field--textarea.mdc-text-field--filled::before{display:none}.mdc-text-field--textarea.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-10.25px) scale(0.75)}.mdc-text-field--textarea.mdc-text-field--filled .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-textarea-filled 250ms 1}@keyframes mdc-floating-label-shake-float-above-textarea-filled{0%{transform:translateX(calc(0 - 0%)) translateY(-10.25px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-10.25px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-10.25px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-10.25px) scale(0.75)}}.mdc-text-field--textarea.mdc-text-field--filled .mdc-text-field__input{margin-top:23px;margin-bottom:9px}.mdc-text-field--textarea.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{margin-top:16px;margin-bottom:16px}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:0}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-27.25px) scale(1)}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--textarea.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-24.75px) scale(0.75)}.mdc-text-field--textarea.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-textarea-outlined 250ms 1}@keyframes mdc-floating-label-shake-float-above-textarea-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-24.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-24.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-24.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-24.75px) scale(0.75)}}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-text-field__input{margin-top:16px;margin-bottom:16px}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label{top:18px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field__input{margin-bottom:2px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter{align-self:flex-end;padding:0 16px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter::after{display:inline-block;width:0;height:16px;content:"";vertical-align:-16px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter::before{display:none}.mdc-text-field__resizer{align-self:stretch;display:inline-flex;flex-direction:column;flex-grow:1;max-height:100%;max-width:100%;min-height:56px;min-width:fit-content;min-width:-moz-available;min-width:-webkit-fill-available;overflow:hidden;resize:both}.mdc-text-field--filled .mdc-text-field__resizer{transform:translateY(-1px)}.mdc-text-field--filled .mdc-text-field__resizer .mdc-text-field__input,.mdc-text-field--filled .mdc-text-field__resizer .mdc-text-field-character-counter{transform:translateY(1px)}.mdc-text-field--outlined .mdc-text-field__resizer{transform:translateX(-1px) translateY(-1px)}[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer,.mdc-text-field--outlined .mdc-text-field__resizer[dir=rtl]{transform:translateX(1px) translateY(-1px)}.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input,.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter{transform:translateX(1px) translateY(1px)}[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input,[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter,.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input[dir=rtl],.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter[dir=rtl]{transform:translateX(-1px) translateY(1px)}.mdc-text-field--with-leading-icon{padding-left:0;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon,.mdc-text-field--with-leading-icon[dir=rtl]{padding-left:16px;padding-right:0}.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 48px);left:48px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label[dir=rtl]{left:initial;right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 64px / 0.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) translateX(-32px) scale(1)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-37.25px) translateX(32px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) translateX(-32px) scale(0.75)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-34.75px) translateX(32px) scale(0.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon{0%{transform:translateX(calc(0 - 32px)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 32px)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 32px)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 32px)) translateY(-34.75px) scale(0.75)}}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake,.mdc-text-field--with-leading-icon.mdc-text-field--outlined[dir=rtl] .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl{0%{transform:translateX(calc(0 - -32px)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - -32px)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - -32px)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - -32px)) translateY(-34.75px) scale(0.75)}}.mdc-text-field--with-trailing-icon{padding-left:16px;padding-right:0}[dir=rtl] .mdc-text-field--with-trailing-icon,.mdc-text-field--with-trailing-icon[dir=rtl]{padding-left:0;padding-right:16px}.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 64px)}.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 64px / 0.75)}.mdc-text-field--with-trailing-icon.mdc-text-field--outlined :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon{padding-left:0;padding-right:0}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 96px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 96px / 0.75)}.mdc-text-field-helper-line{display:flex;justify-content:space-between;box-sizing:border-box}.mdc-text-field+.mdc-text-field-helper-line{padding-right:16px;padding-left:16px}.mdc-form-field>.mdc-text-field+label{align-self:flex-start}.mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(98, 0, 238, 0.87)}.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--focused+.mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg){opacity:1}.mdc-text-field--focused.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-text-field--focused.mdc-text-field--outlined.mdc-text-field--textarea .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:0}.mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-floating-label{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid .mdc-text-field__input{caret-color:#b00020;caret-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{opacity:1}.mdc-text-field--disabled{pointer-events:none}.mdc-text-field--disabled .mdc-text-field__input{color:rgba(0, 0, 0, 0.38)}@media all{.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:rgba(0, 0, 0, 0.38)}}@media all{.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:rgba(0, 0, 0, 0.38)}}.mdc-text-field--disabled .mdc-floating-label{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field__icon--leading{color:rgba(0, 0, 0, 0.3)}.mdc-text-field--disabled .mdc-text-field__icon--trailing{color:rgba(0, 0, 0, 0.3)}.mdc-text-field--disabled .mdc-text-field__affix--prefix{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field__affix--suffix{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.06)}.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0, 0, 0, 0.06)}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-floating-label{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__icon--leading{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__icon--trailing{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__affix--prefix{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__affix--suffix{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:GrayText}}@media screen and (forced-colors: active){.mdc-text-field--disabled .mdc-text-field__input{background-color:Window}.mdc-text-field--disabled .mdc-floating-label{z-index:1}}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.mdc-text-field--disabled.mdc-text-field--filled{background-color:#fafafa}.mdc-text-field--disabled.mdc-text-field--filled .mdc-text-field__ripple{display:none}.mdc-text-field--disabled .mdc-text-field__input{pointer-events:auto}.mdc-text-field--end-aligned .mdc-text-field__input{text-align:right}[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__input,.mdc-text-field--end-aligned .mdc-text-field__input[dir=rtl]{text-align:left}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__input,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__input,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix{direction:ltr}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--prefix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--prefix{padding-left:0;padding-right:2px}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--suffix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--suffix{padding-left:12px;padding-right:0}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__icon--leading,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__icon--leading{order:1}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--suffix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--suffix{order:2}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__input,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__input{order:3}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--prefix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--prefix{order:4}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__icon--trailing,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__icon--trailing{order:5}[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__input,.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__input{text-align:right}[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__affix--prefix,.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__affix--prefix{padding-right:12px}[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__affix--suffix,.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__affix--suffix{padding-left:2px}.mdc-text-field-helper-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:0.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin:0;opacity:0;will-change:opacity;transition:opacity 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-text-field-helper-text::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}.mdc-text-field-helper-text--persistent{transition:none;opacity:1;will-change:initial}.mdc-text-field-character-counter{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:0.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin-left:auto;margin-right:0;padding-left:16px;padding-right:0;white-space:nowrap}.mdc-text-field-character-counter::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{padding-left:0;padding-right:16px}.mdc-text-field__icon{align-self:center;cursor:pointer}.mdc-text-field__icon:not([tabindex]),.mdc-text-field__icon[tabindex="-1"]{cursor:default;pointer-events:none}.mdc-text-field__icon svg{display:block}.mdc-text-field__icon--leading{margin-left:16px;margin-right:8px}[dir=rtl] .mdc-text-field__icon--leading,.mdc-text-field__icon--leading[dir=rtl]{margin-left:8px;margin-right:16px}.mdc-text-field__icon--trailing{padding:12px;margin-left:0px;margin-right:0px}[dir=rtl] .mdc-text-field__icon--trailing,.mdc-text-field__icon--trailing[dir=rtl]{margin-left:0px;margin-right:0px}.material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}:host{display:inline-flex;flex-direction:column;outline:none}.mdc-text-field{width:100%}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.42);border-bottom-color:var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42))}.mdc-text-field:not(.mdc-text-field--disabled):hover .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.87);border-bottom-color:var(--mdc-text-field-hover-line-color, rgba(0, 0, 0, 0.87))}.mdc-text-field.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.06);border-bottom-color:var(--mdc-text-field-disabled-line-color, rgba(0, 0, 0, 0.06))}.mdc-text-field.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field__input{direction:inherit}mwc-notched-outline{--mdc-notched-outline-border-color: var( --mdc-text-field-outlined-idle-border-color, rgba(0, 0, 0, 0.38) )}:host(:not([disabled]):hover) :not(.mdc-text-field--invalid):not(.mdc-text-field--focused) mwc-notched-outline{--mdc-notched-outline-border-color: var( --mdc-text-field-outlined-hover-border-color, rgba(0, 0, 0, 0.87) )}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-fill-color, whitesmoke)}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid mwc-notched-outline{--mdc-notched-outline-border-color: var( --mdc-text-field-error-color, var(--mdc-theme-error, #b00020) )}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-character-counter,:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid .mdc-text-field__icon{color:var(--mdc-text-field-error-color, var(--mdc-theme-error, #b00020))}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused mwc-notched-outline{--mdc-notched-outline-stroke-width: 2px}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) mwc-notched-outline{--mdc-notched-outline-border-color: var( --mdc-text-field-focused-label-color, var(--mdc-theme-primary, rgba(98, 0, 238, 0.87)) )}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-floating-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input{color:var(--mdc-text-field-ink-color, rgba(0, 0, 0, 0.87))}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg),:host(:not([disabled])) .mdc-text-field-helper-line:not(.mdc-text-field--invalid) .mdc-text-field-character-counter{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host([disabled]) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-disabled-fill-color, #fafafa)}:host([disabled]) .mdc-text-field.mdc-text-field--outlined mwc-notched-outline{--mdc-notched-outline-border-color: var( --mdc-text-field-outlined-disabled-border-color, rgba(0, 0, 0, 0.06) )}:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.38))}:host([disabled]) .mdc-text-field .mdc-text-field__input,:host([disabled]) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.38))}:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-helper-text,:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-character-counter{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.38))}`;

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
let TextField = class TextField extends TextFieldBase {
};
TextField.styles = [styles];
TextField = __decorate([
    e$b('mwc-textfield')
], TextField);

const zigPath = b `
  <line x1="1.5" y1="1.5" x2="1.5" y2="1.25" />
  <line transform="rotate(240 1.5 1.25)" x1="1.5" y1="1.5" x2="1.5" y2="1.25" />
`;
const zigZagPath = b `
<g>${zigPath}</g>
<g transform="rotate(120 1.5 1.5)">${zigPath}</g>
<g transform="rotate(240 1.5 1.5)">${zigPath}</g>
`;
const zigZag2WTransform = 'matrix(0.8, 0, 0, 0.8, 0.3, 0.3) translate(0 -0.1) rotate(-20 1.5 1.5)';
const equipmentPaths = {
    CAB: b `
  <path
    d="M 9.4,4.2 H 15.6 L 12.5,8.3 Z"
    fill="currentColor"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  <path
    d="m 12.5,8.3 v 9"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  <path
    d="m 9.4,21.3 h 6.2 l -3.1,-4.1 z"
    fill="currentColor"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  `,
    CAP: b `
  <path
    d="M 6.5,10.1 H 18.5"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  <path
    d="M 12.5,4 V 10.1"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  <path
    d="M 6.5,14.9 H 18.5"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  <path
    d="M 12.5,14.9 V 21"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  `,
    CBR: b `
  <line
    x1="12.5"
    y1="21"
    x2="4"
    y2="5"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <line
    x1="9.5"
    y1="1"
    x2="15.5"
    y2="7"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <line
    x1="9.5"
    y1="7"
    x2="15.5"
    y2="1"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `,
    CTR: b `
  <line
    x1="12.5"
    y1="4"
    x2="12.5"
    y2="21"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <circle
    cx="12.5"
    cy="12.5"
    r="7.5"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `,
    DIS: b `
  <path
    d="M 12.5 21 L 4 4"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <path
    d="M 8 4 L 17 4"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `,
    GEN: b `
  <path
    d="m 16.2,12.5 v 4.2 q -0.2,0.2 -0.6,0.6 -0.4,0.4 -1.1,0.7 -0.7,0.3 -1.8,0.3 -1.8,0 -2.9,-1.2 -1.1,-1.2 -1.1,-3.6 v -2.1 q 0,-2.4 1,-3.6 1,-1.1 2.9,-1.1 1.7,0 2.6,0.9 0.9,0.9 1,2.6 h -1.4 q -0.1,-1.1 -0.6,-1.6 -0.5,-0.6 -1.5,-0.6 -1.3,0 -1.8,0.9 -0.5,0.9 -0.5,2.6 v 2.1 q 0,1.8 0.7,2.7 0.7,0.9 1.9,0.9 1,0 1.4,-0.3 0.4,-0.3 0.6,-0.5 v -2.6 h -2.1 v -1.2 z"
    stroke="currentColor"
    fill="currentColor"
    stroke-width="0.3"
    stroke-linecap="round"
  />
  `,
    IFL: b `
  <polygon
    points="4,4 12.5,21 21,4"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linejoin="round"
    stroke-linecap="round"
  />
  `,
    LIN: b `
  <path
    d="M 12.5,4 V 21"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <path
    d="m 10.3,12.5 4.3,-2.5"
    fill="currentColor"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <path
    d="m 10.3,15 4.3,-2.5"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `,
    MOT: b `
  <path
    d="m 12.5,15.5 2.3,-7.8 h 1.4 v 9.6 h -1.1 v -3.7 l 0.1,-3.7 -2.3,7.4 h -0.9 L 9.8,9.8 9.9,13.6 v 3.7 H 8.8 V 7.7 h 1.4 z"
    stroke="currentColor"
    fill="currentColor"
    stroke-width="0.3"
    stroke-linecap="round"
  />
  `,
    REA: b `
  <path
    d="m 4.5,12.5 h 8 V 4"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <path
    d="m 4.5,12.5 a 8,8 0 0 1 8,-8 8,8 0 0 1 8,8 8,8 0 0 1 -8,8"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <path
    d="M 12.5,20.5 V 21"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `,
    RES: b `
  <rect
    y="4"
    x="8.5"
    height="17"
    width="8"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `,
    SAR: b `
  <path
    d="M 12.5,4 V 8"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
    />
  <path
    d="m 12.5,21 v 4"
    fill="none"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <line
    x1="10"
    y1="24.25"
    x2="15"
    y2="24.25"
    stroke="currentColor"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <path
    d="M 11.2,8 12.5,11 13.8,8 Z"
    fill="currentColor"
    stroke="currentColor"
    stroke-width="1"
    stroke-linecap="round"
  />
  <rect
    y="4"
    x="8.5"
    height="17"
    width="8"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `,
    SMC: b `
  <path
    d="m 16.6,12.5 c -0.7,1.4 -1.3,2.8 -2.1,2.8 -1.5,0 -2.6,-5.6 -4.1,-5.6 -0.7,0 -1.4,1.4 -2.1,2.8"
    stroke="currentColor"
    fill="none"
    stroke-width="1.2"
    stroke-linecap="round"
  />
  `,
    VTR: b `
  <circle
    cx="12.5"
    cy="9.5"
    r="5.25"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  <circle
    cx="12.5"
    cy="15.5"
    r="5.25"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
`,
};
const eqRingPath = b `
  <circle
    cx="12.5"
    cy="12.5"
    r="8.5"
    stroke="currentColor"
    fill="none"
    stroke-width="1.5"
    stroke-linecap="round"
  />
  `;
const defaultEquipmentPath = b `
  <circle
    cx="12.5"
    cy="12.5"
    r="11"
    stroke-width="1.5"
    stroke="currentColor"
    fill="none"
  />
  <path
    d=" M 7.5 17.5
    L 12 13
    Z"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linejoin="round"
    stroke-linecap="round"
  />
  <path
    d="	M 11 7
      L 10 8
      C 5 13, 11 20, 17 15
      L 18 14
      Z"
    fill="currentColor"
    stroke="currentColor"
    stroke-linejoin="round"
  />
  <path
    d=" M 13 9
    L 16 6
    Z"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linejoin="round"
    stroke-linecap="round"
  />
  <path
    d=" M 16 12
    L 19 9
    Z"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linejoin="round"
    stroke-linecap="round"
  />
`;
function equipmentPath(equipmentType) {
    if (equipmentType && isEqType(equipmentType))
        return equipmentPaths[equipmentType];
    return defaultEquipmentPath;
}
function equipmentSymbol(equipmentType) {
    return b `<symbol
    id="${equipmentType}"
    viewBox="0 0 25 25"
    width="1" height="1"
  >
    ${equipmentPath(equipmentType)}
  </symbol>`;
}
function iedSymbol() {
    return b `<symbol
    id="IED"
    viewBox="0 0 25 25"
    width="1" height="1"
  >
  <path
    fill="currentColor"
    d="M22 9V7h-2V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2h2v-2h-2v-2h2v-2h-2V9zm-4 10H4V5h14zM6 13h5v4H6zm6-6h4v3h-4zM6 7h5v5H6zm6 4h4v6h-4z"
  />
  </symbol>`;
}
const groundedMarker = b `<marker
  markerWidth="20" markerHeight="20"
  refX="12.5" refY="12.5"
  viewBox="0 0 25 25"
  id="grounded"
  orient="auto-start-reverse"
>
  <line
    y1="17"
    y2="8"
    x1="12.5"
    x2="12.5"
    stroke="currentColor"
    stroke-linecap="round"
    stroke-width="1.5"
  />
  <line
    y1="15.5"
    y2="9.5"
    x1="14.7"
    x2="14.7"
    stroke="currentColor"
    stroke-linecap="round"
    stroke-width="1.5"
  />
  <line
    y1="14.5"
    y2="10.5"
    x1="16.8"
    x2="16.8"
    stroke="currentColor"
    stroke-linecap="round"
    stroke-width="1.5"
  />
</marker>`;
const arrowMarker = b `
<marker
  id="arrow"
  viewBox="0 0 10 10"
  refX="5"
  refY="5"
  markerWidth="6"
  markerHeight="6"
  orient="auto-start-reverse">
  <path d="M 0 0 L 10 5 L 0 10 z" fill="currentColor" />
</marker>
`;
const symbols = b `
  <defs>
  <pattern id="halfgrid" patternUnits="userSpaceOnUse" width="1" height="1" viewBox="0 0 1 1">
  <circle cx="0.1" cy="0.25" r="0.035" fill="#888" opacity="0.3" />
  <circle cx="0.6" cy="0.25" r="0.035" fill="#888" opacity="0.3" />
  <circle cx="0.1" cy="0.75" r="0.035" fill="#888" opacity="0.3" />
  <circle cx="0.6" cy="0.75" r="0.035" fill="#888" opacity="0.3" />
  </pattern>
  <pattern id="grid" patternUnits="userSpaceOnUse" width="1" height="1" viewBox="0 0 1 1">
  <line x1="0" y1="0" x2="0" y2="1" stroke="#888" stroke-opacity="0.3" stroke-width="0.06" />
  <line x1="0" y1="0" x2="1" y2="0" stroke="#888" stroke-opacity="0.3" stroke-width="0.06" />
  <line x1="1" y1="0" x2="1" y2="1" stroke="#888" stroke-opacity="0.3" stroke-width="0.06" />
  <line x1="0" y1="1" x2="1" y2="1" stroke="#888" stroke-opacity="0.3" stroke-width="0.06" />
  </pattern>
  ${eqTypes.map(eqType => equipmentSymbol(eqType))}
  ${equipmentSymbol('ConductingEquipment')}
  ${iedSymbol()}
  ${groundedMarker}
  ${arrowMarker}
  </defs>
`;

function isBay(element) {
    return element.tagName === 'Bay' && !isBusBar(element);
}
function renderedPosition(element) {
    const { pos: [x, y], } = attributes(element);
    return [x, y];
}
function renderedLabelPosition(element) {
    const { label: [x, y], } = attributes(element);
    return [x, y];
}
function renderLabel(element, linkedEquipments) {
    const deg = 0;
    const text = element.getAttribute('name');
    const weight = 400;
    const color = 'black';
    const [x, y] = renderedLabelPosition(element);
    const fontSize = element.tagName === 'ConductingEquipment' || element.tagName === 'IED'
        ? 0.45
        : 0.6;
    const id = identity(element);
    const classes = e$1({
        label: true,
        container: (element.tagName === 'Bay' && !isBusBar(element)) ||
            element.tagName === 'VoltageLevel',
        ied: element.tagName === 'IED',
        equipment: element.tagName === 'ConductingEquipment',
        linked: linkedEquipments.includes(element),
    });
    return b `<g class="${classes}" id="label:${id}"
                 transform="rotate(${deg} ${x + 0.5} ${y - 0.5})">
        <text x="${x + 0.1}" y="${y - 0.5}"
          alignment-baseline="central"
          fill="${color}" font-weight="${weight}"
          font-size="${fontSize}px" font-family="Roboto, sans-serif"
          style="cursor: default;">
          ${text}
        </text>
      </g>`;
}
function windingMeasures(winding) {
    const transformer = winding.parentElement;
    const windings = Array.from(transformer.children).filter(c => c.tagName === 'TransformerWinding');
    const [x, y] = renderedPosition(transformer).map(c => c + 0.5);
    let center = [x, y];
    const size = 0.7;
    const grounded = {};
    const terminals = {};
    let arc;
    let zigZagTransform;
    const terminalElements = Array.from(winding.children).filter(c => c.tagName === 'Terminal');
    const terminal1 = terminalElements.find(t => t.getAttribute('name') === 'T1');
    const terminal2 = terminalElements.find(t => t.getAttribute('name') !== 'T1');
    const neutral = Array.from(winding.children).find(c => c.tagName === 'NeutralPoint');
    const windingIndex = windings.indexOf(winding);
    const { rot, kind, flip } = attributes(transformer);
    function shift(point, coord, amount) {
        const shifted = point.slice();
        if (coord === 0)
            shifted[rot % 2] += rot < 2 ? amount : -amount;
        else
            shifted[(rot + 1) % 2] += rot > 0 && rot < 3 ? -amount : amount;
        return shifted;
    }
    if (windings.length === 1) {
        if (kind === 'earthing') {
            zigZagTransform = '';
            const n1 = shift(center, 1, size);
            if (!neutral) {
                terminals.N1 = n1;
            }
            else if (neutral.getAttribute('cNodeName') === 'grounded') {
                const n1p = shift(n1, 1, 0.2);
                grounded.N1 = [n1p, n1];
            }
            if (!terminal1 && !terminal2) {
                terminals.T1 = shift(center, 1, -size);
            }
        }
        else {
            const sgn = flip ? -1 : 1;
            const n1 = shift(center, 0, -size);
            const n2 = shift(center, 0, size);
            const t1 = shift(center, 1, (-size - 0.5) * sgn);
            const t2 = shift(center, 1, size * sgn);
            if (!neutral) {
                terminals.N1 = n1;
                terminals.N2 = n2;
            }
            else if (neutral.getAttribute('cNodeName') === 'grounded') {
                if (neutral.getAttribute('name') === 'N1') {
                    const n1p = shift(n1, 0, -0.2);
                    grounded.N1 = [n1p, n1];
                }
                else {
                    const n2p = shift(n2, 0, 0.2);
                    grounded.N2 = [n2p, n2];
                }
            }
            arc = {
                from: n2,
                fromCtl: shift(n2, 1, -sgn),
                to: t1,
                toCtl: shift(shift(t1, 0, 0.2), 1, 0.1 * sgn),
            };
            if (!terminal1) {
                terminals.T1 = t1;
            }
            if (!terminal2) {
                terminals.T2 = t2;
            }
        }
    }
    else if (windings.length === 2) {
        if (windingIndex === 1) {
            center = shift(center, 1, 1);
        }
        if (kind === 'auto') {
            if (windingIndex === 1) {
                const n1 = shift(center, 0, -size);
                const n2 = shift(center, 0, size);
                if (!neutral) {
                    terminals.N1 = n1;
                    terminals.N2 = n2;
                }
                else if (neutral.getAttribute('cNodeName') === 'grounded') {
                    if (neutral.getAttribute('name') === 'N1') {
                        const n1p = shift(n1, 0, -0.2);
                        grounded.N1 = [n1p, n1];
                    }
                    else {
                        const n2p = shift(n2, 0, 0.2);
                        grounded.N2 = [n2p, n2];
                    }
                }
                if (!terminal1 && !terminal2) {
                    terminals.T1 = shift(center, 1, size);
                }
            }
            else {
                const sgn = flip ? -1 : 1;
                const t1 = shift(center, 0, size * sgn);
                const t2 = shift(center, 0, (-size - 0.5) * sgn);
                const n1 = shift(center, 1, -size);
                arc = {
                    from: n1,
                    fromCtl: shift(n1, 0, -sgn),
                    to: t2,
                    toCtl: shift(shift(t2, 1, -0.2), 0, 0.1 * sgn),
                };
                if (!terminal1)
                    terminals.T1 = t1;
                if (!terminal2)
                    terminals.T2 = t2;
                if (!neutral) {
                    terminals.N1 = n1;
                }
                else if (neutral.getAttribute('cNodeName') === 'grounded') {
                    const n1p = shift(n1, 1, -0.2);
                    grounded.N1 = [n1p, n1];
                }
            }
        }
        else if (kind === 'earthing') {
            if (windingIndex === 1) {
                if (!terminal1 && !terminal2) {
                    terminals.T1 = shift(center, 1, size);
                }
            }
            else {
                zigZagTransform = zigZag2WTransform;
                const sgn = flip ? -1 : 1;
                if (!terminal1 && !terminal2)
                    terminals.T1 = shift(center, 0, -size * sgn);
                const n1 = shift(center, 0, size * sgn);
                if (!neutral) {
                    terminals.N1 = n1;
                }
                else if (neutral.getAttribute('cNodeName') === 'grounded') {
                    const n1p = shift(n1, 0, 0.2 * sgn);
                    grounded.N1 = [n1p, n1];
                }
            }
        }
        else if (windingIndex === 1) {
            const n1 = shift(center, 0, -size);
            const n2 = shift(center, 0, +size);
            if (!neutral) {
                terminals.N1 = n1;
                terminals.N2 = n2;
            }
            else if (neutral.getAttribute('cNodeName') === 'grounded') {
                if (neutral.getAttribute('name') === 'N1') {
                    const n1p = shift(n1, 0, -0.2);
                    grounded.N1 = [n1p, n1];
                }
                else {
                    const n2p = shift(n2, 0, 0.2);
                    grounded.N2 = [n2p, n2];
                }
            }
            if (!terminal1 && !terminal2) {
                terminals.T1 = shift(center, 1, +size);
            }
        }
        else {
            const n1 = shift(center, 0, -size);
            const n2 = shift(center, 0, +size);
            if (!neutral) {
                terminals.N1 = n1;
                terminals.N2 = n2;
            }
            else if (neutral.getAttribute('cNodeName') === 'grounded') {
                if (neutral.getAttribute('name') === 'N1') {
                    const n1p = shift(n1, 0, -0.2);
                    grounded.N1 = [n1p, n1];
                }
                else {
                    const n2p = shift(n2, 0, 0.2);
                    grounded.N2 = [n2p, n2];
                }
            }
            if (!terminal1 && !terminal2) {
                terminals.T1 = shift(center, 1, -size);
            }
        }
    }
    else if (windings.length === 3) {
        if (windingIndex === 0) {
            if (!terminal1 && !terminal2) {
                terminals.T1 = shift(center, 1, -size);
            }
            const n1 = shift(center, 0, -size);
            const n2 = shift(center, 0, +size);
            if (!neutral) {
                terminals.N1 = n1;
                terminals.N2 = n2;
            }
            else if (neutral.getAttribute('cNodeName') === 'grounded') {
                if (neutral.getAttribute('name') === 'N1') {
                    const n1p = shift(n1, 0, -0.2);
                    grounded.N1 = [n1p, n1];
                }
                else {
                    const n2p = shift(n2, 0, 0.2);
                    grounded.N2 = [n2p, n2];
                }
            }
        }
        else if (windingIndex === 1) {
            center = shift(shift(center, 0, 0.5), 1, 1);
            if (!terminal1 && !terminal2) {
                terminals.T1 = shift(center, 0, size);
            }
            const n1 = shift(center, 1, size);
            if (!neutral) {
                terminals.N1 = n1;
            }
            else if (neutral.getAttribute('cNodeName') === 'grounded') {
                const n1p = shift(n1, 1, 0.2);
                grounded.N1 = [n1p, n1];
            }
        }
        else if (windingIndex === 2) {
            center = shift(shift(center, 0, -0.5), 1, 1);
            if (!terminal1 && !terminal2) {
                terminals.T1 = shift(center, 0, -size);
            }
            const n1 = shift(center, 1, size);
            if (!neutral) {
                terminals.N1 = n1;
            }
            else if (neutral.getAttribute('cNodeName') === 'grounded') {
                const n1p = shift(n1, 1, 0.2);
                grounded.N1 = [n1p, n1];
            }
        }
    }
    return { center, size, terminals, grounded, arc, zigZagTransform };
}
function renderTransformerWinding(winding) {
    const { size, center: [cx, cy], grounded, arc, zigZagTransform, } = windingMeasures(winding);
    const ports = [];
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Object.entries(grounded).forEach(([_, [[x1, y1], [x2, y2]]]) => {
        ports.push(b `<line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" stroke="black" stroke-width="0.06" marker-start="url(#grounded)" />`);
    });
    let longArrow = false;
    let arcPath = b ``;
    const { flip, rot } = attributes(winding.parentElement);
    if (arc) {
        const { from: [xf, yf], fromCtl: [xfc, yfc], to: [xt, yt], toCtl: [xtc, ytc], } = arc;
        if (!flip && yfc < yf)
            longArrow = true;
        if (flip && xfc > xf)
            longArrow = true;
        arcPath = b `<path d="M ${xf} ${yf} C ${xfc} ${yfc}, ${xtc} ${ytc}, ${xt} ${yt}" stroke="black" stroke-width="0.06" />`;
    }
    const tapChanger = winding.querySelector('TapChanger');
    const ltcArrow = tapChanger
        ? b `<line x1="${cx - 0.8}" y1="${cy + 0.8}" x2="${cx + 0.8}" y2="${cy - (longArrow ? 1 : 0.8)}"
              stroke="black" stroke-width="0.06" marker-end="url(#arrow)" />`
        : E$1;
    const zigZag = zigZagTransform === undefined
        ? E$1
        : b `<g stroke="black" stroke-linecap="round"
                transform="rotate(${rot * 90} ${cx} ${cy})
                translate(${cx - 1.5} ${cy - 1.5})
                ${zigZagTransform}">${zigZagPath}</g>`;
    return b `<g class="winding"><circle cx="${cx}" cy="${cy}" r="${size}" stroke="black" stroke-width="0.06" />${arcPath}${zigZag}${ltcArrow}${ports}</g>`;
}
function renderPowerTransformer(transformer) {
    const windings = Array.from(transformer.children).filter(c => c.tagName === 'TransformerWinding');
    return b `<g class="${e$1({ transformer: true })}"
        pointer-events="all" >
        ${windings.map(w => renderTransformerWinding(w))}
      </g>`;
}
function renderConnectivityNode(cNode) {
    const priv = cNode.querySelector(`Private[type="${privType}"]`);
    if (!priv)
        return E$1;
    const circles = [];
    const intersections = Object.entries(Array.from(priv.querySelectorAll('Vertex')).reduce((record, vertex) => {
        const ret = record;
        const key = JSON.stringify(renderedPosition(vertex));
        if (ret[key])
            ret[key].push(vertex);
        else
            ret[key] = [vertex];
        return ret;
    }, {}))
        .filter(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ([_, vertices]) => vertices.length > 2 ||
        (vertices.length === 2 &&
            vertices.find(v => v.hasAttributeNS(sldNs, 'uuid'))))
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        .map(([_, [vertex]]) => renderedPosition(vertex));
    intersections.forEach(([x, y]) => circles.push(b `<circle fill="black" cx="${x}" cy="${y}" r="0.15" />`));
    const lines = [];
    const sections = Array.from(priv.getElementsByTagNameNS(sldNs, 'Section'));
    const targetSize = 0.5;
    sections.forEach(section => {
        const busBar = xmlBoolean(section.getAttribute('bus'));
        const vertices = Array.from(section.getElementsByTagNameNS(sldNs, 'Vertex'));
        let i = 0;
        while (i < vertices.length - 1) {
            const [x1, y1] = renderedPosition(vertices[i]);
            const [x2, y2] = renderedPosition(vertices[i + 1]);
            lines.push(b `<line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}"
                stroke-width="${busBar ? 0.12 : E$1}" stroke="black" 
                stroke-linecap="${busBar ? 'round' : 'square'}" />`);
            lines.push(b `<line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" stroke-width="${targetSize}" />`);
            i += 1;
        }
    });
    const id = identity(cNode);
    return b `<g class="node" id="${id}" >
        <title>${cNode.getAttribute('pathName')}</title>
        ${circles}
        ${lines}
      </g>`;
}
function renderEquipment(equipment, linkedEquipments) {
    const [x, y] = renderedPosition(equipment);
    const { flip, rot } = attributes(equipment);
    const deg = 90 * rot;
    const eqType = equipment.getAttribute('type');
    const ringed = ringedEqTypes.has(eqType);
    const symbol = isEqType(eqType) ? eqType : 'ConductingEquipment';
    const icon = ringed
        ? b `<svg
    viewBox="0 0 25 25"
    width="1"
    height="1"
  >
    ${eqRingPath}
  </svg>`
        : b `<use href="#${symbol}" xlink:href="#${symbol}"
              pointer-events="none" />`;
    const terminals = Array.from(equipment.children).filter(c => c.tagName === 'Terminal');
    const topTerminal = terminals.find(t => t.getAttribute('name') === 'T1');
    const bottomTerminal = terminals.find(t => t.getAttribute('name') !== 'T1');
    const topGrounded = (topTerminal === null || topTerminal === void 0 ? void 0 : topTerminal.getAttribute('cNodeName')) === 'grounded'
        ? b `<line x1="0.5" y1="-0.1" x2="0.5" y2="0.16" stroke="black"
                stroke-width="0.06" marker-start="url(#grounded)" />`
        : E$1;
    const bottomGrounded = (bottomTerminal === null || bottomTerminal === void 0 ? void 0 : bottomTerminal.getAttribute('cNodeName')) === 'grounded'
        ? b `<line x1="0.5" y1="1.1" x2="0.5" y2="0.84" stroke="black"
                stroke-width="0.06" marker-start="url(#grounded)" />`
        : E$1;
    return b `<g class="${e$1({
        equipment: true,
        linked: linkedEquipments.includes(equipment),
    })}"
    id="${identity(equipment)}"
    transform="translate(${x} ${y}) rotate(${deg} 0.5 0.5)${flip ? ' scale(-1,1) translate(-1 0)' : ''}">
      <title>${equipment.getAttribute('name')}</title>
      ${icon}
      ${ringed
        ? b `<use transform="rotate(${-deg} 0.5 0.5)" pointer-events="none"
                  href="#${symbol}" xlink:href="#${symbol}" />`
        : E$1}
      <rect width="1" height="1" fill="none" />
      ${topGrounded}
      ${bottomGrounded}
    </g>`;
}
function renderContainer(bayOrVL, selectedElements) {
    const isVL = bayOrVL.tagName === 'VoltageLevel';
    const [x, y] = renderedPosition(bayOrVL);
    const { dim: [w, h], } = attributes(bayOrVL);
    return b `<g id="${identity(bayOrVL)}" class=${e$1({
        voltagelevel: isVL,
        bay: !isVL,
    })} tabindex="0" style="outline: none;">
      <rect x="${x}" y="${y}" width="${w}" height="${h}" fill="white" stroke-dasharray="${isVL ? E$1 : '0.18'}"
        stroke="${isVL ? '#2aa198' : '#6c71c4'}" />
      ${Array.from(bayOrVL.children)
        .filter(isBay)
        .map(bay => renderContainer(bay, selectedElements))}
      ${Array.from(bayOrVL.children)
        .filter(child => child.tagName === 'ConductingEquipment')
        .map(equipment => renderEquipment(equipment, selectedElements))}
      ${Array.from(bayOrVL.children)
        .filter(child => child.tagName === 'PowerTransformer')
        .map(equipment => renderPowerTransformer(equipment))}
      </g>`;
}
function sldSvg(substation, options) {
    const nested = !options.gridSize;
    const { dim: [w, h], } = attributes(substation);
    return x$1 ` <svg
    xmlns="${svgNs}"
    xmlns:xlink="${xlinkNs}"
    ${nested ? E$1 : `viewBox = '0 0 ${w} ${h}'`}
    ${nested ? E$1 : `width="${w * options.gridSize}"`}
    ${nested ? E$1 : `height="${h * options.gridSize}"`}
    id="sld"
    stroke-width="0.06"
    fill="none"
  >
    <style>
      @font-face {
        font-family: 'Roboto';
        font-style: normal;
        font-weight: 400;
        src: url(${robotoDataURL}) format('woff');
      }
    </style>
    ${symbols}
    <rect width="100%" height="100%" fill="white" />
    ${Array.from(substation.children)
        .filter(child => child.tagName === 'VoltageLevel')
        .map(vl => b `${renderContainer(vl, options.linkedEquipments)}`)}
    ${Array.from(substation.querySelectorAll('ConnectivityNode'))
        .filter(node => node.getAttribute('name') !== 'grounded' &&
        !isBusBar(node.parentElement))
        .map(cNode => renderConnectivityNode(cNode))}
    ${Array.from(substation.querySelectorAll('ConnectivityNode'))
        .filter(node => node.getAttribute('name') !== 'grounded' &&
        isBusBar(node.parentElement))
        .map(cNode => renderConnectivityNode(cNode))}
    ${Array.from(substation.querySelectorAll(':scope > PowerTransformer')).map(transformer => renderPowerTransformer(transformer))}
    ${Array.from(substation.querySelectorAll('VoltageLevel, Bay, ConductingEquipment, PowerTransformer, Line')).map(element => renderLabel(element, options.linkedEquipments))}
  </svg>`;
}

const serviceColoring = {
    ReportControl: '#859900',
    GSEControl: '#268bd2',
    SampledValueControl: '#cb4b16',
};
function tooltip(conn) {
    const cbName = conn.source.controlBlock.getAttribute('name');
    const sourceIed = conn.source.ied.getAttribute('name');
    const targetIed = conn.target.ied.getAttribute('name');
    const data = conn.target.inputs
        .filter(input => isSubscribed(input))
        .map(input => {
        const fcdaInfo = inputReference(input);
        const extRefInfo = inputSupportingText(input);
        return `${fcdaInfo.fcdaRef} ${fcdaInfo.desc ? `(${fcdaInfo.desc})` : ''} --> ${extRefInfo.extRefRef} ${extRefInfo.desc ? `(${extRefInfo.desc})` : ''}`;
    });
    return `${sourceIed}:${cbName} -> ${targetIed}
   
\t${data.join('\n\t')}`;
}
function connDimensions(conn) {
    const { pos: [sx, sy], } = attributes(conn.source.iedName);
    const { pos: [tx, ty], } = attributes(conn.target.iedName);
    return { sx, sy, tx, ty };
}
function connDirection(conn) {
    const { sx, sy, tx, ty } = connDimensions(conn);
    if (sx !== tx && sy === ty)
        return { sDir: 'n', tDir: 'n' };
    if (sx === tx && sy > ty + 1)
        return { sDir: 'n', tDir: 's' };
    if (sx === tx && sy < ty - 1)
        return { sDir: 's', tDir: 'n' };
    if (sx === tx && sy === ty + 1)
        return { sDir: 'w', tDir: 'w' };
    if (sx === tx && sy === ty - 1)
        return { sDir: 'w', tDir: 'w' };
    if (sx < tx && sy === ty + 1)
        return { sDir: 'n', tDir: 'w' };
    if (sx > tx && sy === ty + 1)
        return { sDir: 'n', tDir: 'e' };
    if (sx < tx && sy === ty - 1)
        return { sDir: 's', tDir: 'w' };
    if (sx > tx && sy === ty - 1)
        return { sDir: 's', tDir: 'e' };
    if (sx === tx - 1 && sy > ty)
        return { sDir: 'n', tDir: 's' };
    if (sx === tx - 1 && sy < ty)
        return { sDir: 's', tDir: 'n' };
    if (sx === tx + 1 && sy > ty)
        return { sDir: 'n', tDir: 's' };
    if (sx === tx + 1 && sy < ty)
        return { sDir: 's', tDir: 'n' };
    if (sx < tx - 1 && sy > ty + 1)
        return { sDir: 'n', tDir: 's' };
    if (sx < tx - 1 && sy < ty - 1)
        return { sDir: 's', tDir: 'n' };
    if (sx > tx + 1 && sy > ty + 1)
        return { sDir: 'n', tDir: 's' };
    // if (sx > tx + 1 && sy < ty - 1)
    return { sDir: 's', tDir: 'n' };
}
function adjust(conn, faceCount) {
    const { sDir, tDir } = connDirection(conn);
    const sourceid = `${identity(conn.source.ied)}`;
    const targetid = `${identity(conn.target.ied)}`;
    let sI = 1;
    let sT = 1;
    if (faceCount[sourceid] && faceCount[sourceid][sDir]) {
        sI = faceCount[sourceid][sDir].index;
        // eslint-disable-next-line no-param-reassign
        faceCount[sourceid][sDir].index += 1;
        sT = faceCount[sourceid][sDir].total;
    }
    let tI = 1;
    let tT = 1;
    if (faceCount[targetid] && faceCount[targetid][tDir]) {
        tI = faceCount[targetid][tDir].index;
        // eslint-disable-next-line no-param-reassign
        faceCount[targetid][tDir].index += 1;
        tT = faceCount[targetid][tDir].total;
    }
    const sAdj = (2 * sI - 1) / (sT * 2);
    const tAdj = (2 * tI - 1) / (tT * 2);
    return { sAdj, tAdj };
}
function arrow(conn, tx, ty) {
    const { tDir } = connDirection(conn);
    if (tDir === 'n')
        return `M${tx},${ty}L${tx - 0.08},${ty - 0.16}L${tx + 0.08},${ty - 0.16}Z`;
    if (tDir === 's')
        return `M${tx},${ty}L${tx - 0.08},${ty + 0.16}L${tx + 0.08},${ty + 0.16}Z`;
    if (tDir === 'e')
        return `M${tx},${ty}L${tx + 0.16},${ty + 0.08}L${tx + 0.16},${ty - 0.08}Z`;
    return `M${tx},${ty}L${tx - 0.16},${ty + 0.08}L${tx - 0.16},${ty - 0.08}Z`;
}
function svgPath(conn, faceCount) {
    let r = 0.15;
    const { sx, sy, tx, ty } = connDimensions(conn);
    const { sAdj, tAdj } = adjust(conn, faceCount);
    if (sx !== tx && sy === ty) {
        if (sx > tx)
            return [
                `M${sx + sAdj},${sy}L${sx + sAdj},${sy - 0.5 + r}A${r},${r} 0 0 0 ${sx + sAdj - r},${sy - 0.5}L${tx + tAdj + r},${ty - 0.5}A${r},${r} 0 0 0 ${tx + tAdj},${ty - 0.5 + r}L${tx + tAdj},${ty}`,
                arrow(conn, tx + tAdj, ty),
            ];
        return [
            `M${sx + sAdj},${sy}L${sx + sAdj},${sy - 0.5 + r}A${r},${r} 0 0 1 ${sx + sAdj + r},${sy - 0.5}L${tx + tAdj - r},${ty - 0.5}A${r},${r} 0 0 1 ${tx + tAdj},${ty - 0.5 + r}L${tx + tAdj},${ty}`,
            arrow(conn, tx + tAdj, ty),
        ];
    }
    if (sx === tx && sy > ty + 1) {
        if (sAdj === tAdj)
            return [
                `M${sx + sAdj},${sy}L${tx + tAdj},${ty + 1}`,
                arrow(conn, tx + tAdj, ty + 1),
            ];
        if (Math.abs(sAdj - tAdj) <= r * 2)
            r = Math.abs(sAdj - tAdj) / 2;
        if (sAdj < tAdj)
            return [
                `M${sx + sAdj},${sy}L${sx + sAdj},${sy - (sy - ty - 1) / 2 + r}A${r},${r} 0 0 1 ${sx + sAdj + r},${sy - (sy - ty - 1) / 2}L${tx + tAdj - r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 0 ${tx + tAdj},${sy - (sy - ty - 1) / 2 - r}L${tx + tAdj},${ty + 1}`,
                arrow(conn, tx + tAdj, ty + 1),
            ];
        return [
            `M${sx + sAdj},${sy}L${sx + sAdj},${sy - (sy - ty - 1) / 2 + r}A${r},${r} 0 0 0 ${sx + sAdj - r},${sy - (sy - ty - 1) / 2}L${tx + tAdj + r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 1 ${tx + tAdj},${sy - (sy - ty - 1) / 2 - r}L${tx + tAdj},${ty + 1}`,
            arrow(conn, tx + tAdj, ty + 1),
        ];
    }
    if (sx === tx && sy < ty - 1) {
        if (sAdj === tAdj)
            return [
                `M${sx + sAdj},${sy + 1}L${tx + tAdj},${ty}`,
                arrow(conn, tx + tAdj, ty),
            ];
        if (Math.abs(sAdj - tAdj) <= r * 2)
            r = Math.abs(sAdj - tAdj) / 2;
        if (sAdj < tAdj)
            return [
                `M${sx + sAdj},${sy + 1}L${sx + sAdj},${sy - (sy - ty - 1) / 2 - r}A${r},${r} 0 0 0 ${sx + sAdj + r},${sy - (sy - ty - 1) / 2}L${tx + tAdj - r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 1 ${tx + tAdj},${sy - (sy - ty - 1) / 2 + r}L${tx + tAdj},${ty}`,
                arrow(conn, tx + tAdj, ty),
            ];
        return [
            `M${sx + sAdj},${sy + 1}L${sx + sAdj},${sy - (sy - ty - 1) / 2 - r}A${r},${r} 0 0 1 ${sx + sAdj - r},${sy - (sy - ty - 1) / 2}L${tx + tAdj + r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 0 ${tx + tAdj},${sy - (sy - ty - 1) / 2 + r}L${tx + tAdj},${ty}`,
            arrow(conn, tx + tAdj, ty),
        ];
    }
    if (sx === tx && sy === ty - 1)
        return [
            `M${sx},${sy + sAdj}L${sx - 0.5 + r},${sy + sAdj}A${r},${r} 0 0 0 ${sx - 0.5},${sy + sAdj + r}L${tx - 0.5},${ty + tAdj - r}A${r},${r} 0 0 0 ${tx - 0.5 + r},${ty + tAdj}L${tx},${ty + tAdj}`,
            arrow(conn, tx, ty + tAdj),
        ];
    if (sx === tx && sy === ty + 1)
        return [
            `M${sx},${sy + sAdj}L${sx - 0.5 + r},${sy + sAdj}A${r},${r} 0 0 1 ${sx - 0.5},${sy + sAdj - r}L${tx - 0.5},${ty + tAdj + r}A${r},${r} 0 0 1 ${sx - 0.5 + r},${ty + tAdj}L${tx},${ty + tAdj}`,
            arrow(conn, tx, ty + tAdj),
        ];
    if (sx < tx && sy === ty + 1)
        return [
            `M${sx + sAdj},${sy}L${sx + sAdj},${sy - (1 - tAdj) + r}A${r},${r} 0 0 1 ${sx + sAdj + r},${ty + tAdj}L${tx},${ty + tAdj}`,
            arrow(conn, tx, ty + tAdj),
        ];
    if (sx > tx && sy === ty + 1)
        return [
            `M${sx + sAdj},${sy}L${sx + sAdj},${sy - (1 - tAdj) + r}A${r},${r} 0 0 0 ${sx + sAdj - r},${ty + tAdj}L${tx + 1},${ty + tAdj}`,
            arrow(conn, tx + 1, ty + tAdj),
        ];
    if (sx < tx && sy === ty - 1)
        return [
            `M${sx + sAdj},${sy + 1}L${sx + sAdj},${ty + tAdj - r}A${r},${r} 0 0 0 ${sx + sAdj + r},${ty + tAdj}L${tx},${ty + tAdj}`,
            arrow(conn, tx, ty + tAdj),
        ];
    if (sx > tx && sy === ty - 1)
        return [
            `M${sx + sAdj},${sy + 1}L${sx + sAdj},${ty + tAdj - r}A${r},${r} 0 0 1 ${sx + sAdj - r},${ty + tAdj}L${tx + 1},${ty + tAdj}`,
            arrow(conn, tx + 1, ty + tAdj),
        ];
    if (sx === tx - 1 && sy > ty)
        return [
            `M${sx + sAdj},${sy}L${sx + sAdj},${sy - (sy - ty - 1) / 2 + r}A${r},${r} 0 0 1 ${sx + sAdj + r},${sy - (sy - ty - 1) / 2}L${tx + tAdj - r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 0 ${tx + tAdj},${sy - (sy - ty - 1) / 2 - r}L${tx + tAdj},${ty + 1}`,
            arrow(conn, tx + tAdj, ty + 1),
        ];
    if (sx === tx - 1 && sy < ty)
        return [
            `M${sx + sAdj},${sy + 1}L${sx + sAdj},${sy - (sy - ty - 1) / 2 - r}A${r},${r} 0 0 0 ${sx + sAdj + r},${sy - (sy - ty - 1) / 2}L${tx + tAdj - r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 1 ${tx + tAdj},${sy - (sy - ty - 1) / 2 + r}L${tx + tAdj},${ty}`,
            arrow(conn, tx + tAdj, ty),
        ];
    if (sx === tx + 1 && sy > ty)
        return [
            `M${sx + sAdj},${sy}L${sx + sAdj},${sy - (sy - ty - 1) / 2 + r}A${r},${r} 0 0 0 ${sx + sAdj - r},${sy - (sy - ty - 1) / 2}L
      ${tx + tAdj + r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 1 ${tx + tAdj},${sy - (sy - ty - 1) / 2 - r}L${tx + tAdj},${ty + 1}`,
            arrow(conn, tx + tAdj, ty + 1),
        ];
    if (sx === tx + 1 && sy < ty)
        return [
            `M${sx + sAdj},${sy + 1.0}L${sx + sAdj},${sy - (sy - ty - 1) / 2 - r}A${r},${r} 0 0 1 ${sx + sAdj - r},${sy - (sy - ty - 1) / 2}L${tx + tAdj + r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 0 ${tx + tAdj},${sy - (sy - ty - 1) / 2 + r}L${tx + tAdj},${ty}`,
            arrow(conn, tx + tAdj, ty),
        ];
    if (sx < tx - 1 && sy > ty + 1)
        return [
            `M
      ${sx + sAdj},${sy}L
      ${sx + sAdj},${sy - (sy - ty - 1) / 2 + r}A${r},${r} 0 0 1 ${sx + sAdj + r},${sy - (sy - ty - 1) / 2}L
      ${tx + tAdj - r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 0 ${tx + tAdj},${sy - (sy - ty - 1) / 2 - r}L
      ${tx + tAdj},${ty + 1}`,
            arrow(conn, tx + tAdj, ty + 1),
        ];
    if (sx < tx - 1 && sy < ty - 1)
        return [
            `M${sx + sAdj},${sy + 1}L${sx + sAdj},${sy - (sy - ty - 1) / 2 - r}A${r},${r} 0 0 0 ${sx + sAdj + r},${sy - (sy - ty - 1) / 2}L${tx + tAdj - r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 1 ${tx + tAdj},${sy - (sy - ty - 1) / 2 + r}L${tx + tAdj},${ty}`,
            arrow(conn, tx + tAdj, ty),
        ];
    if (sx > tx + 1 && sy > ty + 1)
        return [
            `M${sx + sAdj},${sy}L${sx + sAdj},${sy - (sy - ty - 1) / 2 + r}A${r},${r} 0 0 0 ${sx + sAdj - r},${sy - (sy - ty - 1) / 2}L${tx + tAdj + r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 1 ${tx + tAdj},${sy - (sy - ty - 1) / 2 - r}L${tx + tAdj},${ty + 1}`,
            arrow(conn, tx + tAdj, ty + 1),
        ];
    // if (sx > tx + 1 && sy < ty - 1)
    return [
        `M${sx + sAdj},${sy + 1}L${sx + sAdj},${sy - (sy - ty - 1) / 2 - r}A${r},${r} 0 0 1 ${sx + sAdj - r},${sy - (sy - ty - 1) / 2}L${tx + tAdj + r},${sy - (sy - ty - 1) / 2}A${r},${r} 0 0 0 ${tx + tAdj},${sy - (sy - ty - 1) / 2 + r}L${tx + tAdj},${ty}`,
        arrow(conn, tx + tAdj, ty),
    ];
}
function svgConnectionGenerator(substation, conns) {
    const { dim: [w, h], } = attributes(substation);
    const faceCount = {};
    conns.forEach(conn => {
        const { sDir, tDir } = connDirection(conn);
        const sourceid = `${identity(conn.source.ied)}`;
        const targetid = `${identity(conn.target.ied)}`;
        if (!faceCount[sourceid])
            faceCount[sourceid] = {
                n: { index: 1, total: 0 },
                s: { index: 1, total: 0 },
                e: { index: 1, total: 0 },
                w: { index: 1, total: 0 },
            };
        faceCount[sourceid][sDir].total += 1;
        if (!faceCount[targetid])
            faceCount[targetid] = {
                n: { index: 1, total: 0 },
                s: { index: 1, total: 0 },
                e: { index: 1, total: 0 },
                w: { index: 1, total: 0 },
            };
        faceCount[targetid][tDir].total += 1;
    });
    return (conn) => {
        const [linkPath, arrowPath] = svgPath(conn, faceCount);
        const event = new CustomEvent('select-connection', {
            bubbles: true,
            composed: true,
            detail: conn,
        });
        const color = serviceColoring[conn.source.controlBlock.tagName];
        return b `<svg class="connection ${conn.source.controlBlock.tagName}"
          width="${w}"
          height="${h}">
          <path d="${linkPath}" stroke="${color}" stroke-width="0.08" @click="${(evt) => { var _a; return (_a = evt.target) === null || _a === void 0 ? void 0 : _a.dispatchEvent(event); }}"><title>${tooltip(conn)}</title></path>
          <path d="${arrowPath}" stroke="${color}" fill="${color}" stroke-width="0.08"/>
          </svg>`;
    };
}

class CommunicationMappingEditor extends ScopedElementsMixin(r$6) {
    get ieds() {
        return Array.from(this.substation.ownerDocument.getElementsByTagNameNS(sldNs, 'IEDName'))
            .map(iedName => {
            var _a;
            const ied = this.substation.ownerDocument.querySelector(`:scope > IED[name="${(_a = iedName.getAttributeNS(sldNs, 'name')) !== null && _a !== void 0 ? _a : 'Unknown IED'}"]`);
            return {
                element: iedName,
                ied,
                name: iedName.getAttribute('name'),
            };
        })
            .filter((iedName) => iedName.ied !== null);
    }
    get idle() {
        return !(this.placing || this.placingLabel);
    }
    svgCoordinates(clientX, clientY) {
        const p = new DOMPoint(clientX, clientY);
        const { x, y } = p.matrixTransform(this.sld.getScreenCTM().inverse());
        return [x, y].map(coord => Math.max(0, coord));
    }
    connectedCallback() {
        // eslint-disable-next-line wc/guard-super-call
        super.connectedCallback();
        window.addEventListener('keydown', this.handleKeydown);
    }
    disconnectedCallback() {
        // eslint-disable-next-line wc/guard-super-call
        super.disconnectedCallback();
        window.removeEventListener('keydown', this.handleKeydown);
    }
    reset() {
        this.placing = undefined;
        this.placingLabel = undefined;
    }
    placeLabel(element, x, y) {
        this.dispatchEvent(newEditEvent({
            element,
            attributes: {
                [`${sldPrefix}:lx`]: { namespaceURI: sldNs, value: x.toString() },
                [`${sldPrefix}:ly`]: { namespaceURI: sldNs, value: y.toString() },
            },
        }));
        this.reset();
    }
    startPlacingLabel(element, offset = [0, 0]) {
        this.reset();
        this.placingLabel = element;
        this.placingOffset = offset;
    }
    placeElement(element, x, y) {
        var _a;
        const edits = [];
        const oldParent = element.parentElement;
        const newParent = Array.from(this.substation.querySelectorAll(':scope > VoltageLevel > Bay'))
            .concat(Array.from(this.substation.querySelectorAll(':scope > VoltageLevel')))
            .find(vlOrBay => containsRect(vlOrBay, x, y, 1, 1)) || this.substation;
        if (element.parentElement !== newParent) {
            edits.push(...reparentElement(element, newParent));
        }
        const { pos: [oldX, oldY], label: [oldLX, oldLY], } = attributes(element);
        const dx = x - oldX;
        const dy = y - oldY;
        const lx = oldLX;
        const ly = oldLY;
        edits.push({
            element,
            attributes: {
                x: { namespaceURI: sldNs, value: x.toString() },
                y: { namespaceURI: sldNs, value: y.toString() },
                lx: { namespaceURI: sldNs, value: (lx + dx).toString() },
                ly: { namespaceURI: sldNs, value: (ly + dy).toString() },
            },
        });
        this.dispatchEvent(newEditEvent(edits));
        // wrap IEDName elements within Private element if required
        const enclosingEdits = [];
        if (element.localName === 'IEDName' &&
            element.namespaceURI === sldNs &&
            element.parentElement &&
            ((_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.tagName) !== 'Private') {
            let privateElement = element.parentElement.querySelector(':scope > Private[type="OpenSCD-Linked-IEDs"]');
            if (!privateElement) {
                privateElement = this.substation.ownerDocument.createElementNS(this.substation.ownerDocument.documentElement.namespaceURI, 'Private');
                privateElement.setAttribute('type', 'OpenSCD-Linked-IEDs');
            }
            privateElement.appendChild(element.cloneNode());
            enclosingEdits.push({
                parent: element.parentElement,
                node: privateElement,
                reference: getReference(element.parentElement, 'Private'),
            }, {
                node: element,
            });
        }
        // remove empty Private element if required
        if (element.localName === 'IEDName' &&
            (oldParent === null || oldParent === void 0 ? void 0 : oldParent.tagName) === 'Private' &&
            (oldParent === null || oldParent === void 0 ? void 0 : oldParent.getAttribute('type')) === 'OpenSCD-Linked-IEDs' &&
            oldParent.childElementCount === 0) {
            // TODO: In next API release, dispatch with "squash" to support undo/redo more cleanly
            enclosingEdits.push({ node: oldParent });
        }
        if (enclosingEdits.length)
            this.dispatchEvent(newEditEvent(enclosingEdits));
        this.reset();
    }
    startPlacing(element, offset = [0, 0]) {
        this.reset();
        this.placing = element;
        this.placingOffset = offset;
    }
    onWheelZoom(evt) {
        if (evt.ctrlKey) {
            evt.preventDefault();
            if ((evt.deltaY < 0 && this.gridSize >= 10) ||
                (evt.deltaY > 0 && this.gridSize <= 200)) {
                const d = evt.deltaY < 0 ? -1 : 1;
                const f = (this.gridSize + d) / this.gridSize;
                const xs = this.container.scrollLeft;
                const xa = evt.offsetX;
                const dx = (f - 1) * (xs + xa);
                const ys = this.container.scrollTop;
                const ya = evt.offsetY - 57;
                const dy = (f - 1) * (ys + ya);
                this.container.scrollBy(dx, dy);
                this.gridSize += d;
            }
        }
    }
    clearFilter() {
        this.sourceIEDFilter = '';
        this.targetIEDFilter = '';
        this.cbNameFilter = '';
    }
    activeFilter() {
        return (this.sourceIEDFilter !== '' ||
            this.targetIEDFilter !== '' ||
            this.cbNameFilter !== '');
    }
    filterCbName(conn) {
        if (this.cbNameFilter === '')
            return false;
        const terms = this.cbNameFilter.split(' ');
        const iedName = conn.source.controlBlock.getAttribute('name');
        return !terms.some(term => iedName.includes(term));
    }
    filterTargetIED(conn) {
        if (this.targetIEDFilter === '')
            return false;
        const terms = this.targetIEDFilter.split(' ');
        const iedName = conn.target.ied.getAttribute('name');
        return !terms.some(term => iedName.includes(term));
    }
    filterSourceIED(conn) {
        if (this.sourceIEDFilter === '')
            return false;
        const terms = this.sourceIEDFilter.split(' ');
        const iedName = conn.source.ied.getAttribute('name');
        return !terms.some(term => iedName.includes(term));
    }
    filterConnections(conn) {
        const service = (conn.source.controlBlock.tagName === 'ReportControl' &&
            this.filterReport) ||
            (conn.source.controlBlock.tagName === 'GSEControl' && this.filterGOOSE) ||
            (conn.source.controlBlock.tagName === 'SampledValueControl' &&
                this.filterSMV);
        const ied = !!this.selectedIed &&
            conn.source.iedName !== this.selectedIed &&
            conn.target.iedName !== this.selectedIed;
        const source = this.filterSourceIED(conn);
        const target = this.filterTargetIED(conn);
        const cbName = this.filterCbName(conn);
        const receive = this.filterRcv && conn.source.iedName === this.selectedIed;
        const send = this.filterSend && conn.target.iedName === this.selectedIed;
        return !(service || ied || source || target || cbName || receive || send);
    }
    resetIedSelection() {
        this.selectedIed = undefined;
        this.linkedEquipments = [];
    }
    selectIED(ied) {
        if (this.selectedIed !== ied.element) {
            this.selectedIed = ied.element;
            const iedName = this.selectedIed.getAttributeNS(sldNs, 'name');
            this.linkedEquipments = Array.from(this.selectedIed.ownerDocument.querySelectorAll(`ConductingEquipment LNode[iedName="${iedName}"]`)).map(lNode => lNode.closest('ConductingEquipment'));
        }
        else
            this.resetIedSelection();
    }
    constructor() {
        super();
        this.connections = [];
        this.filterReport = false;
        this.filterGOOSE = false;
        this.filterSMV = false;
        this.filterRcv = false;
        this.filterSend = false;
        this.sourceIEDFilter = '';
        this.targetIEDFilter = '';
        this.cbNameFilter = '';
        this.showFilterBox = false;
        this.editMode = false;
        this.showLabel = true;
        this.placingOffset = [0, 0];
        this.mouseX = 0;
        this.mouseY = 0;
        this.mouseX2 = 0;
        this.mouseY2 = 0;
        this.linkedEquipments = [];
        this.handleKeydown = ({ key }) => {
            if (key === 'Escape')
                this.reset();
        };
        this.addEventListener('wheel', this.onWheelZoom);
    }
    renderedLabelPosition(element) {
        var _a;
        let { label: [x, y], } = attributes(element);
        const [offsetX, offsetY] = this.placingOffset;
        if (this.placing &&
            element.closest(this.placing.localName) === this.placing &&
            ((_a = element.closest(this.placing.localName)) === null || _a === void 0 ? void 0 : _a.namespaceURI) ===
                this.placing.namespaceURI) {
            const { pos: [parentX, parentY], } = attributes(this.placing);
            x += this.mouseX - parentX - offsetX;
            y += this.mouseY - parentY - offsetY;
        }
        if (this.placingLabel === element) {
            x = this.mouseX2 - 0.5 - offsetX;
            y = this.mouseY2 + 0.5 - offsetY;
        }
        return [x, y];
    }
    renderLabel(ied) {
        const deg = 0;
        const text = ied.element.getAttributeNS(sldNs, 'name');
        const weight = 400;
        const color = 'black';
        const [x, y] = this.renderedLabelPosition(ied.element);
        const fontSize = 0.45;
        let events = 'none';
        let handleClick = E$1;
        if (this.idle && this.editMode) {
            events = 'all';
            const offset = [this.mouseX2 - x - 0.5, this.mouseY2 - y + 0.5];
            handleClick = () => this.startPlacingLabel(ied.element, offset);
        }
        const id = identity(ied.ied);
        const classes = e$1({
            label: true,
            ied: true,
        });
        return b `<g class="${classes}" id="label:${id}"
                 transform="rotate(${deg} ${x + 0.5} ${y - 0.5})">
        <text x="${x + 0.1}" y="${y - 0.5}"
          alignment-baseline="central"
          @click=${handleClick}
          pointer-events="${events}" fill="${color}" font-weight="${weight}"
          font-size="${fontSize}px" font-family="Roboto, sans-serif"
          style="cursor: default;">
          ${text}
        </text>
      </g>`;
    }
    renderedPosition(element) {
        let { pos: [x, y], } = attributes(element);
        const nearestPlacingElement = this.placing
            ? element.closest(this.placing.localName)
            : null;
        if (this.placing &&
            nearestPlacingElement === this.placing &&
            (nearestPlacingElement === null || nearestPlacingElement === void 0 ? void 0 : nearestPlacingElement.namespaceURI) === this.placing.namespaceURI) {
            const { pos: [parentX, parentY], } = attributes(this.placing);
            const [offsetX, offsetY] = this.placingOffset;
            x += this.mouseX - parentX - offsetX;
            y += this.mouseY - parentY - offsetY;
        }
        return [x, y];
    }
    renderIED(ied) {
        const [x, y] = this.renderedPosition(ied.element);
        const symbol = 'IED';
        const icon = b `<use href="#${symbol}" xlink:href="#${symbol}"
                pointer-events="none" />`;
        let handleClick = E$1;
        if (this.idle && this.editMode)
            handleClick = () => this.startPlacing(ied.element);
        else if (!this.editMode)
            handleClick = () => {
                this.selectIED(ied);
            };
        return b `<svg
    xmlns="${svgNs}"
    xmlns:xlink="${xlinkNs}"
    id="${identity(ied.ied)}"
    x="${x}"
    y="${y}"
    width="${1 * this.gridSize}"
    height="${1 * this.gridSize}"
    stroke-width="0.06"
    fill="none">
    <g class="ied"
      id="#${ied.name}"
      transform="translate(${0} ${0})">
        <title>${ied.name}</title>
        ${icon}
        <rect width="1" height="1" fill="none" pointer-events="all"
        @click=${handleClick}
        />
      </g></svg>`;
    }
    // eslint-disable-next-line class-methods-use-this
    renderFilterBox() {
        if (!this.showFilterBox)
            return x$1 ``;
        return x$1 `<div class="filter box" style="">
      <h3 class="filter title">
        Filter connections
        <nav style="float: right;">
          <mwc-icon-button
            icon="close"
            @click="${() => {
            this.showFilterBox = false;
        }}"
          ></mwc-icon-button>
        </nav>
      </h3>
      <mwc-textfield
        label="Source IED name"
        value="${this.sourceIEDFilter}"
        @input="${(evt) => {
            this.sourceIEDFilter = evt.target.value;
        }}"
      ></mwc-textfield>
      <mwc-textfield
        label="Target IED name"
        value="${this.targetIEDFilter}"
        @input="${(evt) => {
            this.targetIEDFilter = evt.target.value;
        }}"
      ></mwc-textfield>
      <mwc-textfield
        label="Control Block name"
        value="${this.cbNameFilter}"
        @input="${(evt) => {
            this.cbNameFilter = evt.target.value;
        }}"
      ></mwc-textfield>
    </div>`;
    }
    renderFilterFab() {
        return x$1 `<nav class="filter button">
      ${this.activeFilter()
            ? x$1 `<mwc-fab
            class="filter refresh"
            style="padding-right: 10px;"
            extended
            icon="refresh"
            label="Clear"
            @click="${() => {
                this.clearFilter();
            }}"
          ></mwc-fab>`
            : E$1}<mwc-fab
        icon="filter_alt"
        @click="${() => {
            this.showFilterBox = true;
        }}"
      ></mwc-fab>
    </nav>`;
    }
    renderService(controlBlock) {
        return [
            x$1 `<svg viewBox="0 0 25 25" width="25" height="25">
        <path
          d="M0,12.5L25,12.5"
          stroke-width="3"
          stroke="${serviceColoring[controlBlock]}"
        />
      </svg>`,
            x$1 `<div class="serviceFilter">
        <input
          type="checkbox"
          id="serviceFilter"
          name="serviceFilter"
          checked
          @click="${(evt) => {
                if (controlBlock === 'ReportControl')
                    this.filterReport = !evt.target.checked;
                if (controlBlock === 'GSEControl')
                    this.filterGOOSE = !evt.target.checked;
                if (controlBlock === 'SampledValueControl')
                    this.filterSMV = !evt.target.checked;
            }}"
        />
        <label for="serviceFilter">${controlBlock}</label>
      </div>`,
        ];
    }
    renderInfoBox() {
        const controlBlocks = [
            'ReportControl',
            'GSEControl',
            'SampledValueControl',
        ];
        return x$1 `<div class="info-box">
      ${controlBlocks.map(controlBlock => this.renderService(controlBlock))}
      ${this.selectedIed && !this.editMode
            ? x$1 `<svg viewBox="0 0 25 25" width="25" height="25">
              <path d="M0,12.5L22,12.5" stroke-width="3" stroke="black" />
              <path d="M25,12.5L12.5,18L12.5,7Z" stroke-width="1" />
            </svg>
            <input
              type="checkbox"
              checked
              @click="${(evt) => {
                this.filterRcv = !evt.target.checked;
            }}"
            />
            <svg viewBox="0 0 25 25" width="25" height="25">
              <path d="M3,12.5L25,12.5" stroke-width="3" stroke="black" />
              <path d="M0,12.5L12.5,18L12.5,7Z" stroke-width="1" />
            </svg>
            <input
              type="checkbox"
              checked
              @click="${(evt) => {
                this.filterSend = !evt.target.checked;
            }}"
            />`
            : E$1}
      <mwc-icon-button-toggle
        ?on=${this.editMode}
        onIcon="edit"
        offIcon="edit_off"
        @click="${(evt) => {
            this.editMode = evt.target.on;
            this.resetIedSelection();
        }}"
      ></mwc-icon-button-toggle>
      <mwc-icon-button
        class="zoom"
        icon="zoom_in"
        title="Zoom in"
        @click="${() => {
            this.gridSize += 4;
        }}"
      >
      </mwc-icon-button>
      <mwc-icon-button
        class="zoom"
        icon="zoom_out"
        title="Zoom out"
        @click="${() => {
            this.gridSize -= 4;
        }}"
      >
      </mwc-icon-button>
      <mwc-icon-button-toggle
        ?on=${this.showLabel}
        onIcon="font_download"
        offIcon="font_download_off"
        @click="${(evt) => {
            this.showLabel = evt.target.on;
        }}"
      ></mwc-icon-button-toggle>
    </div>`;
    }
    render() {
        var _a;
        const { dim: [w, h], } = attributes(this.substation);
        const placingLabelTarget = this.placingLabel
            ? b `<rect width="100%" height="100%" fill="url(#halfgrid)"
      @click=${() => {
                const element = this.placingLabel;
                const [x, y] = this.renderedLabelPosition(element);
                this.placeLabel(element, x, y);
            }} />`
            : E$1;
        const iedPlacingTarget = ((_a = this.placing) === null || _a === void 0 ? void 0 : _a.localName) === 'IEDName'
            ? b `<rect width="100%" height="100%" fill="url(#grid)" 
        @click=${() => {
                const element = this.placing;
                const [x, y] = this.renderedPosition(element);
                this.placeElement(element, x, y);
            }} />`
            : E$1;
        const filteredConnections = this.connections.filter(conn => this.filterConnections(conn));
        const svgConnection = svgConnectionGenerator(this.substation, filteredConnections);
        return x$1 ` ${this.renderInfoBox()}
      <div id="container">
        <style>
          ${this.showLabel
            ? E$1
            : `.label:not(.ied):not(.linked) {display: none} `}
        </style>
        <svg
          xmlns="${svgNs}"
          xmlns:xlink="${xlinkNs}"
          viewBox="0 0 ${w} ${h}"
          width="${w * this.gridSize}"
          height="${h * this.gridSize}"
          id="sldContainer"
          stroke-width="0.06"
          fill="none"
          @mousemove=${(e) => {
            const [x, y] = this.svgCoordinates(e.clientX, e.clientY);
            this.mouseX = Math.floor(x);
            this.mouseY = Math.floor(y);
            this.mouseX2 = Math.round(x * 2) / 2;
            this.mouseY2 = Math.round(y * 2) / 2;
        }}
        >
          ${sldSvg(this.substation, {
            gridSize: this.gridSize,
            linkedEquipments: this.linkedEquipments,
        })}
          ${this.ieds.map(iedName => this.renderIED(iedName))}
          ${this.ieds.map(iedName => this.renderLabel(iedName))}
          ${placingLabelTarget} ${iedPlacingTarget}
          ${filteredConnections.map(link => svgConnection(link))}
        </svg>
      </div>
      ${this.renderFilterFab()} ${this.renderFilterBox()}`;
    }
}
CommunicationMappingEditor.scopedElements = {
    'mwc-fab': customElements.get('mwc-fab'),
    'mwc-textfield': customElements.get('mwc-textfield'),
    'mwc-button': customElements.get('mwc-button'),
    'mwc-icon-button': customElements.get('mwc-icon-button'),
    'mwc-icon-button-toggle': customElements.get('mwc-icon-button-toggle'),
};
CommunicationMappingEditor.styles = i$c `
    #container {
      width: 100%;
      height: 80vh;
      overflow: scroll;
      background-color: white;
    }

    g.equipment:not(.linked) {
      opacity: 0.2;
    }

    g.node {
      opacity: 0.2;
    }

    g.transformer {
      opacity: 0.2;
    }

    g.label:not(.ied):not(.linked) {
      opacity: 0.2;
    }

    svg.connection:hover > path {
      stroke: black;
      stroke-width: 0.12;
    }

    .info-box {
      display: flex;
      align-items: center;
    }

    .info-box > svg {
      padding-left: 15px;
    }

    .info-box > .serviceFilter > label {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 400;
    }

    .filter.box > mwc-textfield {
      padding: 10px;
    }

    .filter.box {
      width: 250px;
      height: 280px;
      position: fixed;
      bottom: 5px;
      right: 5px;
      border: 2px solid var(--oscd-theme-base01);
      background-color: var(--oscd-theme-base3);
      border-radius: 5px;
    }

    .filter.title {
      color: var(--oscd-theme-base01);
      font-family: var(--oscd-theme-text-font, 'Roboto');
      font-weight: 300;
      overflow: clip visible;
      white-space: nowrap;
      text-overflow: ellipsis;
      margin: 0px;
      line-height: 52px;
      padding-left: 0.3em;
    }

    .filter.button {
      position: fixed;
      bottom: 15px;
      right: 15px;
    }

    .linked > rect {
      fill: black;
      opacity: 0.1;
    }
  `;
__decorate([
    n$j({ attribute: false })
], CommunicationMappingEditor.prototype, "substation", void 0);
__decorate([
    n$j({ type: Number })
], CommunicationMappingEditor.prototype, "gridSize", void 0);
__decorate([
    n$j({ attribute: false })
], CommunicationMappingEditor.prototype, "connections", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "ieds", null);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "filterReport", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "filterGOOSE", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "filterSMV", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "selectedIed", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "filterRcv", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "filterSend", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "sourceIEDFilter", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "targetIEDFilter", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "cbNameFilter", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "showFilterBox", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "editMode", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "showLabel", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "placing", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "placingLabel", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "placingOffset", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "mouseX", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "mouseY", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "mouseX2", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "mouseY2", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "linkedEquipments", void 0);
__decorate([
    r$4()
], CommunicationMappingEditor.prototype, "idle", null);
__decorate([
    e$d('svg#sldContainer')
], CommunicationMappingEditor.prototype, "sld", void 0);
__decorate([
    e$d('#container')
], CommunicationMappingEditor.prototype, "container", void 0);

const gseControlPath = b `<path fill="currentColor" d="M11,7H15V9H11V15H13V11H15V15A2,2 0 0,1 13,17H11A2,2 0 0,1 9,15V9A2,2 0 0,1 11,7M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4Z" />`;
const logControlPath = b `<path fill="currentColor" d="M9,7H11V15H15V17H9V7M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4Z" />`;
const reportControlPath = b `<path fill="currentColor" d="M9,7H13A2,2 0 0,1 15,9V11C15,11.84 14.5,12.55 13.76,12.85L15,17H13L11.8,13H11V17H9V7M11,9V11H13V9H11M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12C4,16.41 7.58,20 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4Z" />`;
const sampledValueControlPath = b `<path fill="currentColor" d="M11,7H15V9H11V11H13A2,2 0 0,1 15,13V15A2,2 0 0,1 13,17H9V15H13V13H11A2,2 0 0,1 9,11V9A2,2 0 0,1 11,7M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4Z" />`;
function iconFromPath(path) {
    return b `<svg
      viewBox="0 0 25 25"
      width="18"
      height="18"
    >
      ${path}
    </svg>`;
}

const icons = {
    LogControl: iconFromPath(logControlPath),
    ReportControl: iconFromPath(reportControlPath),
    SampledValueControl: iconFromPath(sampledValueControlPath),
    GSEControl: iconFromPath(gseControlPath),
};
function combineSelectors(...selectors) {
    return selectors
        .reduce((a, b) => a.flatMap(d => b.map(e => [d, e].flat())), [[]])
        .map(str => str.join(''))
        .join(',');
}
function clientLnConnections(doc) {
    const controlBlockSelector = combineSelectors([':root > IED > AccessPoint > Server > LDevice'], ['>'], ['LN0', 'LN'], ['>'], ['ReportControl']);
    const iedToNameElement = new Map();
    Array.from(doc.getElementsByTagNameNS(sldNs, 'IEDName')).forEach(iedName => iedToNameElement.set(iedName.getAttributeNS(sldNs, 'name'), iedName));
    return Array.from(doc.querySelectorAll(controlBlockSelector))
        .flatMap(sourceCb => {
        const sourceIed = sourceCb.closest('IED');
        const sourceIedName = iedToNameElement.get(sourceIed.getAttribute('name'));
        const sortedClientLns = {};
        sourceCb
            .querySelectorAll(':scope > RptEnabled > ClientLN')
            .forEach(clientLn => {
            const iedName = clientLn.getAttribute('iedName');
            const targetIed = doc.querySelector(`:root > IED[name="${iedName}"`);
            const targetIedName = iedToNameElement.get(iedName);
            if (!targetIed || !targetIedName || !iedName)
                return;
            if (sortedClientLns[iedName])
                sortedClientLns[iedName].inputs.push(clientLn);
            else
                sortedClientLns[iedName] = {
                    ied: targetIed,
                    iedName: targetIedName,
                    inputs: [clientLn],
                };
        });
        return Object.values(sortedClientLns).map(target => {
            const id = `${identity(sourceCb)}${identity(target.ied)}`;
            return {
                id,
                source: {
                    ied: sourceIed,
                    iedName: sourceIedName,
                    controlBlock: sourceCb,
                },
                target,
            };
        });
    })
        .filter((conn) => conn.source.iedName !== undefined);
}
function parseExtRefs(doc) {
    const iedToNameElement = new Map();
    Array.from(doc.getElementsByTagNameNS(sldNs, 'IEDName')).forEach(iedName => iedToNameElement.set(iedName.getAttributeNS(sldNs, 'name'), iedName));
    const controlBlockSelector = combineSelectors([':root > IED > AccessPoint > Server > LDevice'], ['>'], ['LN0'], ['>'], ['GSEControl', 'SampledValueControl']);
    return Array.from(doc.querySelectorAll(controlBlockSelector))
        .flatMap(controlBlock => {
        const sourceIed = controlBlock.closest('IED');
        const iedName = sourceIed.getAttribute('name');
        const sourceIedName = iedToNameElement.get(iedName);
        const ldInst = controlBlock.closest('LDevice').getAttribute('inst');
        const anyLn = controlBlock.closest('LN,LN0');
        const prefix = anyLn.getAttribute('prefix');
        const lnClass = anyLn.getAttribute('lnClass');
        const lnInst = anyLn.getAttribute('inst');
        const cbName = controlBlock.getAttribute('name');
        const extRefSelector = combineSelectors([':root > IED > AccessPoint > Server > LDevice'], ['>'], ['LN0', 'LN'], ['>'], [
            `Inputs > ExtRef[iedName="${iedName}"][srcLNClass="${lnClass}"][srcCBName="${cbName}"]`,
        ]);
        const targetMap = {};
        Array.from(doc.querySelectorAll(extRefSelector))
            .filter(extRef => {
            const [extRefLdInst, srcLDInst, srcPrefix, srcLNInst] = [
                'ldInst',
                'srcLDInst',
                'srcPrefix',
                'srcLNInst',
            ].map(attr => extRef.getAttribute(attr));
            return ((srcLDInst ? srcLDInst === ldInst : extRefLdInst === srcLDInst) &&
                (srcPrefix !== null && srcPrefix !== void 0 ? srcPrefix : '') === (prefix !== null && prefix !== void 0 ? prefix : '') &&
                (srcLNInst !== null && srcLNInst !== void 0 ? srcLNInst : '') === (lnInst !== null && lnInst !== void 0 ? lnInst : ''));
        })
            .forEach(extRef => {
            const target = extRef.closest('IED');
            const targetName = target.getAttribute('name');
            const targetIedName = iedToNameElement.get(targetName);
            if (targetName && targetMap[targetName])
                targetMap[targetName].inputs.push(extRef);
            else if (targetIedName)
                targetMap[targetName] = {
                    ied: target,
                    iedName: targetIedName,
                    inputs: [extRef],
                };
        });
        return Object.values(targetMap).map(target => {
            const id = `${identity(controlBlock)}${target.ied}`;
            return {
                id,
                source: { ied: sourceIed, iedName: sourceIedName, controlBlock },
                target,
            };
        });
    })
        .filter((conn) => conn.source.iedName !== null && conn.source.iedName !== null);
}
function connectionHeading(conn) {
    const sourceIedName = conn.source.ied.getAttribute('name');
    const cbName = conn.source.controlBlock.getAttribute('name');
    const targetIedName = conn.target.ied.getAttribute('name');
    return `${sourceIedName}:${cbName} ⮕ ${targetIedName}`;
}
class SldCommunicationEditor extends ScopedElementsMixin(r$6) {
    constructor() {
        super(...arguments);
        this.gridSize = 32;
        this.editCount = -1;
    }
    get substation() {
        var _a, _b;
        return (_b = (_a = this.doc) === null || _a === void 0 ? void 0 : _a.querySelector(':root > Substation')) !== null && _b !== void 0 ? _b : null;
    }
    removeInputs(inputs) {
        const removeClientLNs = inputs
            .filter(input => input.tagName === 'ClientLN')
            .map(clientLn => ({ node: clientLn }));
        const removeExtRefs = unsubscribe(inputs.filter(input => input.tagName === 'ExtRef'));
        const edits = [...removeClientLNs, ...removeExtRefs];
        if (edits.length > 0)
            this.dispatchEvent(newEditEvent(edits));
    }
    removeAllInputs() {
        var _a, _b;
        const inputs = (_b = (_a = this.selectedConnection) === null || _a === void 0 ? void 0 : _a.target.inputs) !== null && _b !== void 0 ? _b : [];
        this.removeInputs(inputs);
        this.requestUpdate();
    }
    // eslint-disable-next-line class-methods-use-this
    getCommunicationDetails(connection) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!((_a = connection === null || connection === void 0 ? void 0 : connection.source) === null || _a === void 0 ? void 0 : _a.controlBlock))
            return x$1 `<p>No connection selected</p>`;
        const cb = connection.source.controlBlock;
        const comm = controlBlockGseOrSmv(cb);
        const vlan = (_b = comm === null || comm === void 0 ? void 0 : comm.querySelector('Address > P[type="VLAN-ID"]')) === null || _b === void 0 ? void 0 : _b.textContent;
        const vlanPriority = (_c = comm === null || comm === void 0 ? void 0 : comm.querySelector('Address > P[type="VLAN-PRIORITY"]')) === null || _c === void 0 ? void 0 : _c.textContent;
        const appID = (_d = comm === null || comm === void 0 ? void 0 : comm.querySelector('Address > P[type="APPID"]')) === null || _d === void 0 ? void 0 : _d.textContent;
        const macAddress = (_e = comm === null || comm === void 0 ? void 0 : comm.querySelector('Address > P[type="MAC-Address"]')) === null || _e === void 0 ? void 0 : _e.textContent;
        const minTime = (_f = comm === null || comm === void 0 ? void 0 : comm.querySelector('MinTime')) === null || _f === void 0 ? void 0 : _f.textContent;
        const maxTime = (_g = comm === null || comm === void 0 ? void 0 : comm.querySelector('MaxTime')) === null || _g === void 0 ? void 0 : _g.textContent;
        const dataSet = cb.getAttribute('datSet');
        const confRev = cb.getAttribute('confRev');
        const smvID = cb.getAttribute('smvID');
        return x$1 `<table id="comDetails">
      <tbody>
        ${smvID
            ? x$1 `<tr>
              <td>SMV ID</td>
              <td>${smvID}</td>
            </tr>`
            : null}
        ${dataSet
            ? x$1 `<tr>
              <td>Data Set</td>
              <td>${dataSet}</td>
            </tr>`
            : null}
        ${confRev
            ? x$1 `<tr>
              <td>Configuration Revision</td>
              <td>${confRev}</td>
            </tr>`
            : null}
        ${vlan
            ? x$1 `<tr>
              <td>VLAN ID</td>
              <td>0x${vlan} (${parseInt(vlan, 16).toString()})</td>
            </tr>`
            : null}
        ${vlanPriority
            ? x$1 `<tr>
              <td>VLAN Priority</td>
              <td>${vlanPriority}</td>
            </tr>`
            : null}
        ${appID
            ? x$1 `<tr>
              <td>Application ID</td>
              <td>${appID}</td>
            </tr>`
            : null}
        ${macAddress
            ? x$1 `<tr>
              <td>MAC Address</td>
              <td>${macAddress}</td>
            </tr>`
            : null}
        ${minTime
            ? x$1 `<tr>
              <td>Minimum Time</td>
              <td>${minTime}</td>
            </tr>`
            : null}
        ${maxTime
            ? x$1 `<tr>
              <td>Maximum Time</td>
              <td>${maxTime}</td>
            </tr>`
            : null}
      </tbody>
    </table>`;
    }
    renderSubscription() {
        var _a, _b, _c, _d, _e;
        const heading = this.selectedConnection
            ? connectionHeading(this.selectedConnection)
            : 'No connection selected';
        const fcdaItems = [];
        const extRefItems = [];
        (_a = this.selectedConnection) === null || _a === void 0 ? void 0 : _a.target.inputs.filter(input => isSubscribed(input)).forEach(input => {
            const fcdaInfo = inputReference(input);
            const extRefInfo = inputSupportingText(input);
            fcdaItems.push({
                headline: fcdaInfo.fcdaRef,
                supportingText: fcdaInfo.desc,
                endingIcon: 'arrow_forward',
            });
            extRefItems.push({
                headline: extRefInfo.extRefRef,
                supportingText: extRefInfo.desc,
            });
        });
        let supervisionId = null;
        let supervisionDesc = null;
        if (this.selectedConnection) {
            const { controlBlock } = this.selectedConnection.source;
            const { ied } = this.selectedConnection.target;
            const supervision = getExistingSupervision(controlBlock, ied);
            if (supervision) {
                const supervisionType = controlBlock.tagName === 'GSEControl' ? 'LGOS' : 'LSVS';
                const refSelector = supervisionType === 'LGOS'
                    ? 'DOI[name="GoCBRef"]'
                    : 'DOI[name="SvCBRef"]';
                supervisionDesc =
                    (_d = (_b = supervision === null || supervision === void 0 ? void 0 : supervision.getAttribute('desc')) !== null && _b !== void 0 ? _b : (_c = supervision
                        .querySelector(`:scope > ${refSelector}`)) === null || _c === void 0 ? void 0 : _c.getAttribute('desc')) !== null && _d !== void 0 ? _d : null;
                identity(supervision);
                supervisionId = `${identity(supervision)}`.substring(ied.getAttribute('name').length + 2);
            }
        }
        const content = x$1 `<div slot="content">
      ${supervisionId
            ? x$1 `<p id="supervisionInfo">
            <md-icon id="supIcon">monitor_heart</md-icon>Supervision:
            ${supervisionId}${supervisionDesc
                ? x$1 ` (${supervisionDesc})`
                : ''}
          </p>`
            : null}
      <details>
        <summary>Message Information</summary>
        ${this.getCommunicationDetails(this.selectedConnection)}
      </details>
      <div id="lists">
        <action-list
          class="vertical-list"
          .items=${fcdaItems}
          height="72"
        ></action-list>
        <action-list
          class="vertical-list"
          .items=${extRefItems}
          height="72"
        ></action-list>
      </div>
    </div>`;
        const cbType = (_e = this.selectedConnection) === null || _e === void 0 ? void 0 : _e.source.controlBlock.tagName;
        return x$1 `<md-dialog id="mappingDetails">
      <div slot="headline">
        <md-icon>${cbType ? icons[cbType] : ''}</md-icon
        >${heading}
      </div>
      ${content}
      <div slot="actions">
        <md-text-button
          class="warning"
          @click=${() => {
            this.removeAllInputs();
            this.mappingDetails.close();
        }}
          >Remove All<md-icon class="warning" slot="icon"
            >delete_forever</md-icon
          ></md-text-button
        >
        <md-text-button @click=${() => this.mappingDetails.close()}
          >Close</md-text-button
        >
      </div>
    </md-dialog>`;
    }
    render() {
        if (!this.substation)
            return x$1 `<main>No substation section</main>`;
        return x$1 `<main>
      <communication-mapping-editor
        .substation=${this.substation}
        .gridSize=${this.gridSize}
        .connections=${[
            ...clientLnConnections(this.substation.ownerDocument),
            ...parseExtRefs(this.substation.ownerDocument),
        ]}
        @select-connection="${(evt) => {
            this.selectedConnection = evt.detail;
            this.mappingDetails.show();
        }}"
      ></communication-mapping-editor>
      ${this.renderSubscription()}
    </main>`;
    }
}
SldCommunicationEditor.scopedElements = {
    'md-icon': MdIcon,
    'md-dialog': MdDialog,
    'md-text-button': MdTextButton,
    'md-list': MdList,
    'md-list-item': MdListItem,
    'communication-mapping-editor': CommunicationMappingEditor,
    'action-list': ActionList,
    'mwc-button': customElements.get('mwc-button'),
    'mwc-icon': customElements.get('mwc-icon'),
    'mwc-list': customElements.get('mwc-list'),
    'mwc-list-item': customElements.get('mwc-list-item'),
};
SldCommunicationEditor.styles = i$c `
    main {
      width: 100%;
      height: 100%;
    }

    * {
      --md-sys-color-primary: var(--oscd-primary);
      --md-sys-color-secondary: var(--oscd-secondary);
      --md-sys-typescale-body-large-font: var(--oscd-theme-text-font);
      --md-outlined-text-field-input-text-color: var(--oscd-base01);

      --md-sys-color-surface: var(--oscd-base3);
      --md-sys-color-on-surface: var(--oscd-base00);
      --md-sys-color-on-primary: var(--oscd-base2);
      --md-sys-color-on-surface-variant: var(--oscd-base00);
      --md-menu-container-color: var(--oscd-base3);
      --md-sys-color-surface-container-highest: var(--oscd-base2);
      --mdc-icon-font: 'Material Symbols Outlined';
    }

    #mappingDetails {
      width: auto;
      max-width: max-content;
      min-width: min-content;
    }

    #lists {
      display: flex;
    }

    .vertical-list {
      flex: 1;
      z-index: 2;
    }

    .warning {
      color: var(--oscd-error, red);
      --md-sys-color-primary: var(--oscd-error, red);
    }

    .arrow {
      height: 72px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      font-family: Arial, sans-serif;
      font-size: 12px;
      padding: 4px;
    }

    td {
      padding: 4px 8px;
      border: 1px solid var(--oscd-base-3, #f9f9f9);
      text-align: left;
    }

    tr:nth-child(even) {
      background-color: var(--oscd-base-2, #f9f9f9);
    }

    details {
      margin: 8px;
    }

    #comDetails {
      width: auto;
    }

    #supervisionInfo {
      display: flex;
      align-items: center;
      margin: 0px;
      border: 0px;
    }

    #supIcon {
      display: inline-block;
      padding: 10px;
    }

    div[slot='headline'] {
      padding-top: 12px;
      padding-left: 12px;
      padding-bottom: 0px;
    }

    div[slot='content'] {
      padding-top: 0px;
      padding-bottom: 0px;
    }
  `;
__decorate([
    n$j({ attribute: false })
], SldCommunicationEditor.prototype, "doc", void 0);
__decorate([
    n$j({ attribute: false })
], SldCommunicationEditor.prototype, "substation", null);
__decorate([
    r$4()
], SldCommunicationEditor.prototype, "gridSize", void 0);
__decorate([
    n$j({ type: Number })
], SldCommunicationEditor.prototype, "editCount", void 0);
__decorate([
    r$4()
], SldCommunicationEditor.prototype, "selectedConnection", void 0);
__decorate([
    e$d('#mappingDetails')
], SldCommunicationEditor.prototype, "mappingDetails", void 0);

export { SldCommunicationEditor as default };
//# sourceMappingURL=scl-communication-editor.js.map
