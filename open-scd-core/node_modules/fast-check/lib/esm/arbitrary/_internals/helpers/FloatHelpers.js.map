{"version":3,"file":"FloatHelpers.js","sources":["../../../../../../../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/FloatHelpers.js"],"sourcesContent":["const safeNegativeInfinity = Number.NEGATIVE_INFINITY;\nconst safePositiveInfinity = Number.POSITIVE_INFINITY;\nexport const MIN_VALUE_32 = 2 ** -126 * 2 ** -23;\nexport const MAX_VALUE_32 = 2 ** 127 * (1 + (2 ** 23 - 1) / 2 ** 23);\nexport const EPSILON_32 = 2 ** -23;\nconst INDEX_POSITIVE_INFINITY = 2139095040;\nconst INDEX_NEGATIVE_INFINITY = -2139095041;\nconst f32 = new Float32Array(1);\nconst u32 = new Uint32Array(f32.buffer, f32.byteOffset);\nfunction bitCastFloatToUInt32(f) {\n    f32[0] = f;\n    return u32[0];\n}\nexport function decomposeFloat(f) {\n    const bits = bitCastFloatToUInt32(f);\n    const signBit = bits >>> 31;\n    const exponentBits = (bits >>> 23) & 0xff;\n    const significandBits = bits & 0x7fffff;\n    const exponent = exponentBits === 0 ? -126 : exponentBits - 127;\n    let significand = exponentBits === 0 ? 0 : 1;\n    significand += significandBits / 2 ** 23;\n    significand *= signBit === 0 ? 1 : -1;\n    return { exponent, significand };\n}\nfunction indexInFloatFromDecomp(exponent, significand) {\n    if (exponent === -126) {\n        return significand * 0x800000;\n    }\n    return (exponent + 127) * 0x800000 + (significand - 1) * 0x800000;\n}\nexport function floatToIndex(f) {\n    if (f === safePositiveInfinity) {\n        return INDEX_POSITIVE_INFINITY;\n    }\n    if (f === safeNegativeInfinity) {\n        return INDEX_NEGATIVE_INFINITY;\n    }\n    const decomp = decomposeFloat(f);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (f > 0 || (f === 0 && 1 / f === safePositiveInfinity)) {\n        return indexInFloatFromDecomp(exponent, significand);\n    }\n    else {\n        return -indexInFloatFromDecomp(exponent, -significand) - 1;\n    }\n}\nexport function indexToFloat(index) {\n    if (index < 0) {\n        return -indexToFloat(-index - 1);\n    }\n    if (index === INDEX_POSITIVE_INFINITY) {\n        return safePositiveInfinity;\n    }\n    if (index < 0x1000000) {\n        return index * 2 ** -149;\n    }\n    const postIndex = index - 0x1000000;\n    const exponent = -125 + (postIndex >> 23);\n    const significand = 1 + (postIndex & 0x7fffff) / 0x800000;\n    return significand * 2 ** exponent;\n}\n"],"names":[],"mappings":"AAOA,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;AACpB,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU"}