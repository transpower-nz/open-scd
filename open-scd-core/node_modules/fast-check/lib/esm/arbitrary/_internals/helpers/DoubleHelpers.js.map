{"version":3,"file":"DoubleHelpers.js","sources":["../../../../../../../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/DoubleHelpers.js"],"sourcesContent":["import { clone64, isEqual64 } from './ArrayInt64.js';\nconst safeNegativeInfinity = Number.NEGATIVE_INFINITY;\nconst safePositiveInfinity = Number.POSITIVE_INFINITY;\nconst safeEpsilon = Number.EPSILON;\nconst INDEX_POSITIVE_INFINITY = { sign: 1, data: [2146435072, 0] };\nconst INDEX_NEGATIVE_INFINITY = { sign: -1, data: [2146435072, 1] };\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer, f64.byteOffset);\nfunction bitCastDoubleToUInt64(f) {\n    f64[0] = f;\n    return [u32[1], u32[0]];\n}\nexport function decomposeDouble(d) {\n    const { 0: hi, 1: lo } = bitCastDoubleToUInt64(d);\n    const signBit = hi >>> 31;\n    const exponentBits = (hi >>> 20) & 0x7ff;\n    const significandBits = (hi & 0xfffff) * 0x100000000 + lo;\n    const exponent = exponentBits === 0 ? -1022 : exponentBits - 1023;\n    let significand = exponentBits === 0 ? 0 : 1;\n    significand += significandBits / 2 ** 52;\n    significand *= signBit === 0 ? 1 : -1;\n    return { exponent, significand };\n}\nfunction positiveNumberToInt64(n) {\n    return [~~(n / 0x100000000), n >>> 0];\n}\nfunction indexInDoubleFromDecomp(exponent, significand) {\n    if (exponent === -1022) {\n        const rescaledSignificand = significand * 2 ** 52;\n        return positiveNumberToInt64(rescaledSignificand);\n    }\n    const rescaledSignificand = (significand - 1) * 2 ** 52;\n    const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n    const index = positiveNumberToInt64(rescaledSignificand);\n    index[0] += exponentOnlyHigh;\n    return index;\n}\nexport function doubleToIndex(d) {\n    if (d === safePositiveInfinity) {\n        return clone64(INDEX_POSITIVE_INFINITY);\n    }\n    if (d === safeNegativeInfinity) {\n        return clone64(INDEX_NEGATIVE_INFINITY);\n    }\n    const decomp = decomposeDouble(d);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (d > 0 || (d === 0 && 1 / d === safePositiveInfinity)) {\n        return { sign: 1, data: indexInDoubleFromDecomp(exponent, significand) };\n    }\n    else {\n        const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n        if (indexOpposite[1] === 0xffffffff) {\n            indexOpposite[0] += 1;\n            indexOpposite[1] = 0;\n        }\n        else {\n            indexOpposite[1] += 1;\n        }\n        return { sign: -1, data: indexOpposite };\n    }\n}\nexport function indexToDouble(index) {\n    if (index.sign === -1) {\n        const indexOpposite = { sign: 1, data: [index.data[0], index.data[1]] };\n        if (indexOpposite.data[1] === 0) {\n            indexOpposite.data[0] -= 1;\n            indexOpposite.data[1] = 0xffffffff;\n        }\n        else {\n            indexOpposite.data[1] -= 1;\n        }\n        return -indexToDouble(indexOpposite);\n    }\n    if (isEqual64(index, INDEX_POSITIVE_INFINITY)) {\n        return safePositiveInfinity;\n    }\n    if (index.data[0] < 0x200000) {\n        return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n    }\n    const postIndexHigh = index.data[0] - 0x200000;\n    const exponent = -1021 + (postIndexHigh >> 20);\n    const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * safeEpsilon;\n    return significand * 2 ** exponent;\n}\n"],"names":[],"mappings":"AAMA,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;AACpB,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU"}